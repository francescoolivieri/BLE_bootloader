
BLE_FW_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a8  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e8  080079e8  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f0  080079f0  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  080079f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000a58  20000140  08007b34  00020140  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b98  08007b34  00020b98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b812  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f1  00000000  00000000  0003b976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  00040f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021734  00000000  00000000  00042238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8af  00000000  00000000  0006396c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdea2  00000000  00000000  0007f21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d0bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb0  00000000  00000000  0013d110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000140 	.word	0x20000140
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007440 	.word	0x08007440

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000144 	.word	0x20000144
 8000104:	08007440 	.word	0x08007440

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	; (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <HCI_TL_SPI_Init+0xa8>)
 800064e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <HCI_TL_SPI_Init+0xa8>)
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <HCI_TL_SPI_Init+0xa8>)
 800065a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065c:	2201      	movs	r2, #1
 800065e:	4013      	ands	r3, r2
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000664:	240c      	movs	r4, #12
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2288      	movs	r2, #136	; 0x88
 8000670:	0352      	lsls	r2, r2, #13
 8000672:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800067a:	193a      	adds	r2, r7, r4
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f002 f85c 	bl	8002740 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	000c      	movs	r4, r1
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2201      	movs	r2, #1
 8000698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80006a6:	193a      	adds	r2, r7, r4
 80006a8:	23a0      	movs	r3, #160	; 0xa0
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f002 f846 	bl	8002740 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 f832 	bl	8002740 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80006dc:	f001 f96c 	bl	80019b8 <BSP_SPI1_Init>
 80006e0:	0003      	movs	r3, r0
}
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b009      	add	sp, #36	; 0x24
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2101      	movs	r1, #1
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 f98c 	bl	8002a18 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2102      	movs	r1, #2
 8000706:	0018      	movs	r0, r3
 8000708:	f002 f986 	bl	8002a18 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	005a      	lsls	r2, r3, #1
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f002 f97e 	bl	8002a18 <HAL_GPIO_DeInit>
  return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000728:	23a0      	movs	r3, #160	; 0xa0
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	2201      	movs	r2, #1
 800072e:	2102      	movs	r1, #2
 8000730:	0018      	movs	r0, r3
 8000732:	f002 fa66 	bl	8002c02 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	0059      	lsls	r1, r3, #1
 800073a:	23a0      	movs	r3, #160	; 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2200      	movs	r2, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fa5e 	bl	8002c02 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000746:	2005      	movs	r0, #5
 8000748:	f001 fc78 	bl	800203c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	0059      	lsls	r1, r3, #1
 8000750:	23a0      	movs	r3, #160	; 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	2201      	movs	r2, #1
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fa53 	bl	8002c02 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800075c:	2005      	movs	r0, #5
 800075e:	f001 fc6d 	bl	800203c <HAL_Delay>
  return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800076c:	b5b0      	push	{r4, r5, r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	000a      	movs	r2, r1
 8000776:	1cbb      	adds	r3, r7, #2
 8000778:	801a      	strh	r2, [r3, #0]
  uint16_t byte_count;
  uint8_t len = 0;
 800077a:	231d      	movs	r3, #29
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
  uint8_t char_ff = 0xff;
 8000782:	231c      	movs	r3, #28
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	701a      	strb	r2, [r3, #0]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800078a:	2514      	movs	r5, #20
 800078c:	197b      	adds	r3, r7, r5
 800078e:	4a32      	ldr	r2, [pc, #200]	; (8000858 <HCI_TL_SPI_Receive+0xec>)
 8000790:	6811      	ldr	r1, [r2, #0]
 8000792:	6019      	str	r1, [r3, #0]
 8000794:	7912      	ldrb	r2, [r2, #4]
 8000796:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	2200      	movs	r2, #0
 800079e:	2102      	movs	r1, #2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 fa2e 	bl	8002c02 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007a6:	240c      	movs	r4, #12
 80007a8:	1939      	adds	r1, r7, r4
 80007aa:	197b      	adds	r3, r7, r5
 80007ac:	2205      	movs	r2, #5
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 f932 	bl	8001a18 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 80007b4:	0021      	movs	r1, r4
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d13d      	bne.n	800083a <HCI_TL_SPI_Receive+0xce>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	211e      	movs	r1, #30
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	801a      	strh	r2, [r3, #0]

    if(byte_count > 0)
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d02d      	beq.n	800083a <HCI_TL_SPI_Receive+0xce>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80007de:	187a      	adds	r2, r7, r1
 80007e0:	1cbb      	adds	r3, r7, #2
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d903      	bls.n	80007f2 <HCI_TL_SPI_Receive+0x86>
        byte_count = size;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	1cba      	adds	r2, r7, #2
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	801a      	strh	r2, [r3, #0]
      }

      for(len = 0; len < byte_count; len++)
 80007f2:	231d      	movs	r3, #29
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	e015      	b.n	8000828 <HCI_TL_SPI_Receive+0xbc>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80007fc:	241b      	movs	r4, #27
 80007fe:	1939      	adds	r1, r7, r4
 8000800:	231c      	movs	r3, #28
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	2201      	movs	r2, #1
 8000806:	0018      	movs	r0, r3
 8000808:	f001 f906 	bl	8001a18 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800080c:	211d      	movs	r1, #29
 800080e:	187b      	adds	r3, r7, r1
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	18d3      	adds	r3, r2, r3
 8000816:	193a      	adds	r2, r7, r4
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800081e:	187b      	adds	r3, r7, r1
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	187b      	adds	r3, r7, r1
 8000824:	3201      	adds	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	231d      	movs	r3, #29
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b29b      	uxth	r3, r3
 8000830:	221e      	movs	r2, #30
 8000832:	18ba      	adds	r2, r7, r2
 8000834:	8812      	ldrh	r2, [r2, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d8e0      	bhi.n	80007fc <HCI_TL_SPI_Receive+0x90>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2201      	movs	r2, #1
 8000840:	2102      	movs	r1, #2
 8000842:	0018      	movs	r0, r3
 8000844:	f002 f9dd 	bl	8002c02 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000848:	231d      	movs	r3, #29
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b008      	add	sp, #32
 8000854:	bdb0      	pop	{r4, r5, r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	08007468 	.word	0x08007468

0800085c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	000a      	movs	r2, r1
 8000866:	1cbb      	adds	r3, r7, #2
 8000868:	801a      	strh	r2, [r3, #0]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800086a:	2310      	movs	r3, #16
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	4a27      	ldr	r2, [pc, #156]	; (800090c <HCI_TL_SPI_Send+0xb0>)
 8000870:	6811      	ldr	r1, [r2, #0]
 8000872:	6019      	str	r1, [r3, #0]
 8000874:	7912      	ldrb	r2, [r2, #4]
 8000876:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000878:	f001 fbd6 	bl	8002028 <HAL_GetTick>
 800087c:	0003      	movs	r3, r0
 800087e:	61bb      	str	r3, [r7, #24]

  do
  {
    result = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2200      	movs	r2, #0
 800088a:	2102      	movs	r1, #2
 800088c:	0018      	movs	r0, r3
 800088e:	f002 f9b8 	bl	8002c02 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000892:	2408      	movs	r4, #8
 8000894:	1939      	adds	r1, r7, r4
 8000896:	2310      	movs	r3, #16
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	2205      	movs	r2, #5
 800089c:	0018      	movs	r0, r3
 800089e:	f001 f8bb 	bl	8001a18 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 80008a2:	0022      	movs	r2, r4
 80008a4:	18bb      	adds	r3, r7, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d112      	bne.n	80008d2 <HCI_TL_SPI_Send+0x76>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80008ac:	18bb      	adds	r3, r7, r2
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	1cba      	adds	r2, r7, #2
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d807      	bhi.n	80008ca <HCI_TL_SPI_Send+0x6e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80008ba:	1cbb      	adds	r3, r7, #2
 80008bc:	881a      	ldrh	r2, [r3, #0]
 80008be:	4914      	ldr	r1, [pc, #80]	; (8000910 <HCI_TL_SPI_Send+0xb4>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 f8a8 	bl	8001a18 <BSP_SPI1_SendRecv>
 80008c8:	e006      	b.n	80008d8 <HCI_TL_SPI_Send+0x7c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	425b      	negs	r3, r3
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	e002      	b.n	80008d8 <HCI_TL_SPI_Send+0x7c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	425b      	negs	r3, r3
 80008d6:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2201      	movs	r2, #1
 80008de:	2102      	movs	r1, #2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 f98e 	bl	8002c02 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80008e6:	f001 fb9f 	bl	8002028 <HAL_GetTick>
 80008ea:	0002      	movs	r2, r0
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d903      	bls.n	80008fc <HCI_TL_SPI_Send+0xa0>
    {
      result = -3;
 80008f4:	2303      	movs	r3, #3
 80008f6:	425b      	negs	r3, r3
 80008f8:	61fb      	str	r3, [r7, #28]
      break;
 80008fa:	e002      	b.n	8000902 <HCI_TL_SPI_Send+0xa6>
    }
  } while(result < 0);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	dbbe      	blt.n	8000880 <HCI_TL_SPI_Send+0x24>

  return result;
 8000902:	69fb      	ldr	r3, [r7, #28]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b009      	add	sp, #36	; 0x24
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	08007470 	.word	0x08007470
 8000910:	20000168 	.word	0x20000168

08000914 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2101      	movs	r1, #1
 800091e:	0018      	movs	r0, r3
 8000920:	f002 f952 	bl	8002bc8 <HAL_GPIO_ReadPin>
 8000924:	0003      	movs	r3, r0
 8000926:	3b01      	subs	r3, #1
 8000928:	425a      	negs	r2, r3
 800092a:	4153      	adcs	r3, r2
 800092c:	b2db      	uxtb	r3, r3
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <hci_tl_lowlevel_init+0x64>)
 800093e:	601a      	str	r2, [r3, #0]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <hci_tl_lowlevel_init+0x68>)
 8000944:	605a      	str	r2, [r3, #4]
  fops.Send    = HCI_TL_SPI_Send;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <hci_tl_lowlevel_init+0x6c>)
 800094a:	611a      	str	r2, [r3, #16]
  fops.Receive = HCI_TL_SPI_Receive;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <hci_tl_lowlevel_init+0x70>)
 8000950:	60da      	str	r2, [r3, #12]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <hci_tl_lowlevel_init+0x74>)
 8000956:	609a      	str	r2, [r3, #8]
  fops.GetTick = BSP_GetTick;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <hci_tl_lowlevel_init+0x78>)
 800095c:	619a      	str	r2, [r3, #24]

  hci_register_io_bus (&fops);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	0018      	movs	r0, r3
 8000962:	f005 fa61 	bl	8005e28 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000966:	23c0      	movs	r3, #192	; 0xc0
 8000968:	04da      	lsls	r2, r3, #19
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <hci_tl_lowlevel_init+0x7c>)
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f001 fc98 	bl	80022a4 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000974:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <hci_tl_lowlevel_init+0x80>)
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <hci_tl_lowlevel_init+0x7c>)
 8000978:	2100      	movs	r1, #0
 800097a:	0018      	movs	r0, r3
 800097c:	f001 fc60 	bl	8002240 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2005      	movs	r0, #5
 8000986:	f001 fc29 	bl	80021dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800098a:	2005      	movs	r0, #5
 800098c:	f001 fc3b 	bl	8002206 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b008      	add	sp, #32
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08000645 	.word	0x08000645
 800099c:	080006f1 	.word	0x080006f1
 80009a0:	0800085d 	.word	0x0800085d
 80009a4:	0800076d 	.word	0x0800076d
 80009a8:	08000725 	.word	0x08000725
 80009ac:	08001a59 	.word	0x08001a59
 80009b0:	2000015c 	.word	0x2000015c
 80009b4:	080009b9 	.word	0x080009b9

080009b8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80009bc:	e004      	b.n	80009c8 <hci_tl_lowlevel_isr+0x10>
  {
    if (hci_notify_asynch_evt(NULL))
 80009be:	2000      	movs	r0, #0
 80009c0:	f005 fbb0 	bl	8006124 <hci_notify_asynch_evt>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d104      	bne.n	80009d2 <hci_tl_lowlevel_isr+0x1a>
  while(IsDataAvailable())
 80009c8:	f7ff ffa4 	bl	8000914 <IsDataAvailable>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d1f6      	bne.n	80009be <hci_tl_lowlevel_isr+0x6>
 80009d0:	e000      	b.n	80009d4 <hci_tl_lowlevel_isr+0x1c>
    {
      return;
 80009d2:	46c0      	nop			; (mov r8, r8)
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <BlueNRG_Init>:
extern uint8_t notification_enabled;

/*
 * Initialization task
 */
HAL_StatusTypeDef BlueNRG_Init(void){
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 80009de:	2517      	movs	r5, #23
 80009e0:	197b      	adds	r3, r7, r5
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	tBleStatus ret_ble;
	uint8_t bdaddr[BDADDR_SIZE];
	const char *name = "MyBLE";
 80009e6:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <BlueNRG_Init+0x158>)
 80009e8:	613b      	str	r3, [r7, #16]

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle; // handlers of GAP service

	BLUENRG_memcpy(bdaddr, SERVER_BDADDRR, sizeof(SERVER_BDADDRR));
 80009ea:	2608      	movs	r6, #8
 80009ec:	19bb      	adds	r3, r7, r6
 80009ee:	4a51      	ldr	r2, [pc, #324]	; (8000b34 <BlueNRG_Init+0x15c>)
 80009f0:	6811      	ldr	r1, [r2, #0]
 80009f2:	6019      	str	r1, [r3, #0]
 80009f4:	8892      	ldrh	r2, [r2, #4]
 80009f6:	809a      	strh	r2, [r3, #4]

	/* Init HCI */
	hci_init(HCI_Event_CB,  NULL);
 80009f8:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <BlueNRG_Init+0x160>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	0018      	movs	r0, r3
 80009fe:	f005 f9c7 	bl	8005d90 <hci_init>

	/* Reset HCI */
	hci_reset();
 8000a02:	f005 f8a4 	bl	8005b4e <hci_reset>
	HAL_Delay(100);
 8000a06:	2064      	movs	r0, #100	; 0x64
 8000a08:	f001 fb18 	bl	800203c <HAL_Delay>

	printf("\r\nStart initialization... \n\r");
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <BlueNRG_Init+0x164>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f005 fff2 	bl	80069f8 <iprintf>
	fflush(stdout);
 8000a14:	4b4a      	ldr	r3, [pc, #296]	; (8000b40 <BlueNRG_Init+0x168>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f005 fdba 	bl	8006594 <fflush>

	/* Configure device address */
	ret_ble = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000a20:	230f      	movs	r3, #15
 8000a22:	18fc      	adds	r4, r7, r3
 8000a24:	19bb      	adds	r3, r7, r6
 8000a26:	001a      	movs	r2, r3
 8000a28:	2106      	movs	r1, #6
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f005 f826 	bl	8005a7c <aci_hal_write_config_data>
 8000a30:	0003      	movs	r3, r0
 8000a32:	7023      	strb	r3, [r4, #0]

	if(ret_ble != BLE_STATUS_SUCCESS){
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <BlueNRG_Init+0x74>
		printf("Failed to set Public Address \n\r");
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <BlueNRG_Init+0x16c>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f005 ffd9 	bl	80069f8 <iprintf>
		ret = HAL_ERROR;
 8000a46:	197b      	adds	r3, r7, r5
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
	}

	/* Initialize GATT server */
	ret_ble = aci_gatt_init();
 8000a4c:	250f      	movs	r5, #15
 8000a4e:	197c      	adds	r4, r7, r5
 8000a50:	f004 fdc8 	bl	80055e4 <aci_gatt_init>
 8000a54:	0003      	movs	r3, r0
 8000a56:	7023      	strb	r3, [r4, #0]
	if(ret_ble != BLE_STATUS_SUCCESS){
 8000a58:	197b      	adds	r3, r7, r5
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d007      	beq.n	8000a70 <BlueNRG_Init+0x98>
		printf("Failed to GATT Initialization \n\r");
 8000a60:	4b39      	ldr	r3, [pc, #228]	; (8000b48 <BlueNRG_Init+0x170>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f005 ffc8 	bl	80069f8 <iprintf>
		ret = HAL_ERROR;
 8000a68:	2317      	movs	r3, #23
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
	}

	/* Initialize GAP service */
	ret_ble = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle); //2nd arg -> privacy (0: no, 1: yes)
 8000a70:	250f      	movs	r5, #15
 8000a72:	197c      	adds	r4, r7, r5
 8000a74:	1dba      	adds	r2, r7, #6
 8000a76:	1cbb      	adds	r3, r7, #2
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	0013      	movs	r3, r2
 8000a80:	2207      	movs	r2, #7
 8000a82:	2100      	movs	r1, #0
 8000a84:	2001      	movs	r0, #1
 8000a86:	f004 fc27 	bl	80052d8 <aci_gap_init_IDB05A1>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	7023      	strb	r3, [r4, #0]
	//ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle,  &appearance_char_handle);

	if(ret_ble != BLE_STATUS_SUCCESS){
 8000a8e:	197b      	adds	r3, r7, r5
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d007      	beq.n	8000aa6 <BlueNRG_Init+0xce>
		printf("Failed to Initialize GAP Service\n\r");
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <BlueNRG_Init+0x174>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f005 ffad 	bl	80069f8 <iprintf>
		ret = HAL_ERROR;
 8000a9e:	2317      	movs	r3, #23
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
	}


	/* Update characteristics */
	ret_ble = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8000aa6:	1dbb      	adds	r3, r7, #6
 8000aa8:	881d      	ldrh	r5, [r3, #0]
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	881e      	ldrh	r6, [r3, #0]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff fb29 	bl	8000108 <strlen>
 8000ab6:	0003      	movs	r3, r0
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	230f      	movs	r3, #15
 8000abc:	18fc      	adds	r4, r7, r3
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	0013      	movs	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	0031      	movs	r1, r6
 8000ac8:	0028      	movs	r0, r5
 8000aca:	f004 ff33 	bl	8005934 <aci_gatt_update_char_value>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	7023      	strb	r3, [r4, #0]
	if(ret_ble != BLE_STATUS_SUCCESS){
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00a      	beq.n	8000af2 <BlueNRG_Init+0x11a>
		printf("Failed to Update Characteristics %d\n\r", ret);
 8000adc:	2417      	movs	r4, #23
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <BlueNRG_Init+0x178>)
 8000ae4:	0011      	movs	r1, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f005 ff86 	bl	80069f8 <iprintf>
		ret = HAL_ERROR;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
	}

	/* Add custom service */
	ret_ble = add_FW_Update_Service();
 8000af2:	250f      	movs	r5, #15
 8000af4:	197c      	adds	r4, r7, r5
 8000af6:	f000 fceb 	bl	80014d0 <add_FW_Update_Service>
 8000afa:	0003      	movs	r3, r0
 8000afc:	7023      	strb	r3, [r4, #0]
	if(ret_ble != BLE_STATUS_SUCCESS){
 8000afe:	197b      	adds	r3, r7, r5
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d007      	beq.n	8000b16 <BlueNRG_Init+0x13e>
		printf("Failed to Add Service\n\r");
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <BlueNRG_Init+0x17c>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f005 ff75 	bl	80069f8 <iprintf>
		ret = HAL_ERROR;
 8000b0e:	2317      	movs	r3, #23
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
	}

	fflush(stdout);
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <BlueNRG_Init+0x168>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f005 fd39 	bl	8006594 <fflush>
	return ret;
 8000b22:	2317      	movs	r3, #23
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	781b      	ldrb	r3, [r3, #0]
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b007      	add	sp, #28
 8000b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b30:	08007478 	.word	0x08007478
 8000b34:	20000000 	.word	0x20000000
 8000b38:	0800181d 	.word	0x0800181d
 8000b3c:	08007480 	.word	0x08007480
 8000b40:	20000050 	.word	0x20000050
 8000b44:	080074a0 	.word	0x080074a0
 8000b48:	080074c0 	.word	0x080074c0
 8000b4c:	080074e4 	.word	0x080074e4
 8000b50:	08007508 	.word	0x08007508
 8000b54:	08007530 	.word	0x08007530

08000b58 <BlueNRG_Process>:


/*
 * Background task
 */
void BlueNRG_Process(void){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	if(set_connectable){
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <BlueNRG_Process+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d004      	beq.n	8000b6e <BlueNRG_Process+0x16>
		Enable_Advertising();
 8000b64:	f000 f80a 	bl	8000b7c <Enable_Advertising>
		set_connectable = FALSE;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <BlueNRG_Process+0x20>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
	}

	/* Process user event */
	hci_user_evt_proc();
 8000b6e:	f005 faab 	bl	80060c8 <hci_user_evt_proc>

}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000040 	.word	0x20000040

08000b7c <Enable_Advertising>:

void Enable_Advertising(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af08      	add	r7, sp, #32
	char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'L', 'E', '-', 'G', '-', 'U', 'P'};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <Enable_Advertising+0x4c>)
 8000b86:	ca03      	ldmia	r2!, {r0, r1}
 8000b88:	c303      	stmia	r3!, {r0, r1}
 8000b8a:	7812      	ldrb	r2, [r2, #0]
 8000b8c:	701a      	strb	r2, [r3, #0]

	hci_le_set_scan_resp_data(0, NULL);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2000      	movs	r0, #0
 8000b92:	f005 f802 	bl	8005b9a <hci_le_set_scan_resp_data>

	/* Set device in General Discoverable mode */
	aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000b96:	2300      	movs	r3, #0
 8000b98:	9306      	str	r3, [sp, #24]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9305      	str	r3, [sp, #20]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9304      	str	r3, [sp, #16]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9303      	str	r3, [sp, #12]
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	2309      	movs	r3, #9
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f004 fbf8 	bl	80053ae <aci_gap_set_discoverable>
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	08007548 	.word	0x08007548

08000bcc <data_handler>:
uint16_t total_pck = 0;
uint16_t count_pck = 0;

bool next_ack = true;

void data_handler(uint8_t *data_buffer, uint8_t num_bytes){
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b08d      	sub	sp, #52	; 0x34
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	61f8      	str	r0, [r7, #28]
 8000bd4:	000a      	movs	r2, r1
 8000bd6:	231b      	movs	r3, #27
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	int i;
	for(i=0 ; i<num_bytes && num_bytes<=CHAT_DATA_LEN ; i++){
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000be0:	e00c      	b.n	8000bfc <data_handler+0x30>
		printf("%02x", data_buffer[i]);
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	69fa      	ldr	r2, [r7, #28]
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	001a      	movs	r2, r3
 8000bec:	4bb4      	ldr	r3, [pc, #720]	; (8000ec0 <data_handler+0x2f4>)
 8000bee:	0011      	movs	r1, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f005 ff01 	bl	80069f8 <iprintf>
	for(i=0 ; i<num_bytes && num_bytes<=CHAT_DATA_LEN ; i++){
 8000bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bfc:	211b      	movs	r1, #27
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c04:	429a      	cmp	r2, r3
 8000c06:	da03      	bge.n	8000c10 <data_handler+0x44>
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b14      	cmp	r3, #20
 8000c0e:	d9e8      	bls.n	8000be2 <data_handler+0x16>
	}
	printf("\n\r");
 8000c10:	4bac      	ldr	r3, [pc, #688]	; (8000ec4 <data_handler+0x2f8>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f005 fef0 	bl	80069f8 <iprintf>

	switch(connection_status){
 8000c18:	4bab      	ldr	r3, [pc, #684]	; (8000ec8 <data_handler+0x2fc>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d002      	beq.n	8000c26 <data_handler+0x5a>
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d036      	beq.n	8000c92 <data_handler+0xc6>
 8000c24:	e13b      	b.n	8000e9e <data_handler+0x2d2>
		case CONNECTED:   // receive START FLASH MODE pck
			if(verify_data_type(data_buffer, num_bytes, START_FLASH_MODE) == true){
 8000c26:	231b      	movs	r3, #27
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	7819      	ldrb	r1, [r3, #0]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 f967 	bl	8000f04 <verify_data_type>
 8000c36:	0003      	movs	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d121      	bne.n	8000c80 <data_handler+0xb4>
				total_pck = (data_buffer[1] << 8) + data_buffer[2];
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	18d3      	adds	r3, r2, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b9d      	ldr	r3, [pc, #628]	; (8000ecc <data_handler+0x300>)
 8000c56:	801a      	strh	r2, [r3, #0]
				printf("I expect %d packets \n\r", total_pck);
 8000c58:	4b9c      	ldr	r3, [pc, #624]	; (8000ecc <data_handler+0x300>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	4b9c      	ldr	r3, [pc, #624]	; (8000ed0 <data_handler+0x304>)
 8000c60:	0011      	movs	r1, r2
 8000c62:	0018      	movs	r0, r3
 8000c64:	f005 fec8 	bl	80069f8 <iprintf>


				send_ack(true, WRITE_FLASH_PACKET_RESPONSE);
 8000c68:	2102      	movs	r1, #2
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 f9a8 	bl	8000fc0 <send_ack>
				connection_status = RECEVEING_FW;
 8000c70:	4b95      	ldr	r3, [pc, #596]	; (8000ec8 <data_handler+0x2fc>)
 8000c72:	2202      	movs	r2, #2
 8000c74:	701a      	strb	r2, [r3, #0]
				printf("READY TO RECEIVE FW\n\r");
 8000c76:	4b97      	ldr	r3, [pc, #604]	; (8000ed4 <data_handler+0x308>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f005 febd 	bl	80069f8 <iprintf>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);

				printf("Received an init pck that I can't handle or wrong\n\r");
			}

			break;
 8000c7e:	e114      	b.n	8000eaa <data_handler+0x2de>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);
 8000c80:	2102      	movs	r1, #2
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f99c 	bl	8000fc0 <send_ack>
				printf("Received an init pck that I can't handle or wrong\n\r");
 8000c88:	4b93      	ldr	r3, [pc, #588]	; (8000ed8 <data_handler+0x30c>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f005 feb4 	bl	80069f8 <iprintf>
			break;
 8000c90:	e10b      	b.n	8000eaa <data_handler+0x2de>
		case RECEVEING_FW:
			if(verify_data_type(data_buffer, num_bytes, WRITE_FLASH_PACKET)){
 8000c92:	231b      	movs	r3, #27
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	7819      	ldrb	r1, [r3, #0]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f000 f931 	bl	8000f04 <verify_data_type>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d100      	bne.n	8000ca8 <data_handler+0xdc>
 8000ca6:	e0ae      	b.n	8000e06 <data_handler+0x23a>
				uint16_t pck_num = (data_buffer[1] << 8) + data_buffer[2];
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	3301      	adds	r3, #1
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	b299      	uxth	r1, r3
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	200e      	movs	r0, #14
 8000cbe:	2618      	movs	r6, #24
 8000cc0:	1983      	adds	r3, r0, r6
 8000cc2:	19db      	adds	r3, r3, r7
 8000cc4:	188a      	adds	r2, r1, r2
 8000cc6:	801a      	strh	r2, [r3, #0]

				if(pck_num == count_pck){
 8000cc8:	4b84      	ldr	r3, [pc, #528]	; (8000edc <data_handler+0x310>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	1982      	adds	r2, r0, r6
 8000cce:	19d2      	adds	r2, r2, r7
 8000cd0:	8812      	ldrh	r2, [r2, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d000      	beq.n	8000cd8 <data_handler+0x10c>
 8000cd6:	e086      	b.n	8000de6 <data_handler+0x21a>
					// save msg
					for(int i=3 ; i<num_bytes-1 ; i++){
 8000cd8:	2303      	movs	r3, #3
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cdc:	e07a      	b.n	8000dd4 <data_handler+0x208>
						if((i-3)%8 != 0){
 8000cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d039      	beq.n	8000d5e <data_handler+0x192>
							data_to_flash[consd] += ((uint64_t)data_buffer[i] << ((i-3)%8)*8 );
 8000cea:	4b7d      	ldr	r3, [pc, #500]	; (8000ee0 <data_handler+0x314>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	4a7d      	ldr	r2, [pc, #500]	; (8000ee4 <data_handler+0x318>)
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	18d3      	adds	r3, r2, r3
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	6859      	ldr	r1, [r3, #4]
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	4a77      	ldr	r2, [pc, #476]	; (8000ee8 <data_handler+0x31c>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d504      	bpl.n	8000d1a <data_handler+0x14e>
 8000d10:	3b01      	subs	r3, #1
 8000d12:	2208      	movs	r2, #8
 8000d14:	4252      	negs	r2, r2
 8000d16:	4313      	orrs	r3, r2
 8000d18:	3301      	adds	r3, #1
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	3a20      	subs	r2, #32
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	db03      	blt.n	8000d2c <data_handler+0x160>
 8000d24:	693e      	ldr	r6, [r7, #16]
 8000d26:	4096      	lsls	r6, r2
 8000d28:	0035      	movs	r5, r6
 8000d2a:	e008      	b.n	8000d3e <data_handler+0x172>
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	693e      	ldr	r6, [r7, #16]
 8000d32:	40d6      	lsrs	r6, r2
 8000d34:	0032      	movs	r2, r6
 8000d36:	697e      	ldr	r6, [r7, #20]
 8000d38:	409e      	lsls	r6, r3
 8000d3a:	0035      	movs	r5, r6
 8000d3c:	4315      	orrs	r5, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	409a      	lsls	r2, r3
 8000d42:	0014      	movs	r4, r2
 8000d44:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <data_handler+0x314>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	001e      	movs	r6, r3
 8000d4a:	0002      	movs	r2, r0
 8000d4c:	000b      	movs	r3, r1
 8000d4e:	1912      	adds	r2, r2, r4
 8000d50:	416b      	adcs	r3, r5
 8000d52:	4864      	ldr	r0, [pc, #400]	; (8000ee4 <data_handler+0x318>)
 8000d54:	00f1      	lsls	r1, r6, #3
 8000d56:	1841      	adds	r1, r0, r1
 8000d58:	600a      	str	r2, [r1, #0]
 8000d5a:	604b      	str	r3, [r1, #4]
 8000d5c:	e037      	b.n	8000dce <data_handler+0x202>
						}else{
							consd++;
 8000d5e:	4b60      	ldr	r3, [pc, #384]	; (8000ee0 <data_handler+0x314>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b5e      	ldr	r3, [pc, #376]	; (8000ee0 <data_handler+0x314>)
 8000d68:	801a      	strh	r2, [r3, #0]
							data_to_flash[consd] = ((uint64_t)data_buffer[i] << ((i-3)%8)*8 );
 8000d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	18d3      	adds	r3, r2, r3
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7a:	3b03      	subs	r3, #3
 8000d7c:	4a5a      	ldr	r2, [pc, #360]	; (8000ee8 <data_handler+0x31c>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d504      	bpl.n	8000d8c <data_handler+0x1c0>
 8000d82:	3b01      	subs	r3, #1
 8000d84:	2208      	movs	r2, #8
 8000d86:	4252      	negs	r2, r2
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4a54      	ldr	r2, [pc, #336]	; (8000ee0 <data_handler+0x314>)
 8000d90:	8812      	ldrh	r2, [r2, #0]
 8000d92:	0011      	movs	r1, r2
 8000d94:	001a      	movs	r2, r3
 8000d96:	3a20      	subs	r2, #32
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	db03      	blt.n	8000da4 <data_handler+0x1d8>
 8000d9c:	68b8      	ldr	r0, [r7, #8]
 8000d9e:	4090      	lsls	r0, r2
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	e00a      	b.n	8000dba <data_handler+0x1ee>
 8000da4:	2220      	movs	r2, #32
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	68b8      	ldr	r0, [r7, #8]
 8000daa:	40d0      	lsrs	r0, r2
 8000dac:	0002      	movs	r2, r0
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	4098      	lsls	r0, r3
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	4310      	orrs	r0, r2
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	603a      	str	r2, [r7, #0]
 8000dc0:	4a48      	ldr	r2, [pc, #288]	; (8000ee4 <data_handler+0x318>)
 8000dc2:	00cb      	lsls	r3, r1, #3
 8000dc4:	18d3      	adds	r3, r2, r3
 8000dc6:	6839      	ldr	r1, [r7, #0]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6019      	str	r1, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
					for(int i=3 ; i<num_bytes-1 ; i++){
 8000dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dd4:	231b      	movs	r3, #27
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dde:	429a      	cmp	r2, r3
 8000de0:	da00      	bge.n	8000de4 <data_handler+0x218>
 8000de2:	e77c      	b.n	8000cde <data_handler+0x112>
 8000de4:	e016      	b.n	8000e14 <data_handler+0x248>
						}
					}

				}else{
					printf("Wrong pck_num %d, %d \n\r", pck_num, count_pck);
 8000de6:	230e      	movs	r3, #14
 8000de8:	2218      	movs	r2, #24
 8000dea:	189b      	adds	r3, r3, r2
 8000dec:	19db      	adds	r3, r3, r7
 8000dee:	8819      	ldrh	r1, [r3, #0]
 8000df0:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <data_handler+0x310>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <data_handler+0x320>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f005 fdfd 	bl	80069f8 <iprintf>
					next_ack = false;
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <data_handler+0x324>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e006      	b.n	8000e14 <data_handler+0x248>
				}

			}else{

				printf("Ricevuto pckt sbagliato \n\r");
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <data_handler+0x328>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f005 fdf5 	bl	80069f8 <iprintf>
				next_ack = false;
 8000e0e:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <data_handler+0x324>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
			}
			count_pck++;
 8000e14:	4b31      	ldr	r3, [pc, #196]	; (8000edc <data_handler+0x310>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <data_handler+0x310>)
 8000e1e:	801a      	strh	r2, [r3, #0]

			if(count_pck%10 == 0 || count_pck == total_pck){
 8000e20:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <data_handler+0x310>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	210a      	movs	r1, #10
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff fa06 	bl	8000238 <__aeabi_uidivmod>
 8000e2c:	000b      	movs	r3, r1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <data_handler+0x274>
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <data_handler+0x310>)
 8000e36:	881a      	ldrh	r2, [r3, #0]
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <data_handler+0x300>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d133      	bne.n	8000ea8 <data_handler+0x2dc>

				send_ack(next_ack, WRITE_FLASH_PACKET_RESPONSE);
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <data_handler+0x324>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2102      	movs	r1, #2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 f8ba 	bl	8000fc0 <send_ack>

				if(next_ack == false){
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <data_handler+0x324>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d106      	bne.n	8000e62 <data_handler+0x296>
					count_pck -= 10;    // set back the counter packet
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <data_handler+0x310>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	3b0a      	subs	r3, #10
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <data_handler+0x310>)
 8000e5e:	801a      	strh	r2, [r3, #0]
 8000e60:	e008      	b.n	8000e74 <data_handler+0x2a8>
				}else{
					Write_FW_to_flash(data_to_flash, consd+1); // you can save properly since no error found in pckts
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <data_handler+0x314>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <data_handler+0x318>)
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 f92e 	bl	80010d0 <Write_FW_to_flash>
				}

				if(count_pck == total_pck){
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <data_handler+0x310>)
 8000e76:	881a      	ldrh	r2, [r3, #0]
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <data_handler+0x300>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d106      	bne.n	8000e8e <data_handler+0x2c2>
					printf("FW Received!\n\r");
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <data_handler+0x32c>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f005 fdb8 	bl	80069f8 <iprintf>
					connection_status = CLOSING_CONNECTION;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <data_handler+0x2fc>)
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	701a      	strb	r2, [r3, #0]
				}

				consd = -1;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <data_handler+0x314>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	4252      	negs	r2, r2
 8000e94:	801a      	strh	r2, [r3, #0]
				next_ack = true;
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <data_handler+0x324>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]

			}

			break;
 8000e9c:	e004      	b.n	8000ea8 <data_handler+0x2dc>

		default:
			printf("Connection status handle not found\n\r");
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <data_handler+0x330>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f005 fda9 	bl	80069f8 <iprintf>

			break;
 8000ea6:	e000      	b.n	8000eaa <data_handler+0x2de>
			break;
 8000ea8:	46c0      	nop			; (mov r8, r8)
	}
	fflush(stdout);
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <data_handler+0x334>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f005 fb6f 	bl	8006594 <fflush>

}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b00d      	add	sp, #52	; 0x34
 8000ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	08007554 	.word	0x08007554
 8000ec4:	0800755c 	.word	0x0800755c
 8000ec8:	20000267 	.word	0x20000267
 8000ecc:	20000768 	.word	0x20000768
 8000ed0:	08007560 	.word	0x08007560
 8000ed4:	08007578 	.word	0x08007578
 8000ed8:	08007590 	.word	0x08007590
 8000edc:	2000076a 	.word	0x2000076a
 8000ee0:	20000006 	.word	0x20000006
 8000ee4:	20000268 	.word	0x20000268
 8000ee8:	80000007 	.word	0x80000007
 8000eec:	080075c4 	.word	0x080075c4
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	080075dc 	.word	0x080075dc
 8000ef8:	080075f8 	.word	0x080075f8
 8000efc:	08007608 	.word	0x08007608
 8000f00:	20000050 	.word	0x20000050

08000f04 <verify_data_type>:

bool verify_data_type(uint8_t *data_buffer, uint8_t num_bytes, PckType expected_pck){
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	0008      	movs	r0, r1
 8000f0e:	0011      	movs	r1, r2
 8000f10:	1cfb      	adds	r3, r7, #3
 8000f12:	1c02      	adds	r2, r0, #0
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	1cbb      	adds	r3, r7, #2
 8000f18:	1c0a      	adds	r2, r1, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
	uint8_t rcv_crc = data_buffer[num_bytes-1];;
 8000f1c:	1cfb      	adds	r3, r7, #3
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	18d2      	adds	r2, r2, r3
 8000f26:	230e      	movs	r3, #14
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	701a      	strb	r2, [r3, #0]

	uint8_t checksum = 0;
 8000f2e:	230f      	movs	r3, #15
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]

	switch(expected_pck){
 8000f36:	1cbb      	adds	r3, r7, #2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <verify_data_type+0x40>
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d018      	beq.n	8000f74 <verify_data_type+0x70>
 8000f42:	e025      	b.n	8000f90 <verify_data_type+0x8c>
		case START_FLASH_MODE:

			/* check cmd and lenght of the msg */
			if(data_buffer[0] != START_FLASH_MODE_CMD || num_bytes != START_FLASH_MODE_LEN)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2bbb      	cmp	r3, #187	; 0xbb
 8000f4a:	d103      	bne.n	8000f54 <verify_data_type+0x50>
 8000f4c:	1cfb      	adds	r3, r7, #3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d001      	beq.n	8000f58 <verify_data_type+0x54>
				return false;
 8000f54:	2300      	movs	r3, #0
 8000f56:	e02c      	b.n	8000fb2 <verify_data_type+0xae>

			checksum = sum_payload(data_buffer, 1, num_bytes-2); // -2 because sum_payload include end index
 8000f58:	1cfb      	adds	r3, r7, #3
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	3b02      	subs	r3, #2
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	230f      	movs	r3, #15
 8000f62:	18fc      	adds	r4, r7, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2101      	movs	r1, #1
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 f87f 	bl	800106c <sum_payload>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	7023      	strb	r3, [r4, #0]
			/*
			for(int i=0; i<16 && i+1<num_bytes-1 ; i++){
				checksum += data_buffer[i+1];
			}*/
			break;
 8000f72:	e013      	b.n	8000f9c <verify_data_type+0x98>

		case WRITE_FLASH_PACKET:
			// add controls
			checksum = sum_payload(data_buffer, 3, num_bytes-2);
 8000f74:	1cfb      	adds	r3, r7, #3
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	18fc      	adds	r4, r7, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2103      	movs	r1, #3
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 f871 	bl	800106c <sum_payload>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	7023      	strb	r3, [r4, #0]
			/*
			for(int i=0; i<16 && i+3<num_bytes-1 ; i++){
				checksum += data_buffer[i+3];
			}*/
			break;
 8000f8e:	e005      	b.n	8000f9c <verify_data_type+0x98>

		default:
			printf("Can't verify this data\n\r");
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <verify_data_type+0xb8>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f005 fd30 	bl	80069f8 <iprintf>

			return false;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e00a      	b.n	8000fb2 <verify_data_type+0xae>
	}

	//printf("ck rcv: %d, clc: %d", rcv_crc, checksum);

	if(checksum == rcv_crc){
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fa      	adds	r2, r7, r3
 8000fa0:	230e      	movs	r3, #14
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d101      	bne.n	8000fb0 <verify_data_type+0xac>
		return true;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <verify_data_type+0xae>
	}else{
		return false;
 8000fb0:	2300      	movs	r3, #0
	}
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b005      	add	sp, #20
 8000fb8:	bd90      	pop	{r4, r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	08007630 	.word	0x08007630

08000fc0 <send_ack>:


void send_ack(bool ack, PckType reply_type){
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	1c0a      	adds	r2, r1, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
	uint8_t ack_msg;

	if(ack == true){
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d104      	bne.n	8000fe4 <send_ack+0x24>
		ack_msg = 0x00;
 8000fda:	230f      	movs	r3, #15
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e003      	b.n	8000fec <send_ack+0x2c>
	}else{
		ack_msg = 0x01;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
	}

	uint8_t msg_len = 0;
 8000fec:	250e      	movs	r5, #14
 8000fee:	197b      	adds	r3, r7, r5
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
	switch(reply_type){
 8000ff4:	1dbb      	adds	r3, r7, #6
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d12b      	bne.n	8001054 <send_ack+0x94>
		case WRITE_FLASH_PACKET_RESPONSE:
			msg_len = WRITE_FLASH_PACKET_RESPONSE_LEN;
 8000ffc:	197b      	adds	r3, r7, r5
 8000ffe:	2205      	movs	r2, #5
 8001000:	701a      	strb	r2, [r3, #0]
			uint8_t msg[WRITE_FLASH_PACKET_RESPONSE_LEN];

			msg[0] = ack_msg;
 8001002:	2108      	movs	r1, #8
 8001004:	187b      	adds	r3, r7, r1
 8001006:	220f      	movs	r2, #15
 8001008:	18ba      	adds	r2, r7, r2
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	701a      	strb	r2, [r3, #0]
			msg[1] = 0x00; // CMD ?!
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2200      	movs	r2, #0
 8001012:	705a      	strb	r2, [r3, #1]
			msg[2] = (count_pck >> 8) & 0xff;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <send_ack+0xa4>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2da      	uxtb	r2, r3
 800101e:	187b      	adds	r3, r7, r1
 8001020:	709a      	strb	r2, [r3, #2]
			msg[3] = (count_pck & 0xff);
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <send_ack+0xa4>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	187b      	adds	r3, r7, r1
 800102a:	70da      	strb	r2, [r3, #3]
			msg[4] = sum_payload(msg, 2, 3);
 800102c:	000c      	movs	r4, r1
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2203      	movs	r2, #3
 8001032:	2102      	movs	r1, #2
 8001034:	0018      	movs	r0, r3
 8001036:	f000 f819 	bl	800106c <sum_payload>
 800103a:	0003      	movs	r3, r0
 800103c:	001a      	movs	r2, r3
 800103e:	0021      	movs	r1, r4
 8001040:	187b      	adds	r3, r7, r1
 8001042:	711a      	strb	r2, [r3, #4]

			//printf("%02x", msg);

			Update_TX_Char(msg, msg_len);
 8001044:	197b      	adds	r3, r7, r5
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	187b      	adds	r3, r7, r1
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f000 facd 	bl	80015ec <Update_TX_Char>
 8001052:	e003      	b.n	800105c <send_ack+0x9c>
			break;

		default:
			printf("Can't handle the reply_type\n\r");
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <send_ack+0xa8>)
 8001056:	0018      	movs	r0, r3
 8001058:	f005 fcce 	bl	80069f8 <iprintf>
			return;
			break;
	}

}
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bdb0      	pop	{r4, r5, r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	2000076a 	.word	0x2000076a
 8001068:	0800764c 	.word	0x0800764c

0800106c <sum_payload>:


uint8_t sum_payload(uint8_t *payload, uint8_t start, uint8_t end){
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	0008      	movs	r0, r1
 8001076:	0011      	movs	r1, r2
 8001078:	1cfb      	adds	r3, r7, #3
 800107a:	1c02      	adds	r2, r0, #0
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	1cbb      	adds	r3, r7, #2
 8001080:	1c0a      	adds	r2, r1, #0
 8001082:	701a      	strb	r2, [r3, #0]
	uint8_t sum = 0;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

	for(int i=start; i<=end ;i++){
 800108c:	1cfb      	adds	r3, r7, #3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	e00c      	b.n	80010ae <sum_payload+0x42>
		sum += payload[i];
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	18d3      	adds	r3, r2, r3
 800109a:	7819      	ldrb	r1, [r3, #0]
 800109c:	220f      	movs	r2, #15
 800109e:	18bb      	adds	r3, r7, r2
 80010a0:	18ba      	adds	r2, r7, r2
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	188a      	adds	r2, r1, r2
 80010a6:	701a      	strb	r2, [r3, #0]
	for(int i=start; i<=end ;i++){
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	3301      	adds	r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	1cbb      	adds	r3, r7, #2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dded      	ble.n	8001094 <sum_payload+0x28>
	}
	sum = sum & 0xff;
 80010b8:	210f      	movs	r1, #15
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	187a      	adds	r2, r7, r1
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	701a      	strb	r2, [r3, #0]

	return sum;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	781b      	ldrb	r3, [r3, #0]
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b004      	add	sp, #16
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <Write_FW_to_flash>:
#include <stdio.h>
#include "stm32g0xx_hal.h"
#include "flash_manager.h"

uint32_t StartPageAddress = FLASH_APP_ADDR;
void Write_FW_to_flash(uint64_t *data_to_flash, uint16_t num_bytes){
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	000a      	movs	r2, r1
 80010da:	1cbb      	adds	r3, r7, #2
 80010dc:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret;

	ret = HAL_FLASH_Unlock();
 80010de:	250e      	movs	r5, #14
 80010e0:	197c      	adds	r4, r7, r5
 80010e2:	f001 f989 	bl	80023f8 <HAL_FLASH_Unlock>
 80010e6:	0003      	movs	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK){
 80010ea:	197b      	adds	r3, r7, r5
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <Write_FW_to_flash+0x2a>
		printf("ERROR Unlock!");
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <Write_FW_to_flash+0xa0>)
 80010f4:	0018      	movs	r0, r3
 80010f6:	f005 fc7f 	bl	80069f8 <iprintf>
	}
	HAL_FLASH_OB_Unlock();
 80010fa:	f001 f9bd 	bl	8002478 <HAL_FLASH_OB_Unlock>

	uint8_t sofar = 0;
 80010fe:	230f      	movs	r3, #15
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
	uint8_t num_dwords = num_bytes;
 8001106:	230d      	movs	r3, #13
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	1cba      	adds	r2, r7, #2
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	701a      	strb	r2, [r3, #0]
	while(sofar < num_dwords){
 8001110:	e01f      	b.n	8001152 <Write_FW_to_flash+0x82>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, data_to_flash[sofar]) == HAL_OK){
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <Write_FW_to_flash+0xa4>)
 8001114:	6819      	ldr	r1, [r3, #0]
 8001116:	240f      	movs	r4, #15
 8001118:	193b      	adds	r3, r7, r4
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	18d3      	adds	r3, r2, r3
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2001      	movs	r0, #1
 8001128:	f001 f918 	bl	800235c <HAL_FLASH_Program>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d10b      	bne.n	8001148 <Write_FW_to_flash+0x78>
			StartPageAddress += 8; // doubleword
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <Write_FW_to_flash+0xa4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3308      	adds	r3, #8
 8001136:	001a      	movs	r2, r3
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <Write_FW_to_flash+0xa4>)
 800113a:	601a      	str	r2, [r3, #0]
			sofar++;
 800113c:	193b      	adds	r3, r7, r4
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	193b      	adds	r3, r7, r4
 8001142:	3201      	adds	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e004      	b.n	8001152 <Write_FW_to_flash+0x82>
		}else{
			printf("EROR!\n\r");
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <Write_FW_to_flash+0xa8>)
 800114a:	0018      	movs	r0, r3
 800114c:	f005 fc54 	bl	80069f8 <iprintf>
			return;
 8001150:	e00b      	b.n	800116a <Write_FW_to_flash+0x9a>
	while(sofar < num_dwords){
 8001152:	230f      	movs	r3, #15
 8001154:	18fa      	adds	r2, r7, r3
 8001156:	230d      	movs	r3, #13
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d3d7      	bcc.n	8001112 <Write_FW_to_flash+0x42>
		}
	}

	HAL_FLASH_OB_Lock();
 8001162:	f001 f9b1 	bl	80024c8 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8001166:	f001 f96b 	bl	8002440 <HAL_FLASH_Lock>
}
 800116a:	46bd      	mov	sp, r7
 800116c:	b004      	add	sp, #16
 800116e:	bdb0      	pop	{r4, r5, r7, pc}
 8001170:	0800766c 	.word	0x0800766c
 8001174:	2000000c 	.word	0x2000000c
 8001178:	0800767c 	.word	0x0800767c

0800117c <Erase_Application_Memory>:

void Erase_Application_Memory(void){
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint32_t PageError;

	//printf("before : %x \n\r", *(volatile uint16_t*)0x08040000);

	ret = HAL_FLASH_Unlock();
 8001182:	2517      	movs	r5, #23
 8001184:	197c      	adds	r4, r7, r5
 8001186:	f001 f937 	bl	80023f8 <HAL_FLASH_Unlock>
 800118a:	0003      	movs	r3, r0
 800118c:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK){
 800118e:	197b      	adds	r3, r7, r5
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <Erase_Application_Memory+0x22>
		printf("ERROR Unlock!");
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <Erase_Application_Memory+0x88>)
 8001198:	0018      	movs	r0, r3
 800119a:	f005 fc2d 	bl	80069f8 <iprintf>
	}
	HAL_FLASH_OB_Unlock();
 800119e:	f001 f96b 	bl	8002478 <HAL_FLASH_OB_Unlock>

	ret               = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
	*/

	/* Clear BANK_2 */
    pEraseInit.Banks     = FLASH_BANK_2;
 80011a2:	003b      	movs	r3, r7
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	0212      	lsls	r2, r2, #8
 80011a8:	605a      	str	r2, [r3, #4]
    pEraseInit.NbPages   = 128;
 80011aa:	003b      	movs	r3, r7
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	60da      	str	r2, [r3, #12]
    pEraseInit.Page      = 0;
 80011b0:	003b      	movs	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80011b6:	003b      	movs	r3, r7
 80011b8:	2202      	movs	r2, #2
 80011ba:	601a      	str	r2, [r3, #0]
    ret = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80011bc:	2517      	movs	r5, #23
 80011be:	197c      	adds	r4, r7, r5
 80011c0:	2310      	movs	r3, #16
 80011c2:	18fa      	adds	r2, r7, r3
 80011c4:	003b      	movs	r3, r7
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f001 fa09 	bl	80025e0 <HAL_FLASHEx_Erase>
 80011ce:	0003      	movs	r3, r0
 80011d0:	7023      	strb	r3, [r4, #0]

	if(ret != HAL_OK)
 80011d2:	197b      	adds	r3, r7, r5
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <Erase_Application_Memory+0x66>
		printf("NO\n\r");
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <Erase_Application_Memory+0x8c>)
 80011dc:	0018      	movs	r0, r3
 80011de:	f005 fc0b 	bl	80069f8 <iprintf>

	fflush(stdout);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <Erase_Application_Memory+0x90>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	0018      	movs	r0, r3
 80011ea:	f005 f9d3 	bl	8006594 <fflush>

	HAL_FLASH_OB_Lock();
 80011ee:	f001 f96b 	bl	80024c8 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80011f2:	f001 f925 	bl	8002440 <HAL_FLASH_Lock>


	//printf("after: %x \n\r", *(volatile uint16_t*)0x08040000);

	StartPageAddress = FLASH_APP_ADDR;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <Erase_Application_Memory+0x94>)
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <Erase_Application_Memory+0x98>)
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b006      	add	sp, #24
 8001202:	bdb0      	pop	{r4, r5, r7, pc}
 8001204:	0800766c 	.word	0x0800766c
 8001208:	08007684 	.word	0x08007684
 800120c:	20000050 	.word	0x20000050
 8001210:	2000000c 	.word	0x2000000c
 8001214:	08040000 	.word	0x08040000

08001218 <go2App>:
		HAL_FLASH_Lock();
	}

}

void go2App(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_TO_Application;

	//if(((*(uint32_t *) FLASH_APP_ADDR) & 0x2FFD8000) == 0x20000000){
		JumpAddress =  *(__IO uint32_t *) (FLASH_APP_ADDR + 4);
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <go2App+0x44>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60fb      	str	r3, [r7, #12]
		Jump_TO_Application = (pFunction) JumpAddress;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	60bb      	str	r3, [r7, #8]


		HAL_RCC_DeInit();
 8001228:	f001 fd54 	bl	8002cd4 <HAL_RCC_DeInit>
		HAL_DeInit();
 800122c:	f000 fe74 	bl	8001f18 <HAL_DeInit>

		SysTick->CTRL = 0;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <go2App+0x48>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <go2App+0x48>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <go2App+0x48>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]

		__set_MSP(*(uint32_t *)FLASH_APP_ADDR);
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <go2App+0x4c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f383 8808 	msr	MSP, r3
}
 800124e:	46c0      	nop			; (mov r8, r8)
		Jump_TO_Application();
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4798      	blx	r3

}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b004      	add	sp, #16
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08040004 	.word	0x08040004
 8001260:	e000e010 	.word	0xe000e010
 8001264:	08040000 	.word	0x08040000

08001268 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	2414      	movs	r4, #20
 8001270:	193b      	adds	r3, r7, r4
 8001272:	0018      	movs	r0, r3
 8001274:	2314      	movs	r3, #20
 8001276:	001a      	movs	r2, r3
 8001278:	2100      	movs	r1, #0
 800127a:	f005 fad3 	bl	8006824 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <MX_GPIO_Init+0x10c>)
 8001280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001282:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <MX_GPIO_Init+0x10c>)
 8001284:	2104      	movs	r1, #4
 8001286:	430a      	orrs	r2, r1
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
 800128a:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <MX_GPIO_Init+0x10c>)
 800128c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128e:	2204      	movs	r2, #4
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001296:	4b37      	ldr	r3, [pc, #220]	; (8001374 <MX_GPIO_Init+0x10c>)
 8001298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <MX_GPIO_Init+0x10c>)
 800129c:	2120      	movs	r1, #32
 800129e:	430a      	orrs	r2, r1
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
 80012a2:	4b34      	ldr	r3, [pc, #208]	; (8001374 <MX_GPIO_Init+0x10c>)
 80012a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a6:	2220      	movs	r2, #32
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b31      	ldr	r3, [pc, #196]	; (8001374 <MX_GPIO_Init+0x10c>)
 80012b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MX_GPIO_Init+0x10c>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ba:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <MX_GPIO_Init+0x10c>)
 80012bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012be:	2201      	movs	r2, #1
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_GPIO_Init+0x10c>)
 80012c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_GPIO_Init+0x10c>)
 80012cc:	2102      	movs	r1, #2
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_GPIO_Init+0x10c>)
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 80012de:	2381      	movs	r3, #129	; 0x81
 80012e0:	0059      	lsls	r1, r3, #1
 80012e2:	23a0      	movs	r3, #160	; 0xa0
 80012e4:	05db      	lsls	r3, r3, #23
 80012e6:	2200      	movs	r2, #0
 80012e8:	0018      	movs	r0, r3
 80012ea:	f001 fc8a 	bl	8002c02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	0192      	lsls	r2, r2, #6
 80012f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	2201      	movs	r2, #1
 8001300:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001302:	193b      	adds	r3, r7, r4
 8001304:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <MX_GPIO_Init+0x110>)
 8001306:	0019      	movs	r1, r3
 8001308:	0010      	movs	r0, r2
 800130a:	f001 fa19 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130e:	193b      	adds	r3, r7, r4
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001314:	193b      	adds	r3, r7, r4
 8001316:	2288      	movs	r2, #136	; 0x88
 8001318:	0352      	lsls	r2, r2, #13
 800131a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	193b      	adds	r3, r7, r4
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	193a      	adds	r2, r7, r4
 8001324:	23a0      	movs	r3, #160	; 0xa0
 8001326:	05db      	lsls	r3, r3, #23
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f001 fa08 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001330:	0021      	movs	r1, r4
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2281      	movs	r2, #129	; 0x81
 8001336:	0052      	lsls	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2201      	movs	r2, #1
 800133e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	187a      	adds	r2, r7, r1
 800134e:	23a0      	movs	r3, #160	; 0xa0
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	0011      	movs	r1, r2
 8001354:	0018      	movs	r0, r3
 8001356:	f001 f9f3 	bl	8002740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2005      	movs	r0, #5
 8001360:	f000 ff3c 	bl	80021dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001364:	2005      	movs	r0, #5
 8001366:	f000 ff4e 	bl	8002206 <HAL_NVIC_EnableIRQ>

}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b00b      	add	sp, #44	; 0x2c
 8001370:	bd90      	pop	{r4, r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	40021000 	.word	0x40021000
 8001378:	50000800 	.word	0x50000800

0800137c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001384:	2301      	movs	r3, #1
 8001386:	425b      	negs	r3, r3
 8001388:	1d39      	adds	r1, r7, #4
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <__io_putchar+0x20>)
 800138c:	2201      	movs	r2, #1
 800138e:	f003 f8cd 	bl	800452c <HAL_UART_Transmit>

	return ch;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	0018      	movs	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200007e8 	.word	0x200007e8

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a4:	f000 fd98 	bl	8001ed8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a8:	f000 f82e 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ac:	f7ff ff5c 	bl	8001268 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013b0:	f000 fcba 	bl	8001d28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Helo\n\r");
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <main+0x54>)
 80013b6:	0018      	movs	r0, r3
 80013b8:	f005 fb1e 	bl	80069f8 <iprintf>

  if( BlueNRG_Init() == HAL_OK ){
 80013bc:	f7ff fb0c 	bl	80009d8 <BlueNRG_Init>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d10e      	bne.n	80013e2 <main+0x42>
	  printf("BLE FW UPDATE Initialization Succesfull! \n\r");
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <main+0x58>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f005 fb16 	bl	80069f8 <iprintf>
  }else{
	  printf("BLE FW UPDATE Initialization FAILED! \n\r");
	  while(1);
  }

  fflush(stdout);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <main+0x5c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f005 f8de 	bl	8006594 <fflush>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("Device is now discoverable! \n\r");
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <main+0x60>)
 80013da:	0018      	movs	r0, r3
 80013dc:	f005 fb0c 	bl	80069f8 <iprintf>
 80013e0:	e004      	b.n	80013ec <main+0x4c>
	  printf("BLE FW UPDATE Initialization FAILED! \n\r");
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <main+0x64>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f005 fb07 	bl	80069f8 <iprintf>
	  while(1);
 80013ea:	e7fe      	b.n	80013ea <main+0x4a>

  while (1)
  {
	  BlueNRG_Process();
 80013ec:	f7ff fbb4 	bl	8000b58 <BlueNRG_Process>
 80013f0:	e7fc      	b.n	80013ec <main+0x4c>
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	0800768c 	.word	0x0800768c
 80013f8:	08007694 	.word	0x08007694
 80013fc:	20000050 	.word	0x20000050
 8001400:	080076e8 	.word	0x080076e8
 8001404:	080076c0 	.word	0x080076c0

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b095      	sub	sp, #84	; 0x54
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	2414      	movs	r4, #20
 8001410:	193b      	adds	r3, r7, r4
 8001412:	0018      	movs	r0, r3
 8001414:	233c      	movs	r3, #60	; 0x3c
 8001416:	001a      	movs	r2, r3
 8001418:	2100      	movs	r1, #0
 800141a:	f005 fa03 	bl	8006824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	0018      	movs	r0, r3
 8001422:	2310      	movs	r3, #16
 8001424:	001a      	movs	r2, r3
 8001426:	2100      	movs	r1, #0
 8001428:	f005 f9fc 	bl	8006824 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	0018      	movs	r0, r3
 8001432:	f001 fc03 	bl	8002c3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001436:	193b      	adds	r3, r7, r4
 8001438:	2202      	movs	r2, #2
 800143a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143c:	193b      	adds	r3, r7, r4
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	0052      	lsls	r2, r2, #1
 8001442:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001444:	0021      	movs	r1, r4
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2240      	movs	r2, #64	; 0x40
 8001450:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2202      	movs	r2, #2
 8001456:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2202      	movs	r2, #2
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2209      	movs	r2, #9
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2280      	movs	r2, #128	; 0x80
 800146e:	0292      	lsls	r2, r2, #10
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	0492      	lsls	r2, r2, #18
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800147a:	187b      	adds	r3, r7, r1
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	05d2      	lsls	r2, r2, #23
 8001480:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001482:	187b      	adds	r3, r7, r1
 8001484:	0018      	movs	r0, r3
 8001486:	f001 fca1 	bl	8002dcc <HAL_RCC_OscConfig>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800148e:	f000 f819 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2202      	movs	r2, #2
 800149c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2101      	movs	r1, #1
 80014ae:	0018      	movs	r0, r3
 80014b0:	f001 ffec 	bl	800348c <HAL_RCC_ClockConfig>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014b8:	f000 f804 	bl	80014c4 <Error_Handler>
  }
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b015      	add	sp, #84	; 0x54
 80014c2:	bd90      	pop	{r4, r7, pc}

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	e7fe      	b.n	80014cc <Error_Handler+0x8>
	...

080014d0 <add_FW_Update_Service>:
extern ConnectionStatus connection_status;
extern uint16_t count_pck;
extern uint16_t consd;
extern uint16_t total_pck;

tBleStatus add_FW_Update_Service(void){
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b094      	sub	sp, #80	; 0x50
 80014d4:	af06      	add	r7, sp, #24
	tBleStatus ret;
	Service_UUID_t chat_service_uuid;
	Char_UUID_t rx_char_uuid, tx_char_uuid;

	BLUENRG_memcpy(&chat_service_uuid.Service_UUID_128, CHAT_SERVICE_UUID, 16);
 80014d6:	2124      	movs	r1, #36	; 0x24
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	4a3b      	ldr	r2, [pc, #236]	; (80015c8 <add_FW_Update_Service+0xf8>)
 80014dc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80014de:	c331      	stmia	r3!, {r0, r4, r5}
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	601a      	str	r2, [r3, #0]

	BLUENRG_memcpy(rx_char_uuid.Char_UUID_128, RX_CHAR_UUID, 16);
 80014e4:	2314      	movs	r3, #20
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	4a38      	ldr	r2, [pc, #224]	; (80015cc <add_FW_Update_Service+0xfc>)
 80014ea:	ca31      	ldmia	r2!, {r0, r4, r5}
 80014ec:	c331      	stmia	r3!, {r0, r4, r5}
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	601a      	str	r2, [r3, #0]
	BLUENRG_memcpy(tx_char_uuid.Char_UUID_128, TX_CHAR_UUID, 16);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4a36      	ldr	r2, [pc, #216]	; (80015d0 <add_FW_Update_Service+0x100>)
 80014f6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80014f8:	c331      	stmia	r3!, {r0, r4, r5}
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	601a      	str	r2, [r3, #0]

	/* ---- Add FW update Service ---- */
	ret = aci_gatt_add_serv(UUID_TYPE_128, chat_service_uuid.Service_UUID_128, PRIMARY_SERVICE, 7, &chat_service_handle);
 80014fe:	2537      	movs	r5, #55	; 0x37
 8001500:	197c      	adds	r4, r7, r5
 8001502:	1879      	adds	r1, r7, r1
 8001504:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <add_FW_Update_Service+0x104>)
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2307      	movs	r3, #7
 800150a:	2201      	movs	r2, #1
 800150c:	2002      	movs	r0, #2
 800150e:	f004 f890 	bl	8005632 <aci_gatt_add_serv>
 8001512:	0003      	movs	r3, r0
 8001514:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 8001516:	197b      	adds	r3, r7, r5
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <add_FW_Update_Service+0x5c>
		printf("Error in the creation of the service \n\r");
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <add_FW_Update_Service+0x108>)
 8001520:	0018      	movs	r0, r3
 8001522:	f005 fa69 	bl	80069f8 <iprintf>
		return ret;
 8001526:	197b      	adds	r3, r7, r5
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	e049      	b.n	80015c0 <add_FW_Update_Service+0xf0>
	}

	/* Add Characteristics */
	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, rx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,16, 1, &rx_char_handle);
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <add_FW_Update_Service+0x104>)
 800152e:	8818      	ldrh	r0, [r3, #0]
 8001530:	2537      	movs	r5, #55	; 0x37
 8001532:	197c      	adds	r4, r7, r5
 8001534:	2314      	movs	r3, #20
 8001536:	18fa      	adds	r2, r7, r3
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <add_FW_Update_Service+0x10c>)
 800153a:	9305      	str	r3, [sp, #20]
 800153c:	2301      	movs	r3, #1
 800153e:	9304      	str	r3, [sp, #16]
 8001540:	2310      	movs	r3, #16
 8001542:	9303      	str	r3, [sp, #12]
 8001544:	2301      	movs	r3, #1
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	2300      	movs	r3, #0
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	230c      	movs	r3, #12
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2314      	movs	r3, #20
 8001552:	2102      	movs	r1, #2
 8001554:	f004 f908 	bl	8005768 <aci_gatt_add_char>
 8001558:	0003      	movs	r3, r0
 800155a:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 800155c:	197b      	adds	r3, r7, r5
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <add_FW_Update_Service+0xa2>
		printf("Failed to add RX char to the service \n\r");
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <add_FW_Update_Service+0x110>)
 8001566:	0018      	movs	r0, r3
 8001568:	f005 fa46 	bl	80069f8 <iprintf>
		return ret;
 800156c:	197b      	adds	r3, r7, r5
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	e026      	b.n	80015c0 <add_FW_Update_Service+0xf0>
	}

	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, tx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0, 16, 1, &tx_char_handle);
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <add_FW_Update_Service+0x104>)
 8001574:	8818      	ldrh	r0, [r3, #0]
 8001576:	2537      	movs	r5, #55	; 0x37
 8001578:	197c      	adds	r4, r7, r5
 800157a:	1d3a      	adds	r2, r7, #4
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <add_FW_Update_Service+0x114>)
 800157e:	9305      	str	r3, [sp, #20]
 8001580:	2301      	movs	r3, #1
 8001582:	9304      	str	r3, [sp, #16]
 8001584:	2310      	movs	r3, #16
 8001586:	9303      	str	r3, [sp, #12]
 8001588:	2300      	movs	r3, #0
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2300      	movs	r3, #0
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2310      	movs	r3, #16
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2314      	movs	r3, #20
 8001596:	2102      	movs	r1, #2
 8001598:	f004 f8e6 	bl	8005768 <aci_gatt_add_char>
 800159c:	0003      	movs	r3, r0
 800159e:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 80015a0:	197b      	adds	r3, r7, r5
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <add_FW_Update_Service+0xe6>
		printf("Failed to add TX char to the service \n\r");
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <add_FW_Update_Service+0x118>)
 80015aa:	0018      	movs	r0, r3
 80015ac:	f005 fa24 	bl	80069f8 <iprintf>
		return ret;
 80015b0:	197b      	adds	r3, r7, r5
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	e004      	b.n	80015c0 <add_FW_Update_Service+0xf0>
	}

	// prepare memory for the new FW
	Erase_Application_Memory();
 80015b6:	f7ff fde1 	bl	800117c <Erase_Application_Memory>

	return ret;
 80015ba:	2337      	movs	r3, #55	; 0x37
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	781b      	ldrb	r3, [r3, #0]
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b00e      	add	sp, #56	; 0x38
 80015c6:	bdb0      	pop	{r4, r5, r7, pc}
 80015c8:	20000010 	.word	0x20000010
 80015cc:	20000020 	.word	0x20000020
 80015d0:	20000030 	.word	0x20000030
 80015d4:	2000076c 	.word	0x2000076c
 80015d8:	08007708 	.word	0x08007708
 80015dc:	2000076e 	.word	0x2000076e
 80015e0:	08007730 	.word	0x08007730
 80015e4:	20000770 	.word	0x20000770
 80015e8:	08007758 	.word	0x08007758

080015ec <Update_TX_Char>:

void Update_TX_Char(uint8_t *data_buffer, uint8_t num_bytes){
 80015ec:	b5b0      	push	{r4, r5, r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	000a      	movs	r2, r1
 80015f6:	1cfb      	adds	r3, r7, #3
 80015f8:	701a      	strb	r2, [r3, #0]
	tBleStatus ret;

	for(int i=0; i<num_bytes ; i++){
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e00c      	b.n	800161a <Update_TX_Char+0x2e>
		printf("%02x ", data_buffer[i]);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	18d3      	adds	r3, r2, r3
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	001a      	movs	r2, r3
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <Update_TX_Char+0x78>)
 800160c:	0011      	movs	r1, r2
 800160e:	0018      	movs	r0, r3
 8001610:	f005 f9f2 	bl	80069f8 <iprintf>
	for(int i=0; i<num_bytes ; i++){
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	1cfb      	adds	r3, r7, #3
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbed      	blt.n	8001600 <Update_TX_Char+0x14>
	}
	printf("\n\r");
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <Update_TX_Char+0x7c>)
 8001626:	0018      	movs	r0, r3
 8001628:	f005 f9e6 	bl	80069f8 <iprintf>

	ret = aci_gatt_update_char_value(chat_service_handle, tx_char_handle, 0, num_bytes, data_buffer);
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <Update_TX_Char+0x80>)
 800162e:	8818      	ldrh	r0, [r3, #0]
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <Update_TX_Char+0x84>)
 8001632:	8819      	ldrh	r1, [r3, #0]
 8001634:	250b      	movs	r5, #11
 8001636:	197c      	adds	r4, r7, r5
 8001638:	1cfb      	adds	r3, r7, #3
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	0013      	movs	r3, r2
 8001642:	2200      	movs	r2, #0
 8001644:	f004 f976 	bl	8005934 <aci_gatt_update_char_value>
 8001648:	0003      	movs	r3, r0
 800164a:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 800164c:	197b      	adds	r3, r7, r5
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <Update_TX_Char+0x70>
		printf("Error while updating tx_char value \n\r");
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <Update_TX_Char+0x88>)
 8001656:	0018      	movs	r0, r3
 8001658:	f005 f9ce 	bl	80069f8 <iprintf>
	}

}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b004      	add	sp, #16
 8001662:	bdb0      	pop	{r4, r5, r7, pc}
 8001664:	08007780 	.word	0x08007780
 8001668:	08007788 	.word	0x08007788
 800166c:	2000076c 	.word	0x2000076c
 8001670:	20000770 	.word	0x20000770
 8001674:	0800778c 	.word	0x0800778c

08001678 <GAP_ConnectionComplete_CB>:

void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle){
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	000a      	movs	r2, r1
 8001682:	1cbb      	adds	r3, r7, #2
 8001684:	801a      	strh	r2, [r3, #0]
	connected = TRUE;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <GAP_ConnectionComplete_CB+0x68>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
	connection_handle = handle;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <GAP_ConnectionComplete_CB+0x6c>)
 800168e:	1cba      	adds	r2, r7, #2
 8001690:	8812      	ldrh	r2, [r2, #0]
 8001692:	801a      	strh	r2, [r3, #0]
	connection_status = CONNECTED;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <GAP_ConnectionComplete_CB+0x70>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]

	printf("Connection Complete...\n\r");
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <GAP_ConnectionComplete_CB+0x74>)
 800169c:	0018      	movs	r0, r3
 800169e:	f005 f9ab 	bl	80069f8 <iprintf>

	for(int i=5; i>=0 ; i--){
 80016a2:	2305      	movs	r3, #5
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e00c      	b.n	80016c2 <GAP_ConnectionComplete_CB+0x4a>
		printf("%02X -", addr[i]);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	18d3      	adds	r3, r2, r3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	001a      	movs	r2, r3
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <GAP_ConnectionComplete_CB+0x78>)
 80016b4:	0011      	movs	r1, r2
 80016b6:	0018      	movs	r0, r3
 80016b8:	f005 f99e 	bl	80069f8 <iprintf>
	for(int i=5; i>=0 ; i--){
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3b01      	subs	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	daef      	bge.n	80016a8 <GAP_ConnectionComplete_CB+0x30>
	}
	printf("%02X\n\r",addr[0]);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	001a      	movs	r2, r3
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <GAP_ConnectionComplete_CB+0x7c>)
 80016d0:	0011      	movs	r1, r2
 80016d2:	0018      	movs	r0, r3
 80016d4:	f005 f990 	bl	80069f8 <iprintf>
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000774 	.word	0x20000774
 80016e4:	20000778 	.word	0x20000778
 80016e8:	20000267 	.word	0x20000267
 80016ec:	080077b4 	.word	0x080077b4
 80016f0:	080077d0 	.word	0x080077d0
 80016f4:	080077d8 	.word	0x080077d8

080016f8 <GAP_DisconnectionComplete_CB>:

void GAP_DisconnectionComplete_CB(void){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	connected = FALSE;
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <GAP_DisconnectionComplete_CB+0x8c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
	connection_status = IDLE;
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <GAP_DisconnectionComplete_CB+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
	printf("Disconnection Complete...\n\r");
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <GAP_DisconnectionComplete_CB+0x94>)
 800170a:	0018      	movs	r0, r3
 800170c:	f005 f974 	bl	80069f8 <iprintf>

	if(count_pck == total_pck && total_pck != 0){
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <GAP_DisconnectionComplete_CB+0x98>)
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <GAP_DisconnectionComplete_CB+0x9c>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d10a      	bne.n	8001732 <GAP_DisconnectionComplete_CB+0x3a>
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <GAP_DisconnectionComplete_CB+0x9c>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <GAP_DisconnectionComplete_CB+0x3a>
		printf("Jump to the new FW :\n\n\r");
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <GAP_DisconnectionComplete_CB+0xa0>)
 8001726:	0018      	movs	r0, r3
 8001728:	f005 f966 	bl	80069f8 <iprintf>
		go2App();
 800172c:	f7ff fd74 	bl	8001218 <go2App>
 8001730:	e01e      	b.n	8001770 <GAP_DisconnectionComplete_CB+0x78>
	}else{
		printf("Upload FW interrupted, received %d packets over %d\n\r", count_pck, total_pck);
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <GAP_DisconnectionComplete_CB+0x98>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	0019      	movs	r1, r3
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <GAP_DisconnectionComplete_CB+0x9c>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	001a      	movs	r2, r3
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <GAP_DisconnectionComplete_CB+0xa4>)
 8001740:	0018      	movs	r0, r3
 8001742:	f005 f959 	bl	80069f8 <iprintf>

		count_pck = 0;
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <GAP_DisconnectionComplete_CB+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	801a      	strh	r2, [r3, #0]
		consd = -1;
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <GAP_DisconnectionComplete_CB+0xa8>)
 800174e:	2201      	movs	r2, #1
 8001750:	4252      	negs	r2, r2
 8001752:	801a      	strh	r2, [r3, #0]

		printf("Erasing firmware saved in memory...");
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <GAP_DisconnectionComplete_CB+0xac>)
 8001756:	0018      	movs	r0, r3
 8001758:	f005 f94e 	bl	80069f8 <iprintf>
		Erase_Application_Memory();
 800175c:	f7ff fd0e 	bl	800117c <Erase_Application_Memory>
		printf("Done\n\r");
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <GAP_DisconnectionComplete_CB+0xb0>)
 8001762:	0018      	movs	r0, r3
 8001764:	f005 f948 	bl	80069f8 <iprintf>

		printf("Device discoverable again...\n\r");
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <GAP_DisconnectionComplete_CB+0xb4>)
 800176a:	0018      	movs	r0, r3
 800176c:	f005 f944 	bl	80069f8 <iprintf>
	}

	set_connectable = TRUE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <GAP_DisconnectionComplete_CB+0xb8>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
	notification_enabled = FALSE;
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <GAP_DisconnectionComplete_CB+0xbc>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	20000774 	.word	0x20000774
 8001788:	20000267 	.word	0x20000267
 800178c:	080077e0 	.word	0x080077e0
 8001790:	2000076a 	.word	0x2000076a
 8001794:	20000768 	.word	0x20000768
 8001798:	080077fc 	.word	0x080077fc
 800179c:	08007814 	.word	0x08007814
 80017a0:	20000006 	.word	0x20000006
 80017a4:	0800784c 	.word	0x0800784c
 80017a8:	08007870 	.word	0x08007870
 80017ac:	08007878 	.word	0x08007878
 80017b0:	20000040 	.word	0x20000040
 80017b4:	2000077a 	.word	0x2000077a

080017b8 <Attribute_Modified_CB>:

void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	603a      	str	r2, [r7, #0]
 80017c0:	1dbb      	adds	r3, r7, #6
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	1d7b      	adds	r3, r7, #5
 80017c8:	1c0a      	adds	r2, r1, #0
 80017ca:	701a      	strb	r2, [r3, #0]


	if(handle == rx_char_handle+1){
 80017cc:	1dbb      	adds	r3, r7, #6
 80017ce:	881a      	ldrh	r2, [r3, #0]
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <Attribute_Modified_CB+0x58>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d107      	bne.n	80017ea <Attribute_Modified_CB+0x32>
		data_handler(att_data, data_length);
 80017da:	1d7b      	adds	r3, r7, #5
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	0011      	movs	r1, r2
 80017e2:	0018      	movs	r0, r3
 80017e4:	f7ff f9f2 	bl	8000bcc <data_handler>
		if(att_data[0] == 0x01){
			notification_enabled = TRUE;
		}

	}
}
 80017e8:	e00d      	b.n	8001806 <Attribute_Modified_CB+0x4e>
	}else if(handle == tx_char_handle+2){
 80017ea:	1dbb      	adds	r3, r7, #6
 80017ec:	881a      	ldrh	r2, [r3, #0]
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <Attribute_Modified_CB+0x5c>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	3302      	adds	r3, #2
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d106      	bne.n	8001806 <Attribute_Modified_CB+0x4e>
		if(att_data[0] == 0x01){
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d102      	bne.n	8001806 <Attribute_Modified_CB+0x4e>
			notification_enabled = TRUE;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <Attribute_Modified_CB+0x60>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	2000076e 	.word	0x2000076e
 8001814:	20000770 	.word	0x20000770
 8001818:	2000077a 	.word	0x2000077a

0800181c <HCI_Event_CB>:
 * @note   Inside this function each event must be identified and correctly
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pData){
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	hci_uart_pckt *hci_pckt = (hci_uart_pckt *)pData;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	627b      	str	r3, [r7, #36]	; 0x24

	/* Process event packet */
	if(hci_pckt->type == HCI_EVENT_PKT){
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d163      	bne.n	80018f8 <HCI_Event_CB+0xdc>
		/* Get data from packet */
		hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	3301      	adds	r3, #1
 8001834:	623b      	str	r3, [r7, #32]

		switch(event_pckt->evt){
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d01f      	beq.n	800187e <HCI_Event_CB+0x62>
 800183e:	dc52      	bgt.n	80018e6 <HCI_Event_CB+0xca>
 8001840:	2b05      	cmp	r3, #5
 8001842:	d002      	beq.n	800184a <HCI_Event_CB+0x2e>
 8001844:	2b3e      	cmp	r3, #62	; 0x3e
 8001846:	d003      	beq.n	8001850 <HCI_Event_CB+0x34>
 8001848:	e04d      	b.n	80018e6 <HCI_Event_CB+0xca>
			case EVT_DISCONN_COMPLETE:
				GAP_DisconnectionComplete_CB();
 800184a:	f7ff ff55 	bl	80016f8 <GAP_DisconnectionComplete_CB>

				break;
 800184e:	e05d      	b.n	800190c <HCI_Event_CB+0xf0>

			case EVT_LE_META_EVENT:
				{
					evt_le_meta_event *evt = (evt_le_meta_event*)event_pckt->data;
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	3302      	adds	r3, #2
 8001854:	613b      	str	r3, [r7, #16]

					switch(evt->subevent){
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d155      	bne.n	800190a <HCI_Event_CB+0xee>


						case EVT_LE_CONN_COMPLETE:
						{
							evt_le_connection_complete *cc = (evt_le_connection_complete *)evt->data;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	3301      	adds	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
							GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1d58      	adds	r0, r3, #5
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	785a      	ldrb	r2, [r3, #1]
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	4313      	orrs	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	0019      	movs	r1, r3
 8001876:	f7ff feff 	bl	8001678 <GAP_ConnectionComplete_CB>
						}
							break;
 800187a:	46c0      	nop			; (mov r8, r8)
					}
				}

				break;
 800187c:	e045      	b.n	800190a <HCI_Event_CB+0xee>

			case EVT_VENDOR:
			{
				evt_blue_aci *blue_evt = (evt_blue_aci*)event_pckt->data;
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	3302      	adds	r3, #2
 8001882:	61fb      	str	r3, [r7, #28]

				switch(blue_evt->ecode){
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	785b      	ldrb	r3, [r3, #1]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	4313      	orrs	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <HCI_Event_CB+0xf8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d003      	beq.n	800189e <HCI_Event_CB+0x82>
 8001896:	4a20      	ldr	r2, [pc, #128]	; (8001918 <HCI_Event_CB+0xfc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d011      	beq.n	80018c0 <HCI_Event_CB+0xa4>
						break;
*/
				}
			}

				break;
 800189c:	e036      	b.n	800190c <HCI_Event_CB+0xf0>
						evt_gatt_attr_modified_IDB05A1 *evt =
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3302      	adds	r3, #2
 80018a2:	617b      	str	r3, [r7, #20]
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	789a      	ldrb	r2, [r3, #2]
 80018a8:	78db      	ldrb	r3, [r3, #3]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b298      	uxth	r0, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	7919      	ldrb	r1, [r3, #4]
								evt->att_data);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3307      	adds	r3, #7
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 80018b8:	001a      	movs	r2, r3
 80018ba:	f7ff ff7d 	bl	80017b8 <Attribute_Modified_CB>
						break;
 80018be:	e011      	b.n	80018e4 <HCI_Event_CB+0xc8>
						printf("NON DOVREBBE ENTRARE\n\r");
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HCI_Event_CB+0x100>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f005 f898 	bl	80069f8 <iprintf>
						evt_gatt_attr_notification *evt =
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	3302      	adds	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
						data_handler(evt->attr_value, evt->event_data_length - 2);
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	1d5a      	adds	r2, r3, #5
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	789b      	ldrb	r3, [r3, #2]
 80018d6:	3b02      	subs	r3, #2
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	0019      	movs	r1, r3
 80018dc:	0010      	movs	r0, r2
 80018de:	f7ff f975 	bl	8000bcc <data_handler>
						break;
 80018e2:	46c0      	nop			; (mov r8, r8)
				break;
 80018e4:	e012      	b.n	800190c <HCI_Event_CB+0xf0>


			default:
				printf("%d\n\r",event_pckt->evt);
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	001a      	movs	r2, r3
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HCI_Event_CB+0x104>)
 80018ee:	0011      	movs	r1, r2
 80018f0:	0018      	movs	r0, r3
 80018f2:	f005 f881 	bl	80069f8 <iprintf>
				break;
 80018f6:	e009      	b.n	800190c <HCI_Event_CB+0xf0>
		}

	}else{
		printf("pckt_type: %d", hci_pckt->type);
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	001a      	movs	r2, r3
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HCI_Event_CB+0x108>)
 8001900:	0011      	movs	r1, r2
 8001902:	0018      	movs	r0, r3
 8001904:	f005 f878 	bl	80069f8 <iprintf>
	}
}
 8001908:	e000      	b.n	800190c <HCI_Event_CB+0xf0>
				break;
 800190a:	46c0      	nop			; (mov r8, r8)
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b00a      	add	sp, #40	; 0x28
 8001912:	bd80      	pop	{r7, pc}
 8001914:	00000c01 	.word	0x00000c01
 8001918:	00000c0f 	.word	0x00000c0f
 800191c:	08007898 	.word	0x08007898
 8001920:	080078b0 	.word	0x080078b0
 8001924:	080078b8 	.word	0x080078b8

08001928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_MspInit+0x44>)
 8001930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_MspInit+0x44>)
 8001934:	2101      	movs	r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_MspInit+0x44>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2201      	movs	r2, #1
 8001940:	4013      	ands	r3, r2
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_MspInit+0x44>)
 8001948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_MspInit+0x44>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0549      	lsls	r1, r1, #21
 8001950:	430a      	orrs	r2, r1
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_MspInit+0x44>)
 8001956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	055b      	lsls	r3, r3, #21
 800195c:	4013      	ands	r3, r2
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b002      	add	sp, #8
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	40021000 	.word	0x40021000

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 fb36 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <EXTI0_1_IRQHandler+0x14>)
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 fc8e 	bl	80022c8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	2000015c 	.word	0x2000015c

080019b8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <BSP_SPI1_Init+0x54>)
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <BSP_SPI1_Init+0x58>)
 80019c6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <BSP_SPI1_Init+0x5c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	1c59      	adds	r1, r3, #1
 80019ce:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <BSP_SPI1_Init+0x5c>)
 80019d0:	6011      	str	r1, [r2, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <BSP_SPI1_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <BSP_SPI1_Init+0x54>)
 80019d8:	0018      	movs	r0, r3
 80019da:	f002 fbcf 	bl	800417c <HAL_SPI_GetState>
 80019de:	1e03      	subs	r3, r0, #0
 80019e0:	d10f      	bne.n	8001a02 <BSP_SPI1_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <BSP_SPI1_Init+0x54>)
 80019e4:	0018      	movs	r0, r3
 80019e6:	f000 f887 	bl	8001af8 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d108      	bne.n	8001a02 <BSP_SPI1_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <BSP_SPI1_Init+0x54>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 f838 	bl	8001a68 <MX_SPI1_Init>
 80019f8:	1e03      	subs	r3, r0, #0
 80019fa:	d002      	beq.n	8001a02 <BSP_SPI1_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80019fc:	2308      	movs	r3, #8
 80019fe:	425b      	negs	r3, r3
 8001a00:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001a02:	687b      	ldr	r3, [r7, #4]
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b002      	add	sp, #8
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000077c 	.word	0x2000077c
 8001a10:	40013000 	.word	0x40013000
 8001a14:	200007e0 	.word	0x200007e0

08001a18 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	1dbb      	adds	r3, r7, #6
 8001a24:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001a2a:	1dbb      	adds	r3, r7, #6
 8001a2c:	881c      	ldrh	r4, [r3, #0]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	4808      	ldr	r0, [pc, #32]	; (8001a54 <BSP_SPI1_SendRecv+0x3c>)
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	015b      	lsls	r3, r3, #5
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	0023      	movs	r3, r4
 8001a3c:	f002 f9cc 	bl	8003dd8 <HAL_SPI_TransmitReceive>
 8001a40:	1e03      	subs	r3, r0, #0
 8001a42:	d002      	beq.n	8001a4a <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001a44:	2306      	movs	r3, #6
 8001a46:	425b      	negs	r3, r3
 8001a48:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001a4a:	697b      	ldr	r3, [r7, #20]
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b007      	add	sp, #28
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	2000077c 	.word	0x2000077c

08001a58 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001a5c:	f000 fae4 	bl	8002028 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
}
 8001a62:	0018      	movs	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001a70:	240f      	movs	r4, #15
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI1;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <MX_SPI1_Init+0x8c>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2282      	movs	r2, #130	; 0x82
 8001a82:	0052      	lsls	r2, r2, #1
 8001a84:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	22e0      	movs	r2, #224	; 0xe0
 8001a90:	00d2      	lsls	r2, r2, #3
 8001a92:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2280      	movs	r2, #128	; 0x80
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2218      	movs	r2, #24
 8001aac:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2208      	movs	r2, #8
 8001ad0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f002 f8bf 	bl	8003c58 <HAL_SPI_Init>
 8001ada:	1e03      	subs	r3, r0, #0
 8001adc:	d002      	beq.n	8001ae4 <MX_SPI1_Init+0x7c>
  {
    ret = HAL_ERROR;
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b005      	add	sp, #20
 8001af0:	bd90      	pop	{r4, r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	40013000 	.word	0x40013000

08001af8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b08b      	sub	sp, #44	; 0x2c
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b00:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <SPI1_MspInit+0xe4>)
 8001b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <SPI1_MspInit+0xe4>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0149      	lsls	r1, r1, #5
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b0e:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <SPI1_MspInit+0xe4>)
 8001b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <SPI1_MspInit+0xe4>)
 8001b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b20:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <SPI1_MspInit+0xe4>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	430a      	orrs	r2, r1
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
 8001b28:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <SPI1_MspInit+0xe4>)
 8001b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <SPI1_MspInit+0xe4>)
 8001b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <SPI1_MspInit+0xe4>)
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <SPI1_MspInit+0xe4>)
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001b4c:	2414      	movs	r4, #20
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	2240      	movs	r2, #64	; 0x40
 8001b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	193b      	adds	r3, r7, r4
 8001b56:	2202      	movs	r2, #2
 8001b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001b6c:	193a      	adds	r2, r7, r4
 8001b6e:	23a0      	movs	r3, #160	; 0xa0
 8001b70:	05db      	lsls	r3, r3, #23
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 fde3 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001b7a:	193b      	adds	r3, r7, r4
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	193b      	adds	r3, r7, r4
 8001b82:	2202      	movs	r2, #2
 8001b84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	193b      	adds	r3, r7, r4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	193b      	adds	r3, r7, r4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001b92:	193b      	adds	r3, r7, r4
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001b98:	193a      	adds	r2, r7, r4
 8001b9a:	23a0      	movs	r3, #160	; 0xa0
 8001b9c:	05db      	lsls	r3, r3, #23
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 fdcd 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001ba6:	0021      	movs	r1, r4
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2208      	movs	r2, #8
 8001bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <SPI1_MspInit+0xe8>)
 8001bca:	0019      	movs	r1, r3
 8001bcc:	0010      	movs	r0, r2
 8001bce:	f000 fdb7 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b00b      	add	sp, #44	; 0x2c
 8001bd8:	bd90      	pop	{r4, r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	50000400 	.word	0x50000400

08001be4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e00a      	b.n	8001c0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bf6:	e000      	b.n	8001bfa <_read+0x16>
 8001bf8:	bf00      	nop
 8001bfa:	0001      	movs	r1, r0
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	b2ca      	uxtb	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dbf0      	blt.n	8001bf6 <_read+0x12>
	}

return len;
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b006      	add	sp, #24
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e009      	b.n	8001c44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60ba      	str	r2, [r7, #8]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff fb9f 	bl	800137c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dbf1      	blt.n	8001c30 <_write+0x12>
	}
	return len;
 8001c4c:	687b      	ldr	r3, [r7, #4]
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b006      	add	sp, #24
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_close>:

int _close(int file)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	425b      	negs	r3, r3
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	0192      	lsls	r2, r2, #6
 8001c7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b002      	add	sp, #8
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_isatty>:

int _isatty(int file)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b004      	add	sp, #16
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	18d3      	adds	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f004 fb86 	bl	80063f0 <__errno>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	425b      	negs	r3, r3
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	18d2      	adds	r2, r2, r3
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <_sbrk+0x64>)
 8001d00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b006      	add	sp, #24
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20024000 	.word	0x20024000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	200007e4 	.word	0x200007e4
 8001d18:	20000b98 	.word	0x20000b98

08001d1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d2e:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <MX_USART2_UART_Init+0x98>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d34:	22e1      	movs	r2, #225	; 0xe1
 8001d36:	0252      	lsls	r2, r2, #9
 8001d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d72:	0018      	movs	r0, r3
 8001d74:	f002 fb84 	bl	8004480 <HAL_UART_Init>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d7c:	f7ff fba2 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d82:	2100      	movs	r1, #0
 8001d84:	0018      	movs	r0, r3
 8001d86:	f003 f9c7 	bl	8005118 <HAL_UARTEx_SetTxFifoThreshold>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d8e:	f7ff fb99 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d94:	2100      	movs	r1, #0
 8001d96:	0018      	movs	r0, r3
 8001d98:	f003 f9fe 	bl	8005198 <HAL_UARTEx_SetRxFifoThreshold>
 8001d9c:	1e03      	subs	r3, r0, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001da0:	f7ff fb90 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f003 f97c 	bl	80050a4 <HAL_UARTEx_DisableFifoMode>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001db0:	f7ff fb88 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	200007e8 	.word	0x200007e8
 8001dc0:	40004400 	.word	0x40004400

08001dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b09d      	sub	sp, #116	; 0x74
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	235c      	movs	r3, #92	; 0x5c
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	2314      	movs	r3, #20
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	f004 fd24 	bl	8006824 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ddc:	2410      	movs	r4, #16
 8001dde:	193b      	adds	r3, r7, r4
 8001de0:	0018      	movs	r0, r3
 8001de2:	234c      	movs	r3, #76	; 0x4c
 8001de4:	001a      	movs	r2, r3
 8001de6:	2100      	movs	r1, #0
 8001de8:	f004 fd1c 	bl	8006824 <memset>
  if(uartHandle->Instance==USART2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <HAL_UART_MspInit+0xb8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d13e      	bne.n	8001e74 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001df6:	193b      	adds	r3, r7, r4
 8001df8:	2202      	movs	r2, #2
 8001dfa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dfc:	193b      	adds	r3, r7, r4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	0018      	movs	r0, r3
 8001e06:	f001 fceb 	bl	80037e0 <HAL_RCCEx_PeriphCLKConfig>
 8001e0a:	1e03      	subs	r3, r0, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e0e:	f7ff fb59 	bl	80014c4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_UART_MspInit+0xbc>)
 8001e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_UART_MspInit+0xbc>)
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	0289      	lsls	r1, r1, #10
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_UART_MspInit+0xbc>)
 8001e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	029b      	lsls	r3, r3, #10
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_UART_MspInit+0xbc>)
 8001e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_UART_MspInit+0xbc>)
 8001e34:	2101      	movs	r1, #1
 8001e36:	430a      	orrs	r2, r1
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_UART_MspInit+0xbc>)
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001e46:	215c      	movs	r1, #92	; 0x5c
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	2202      	movs	r2, #2
 8001e52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	2201      	movs	r2, #1
 8001e64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	187a      	adds	r2, r7, r1
 8001e68:	23a0      	movs	r3, #160	; 0xa0
 8001e6a:	05db      	lsls	r3, r3, #23
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 fc66 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b01d      	add	sp, #116	; 0x74
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40021000 	.word	0x40021000

08001e84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e88:	f7ff ff48 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e8c:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e8e:	490d      	ldr	r1, [pc, #52]	; (8001ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e90:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <LoopForever+0xe>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea4:	4c0a      	ldr	r4, [pc, #40]	; (8001ed0 <LoopForever+0x16>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eb2:	f004 fc87 	bl	80067c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001eb6:	f7ff fa73 	bl	80013a0 <main>

08001eba <LoopForever>:

LoopForever:
  b LoopForever
 8001eba:	e7fe      	b.n	8001eba <LoopForever>
  ldr   r0, =_estack
 8001ebc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001ec8:	080079f8 	.word	0x080079f8
  ldr r2, =_sbss
 8001ecc:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8001ed0:	20000b98 	.word	0x20000b98

08001ed4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_COMP_IRQHandler>
	...

08001ed8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_Init+0x3c>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_Init+0x3c>)
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	0049      	lsls	r1, r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f000 f83c 	bl	8001f70 <HAL_InitTick>
 8001ef8:	1e03      	subs	r3, r0, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e001      	b.n	8001f08 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001f04:	f7ff fd10 	bl	8001928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	781b      	ldrb	r3, [r3, #0]
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40022000 	.word	0x40022000

08001f18 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_DeInit+0x48>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4252      	negs	r2, r2
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_DeInit+0x48>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_DeInit+0x48>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4252      	negs	r2, r2
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_DeInit+0x48>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_DeInit+0x48>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_DeInit+0x48>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_DeInit+0x48>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4252      	negs	r2, r2
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_DeInit+0x48>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001f54:	f000 f806 	bl	8001f64 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_InitTick+0x88>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d02b      	beq.n	8001fe0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_InitTick+0x8c>)
 8001f8a:	681c      	ldr	r4, [r3, #0]
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_InitTick+0x88>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	0019      	movs	r1, r3
 8001f92:	23fa      	movs	r3, #250	; 0xfa
 8001f94:	0098      	lsls	r0, r3, #2
 8001f96:	f7fe f8c9 	bl	800012c <__udivsi3>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	0020      	movs	r0, r4
 8001fa0:	f7fe f8c4 	bl	800012c <__udivsi3>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 f93d 	bl	8002226 <HAL_SYSTICK_Config>
 8001fac:	1e03      	subs	r3, r0, #0
 8001fae:	d112      	bne.n	8001fd6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d80a      	bhi.n	8001fcc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	425b      	negs	r3, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 f90c 	bl	80021dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_InitTick+0x90>)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e00d      	b.n	8001fe8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001fcc:	230f      	movs	r3, #15
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	e008      	b.n	8001fe8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	e003      	b.n	8001fe8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001fe8:	230f      	movs	r3, #15
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	781b      	ldrb	r3, [r3, #0]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b005      	add	sp, #20
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	2000004c 	.word	0x2000004c
 8001ffc:	20000044 	.word	0x20000044
 8002000:	20000048 	.word	0x20000048

08002004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_IncTick+0x1c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	001a      	movs	r2, r3
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_IncTick+0x20>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	18d2      	adds	r2, r2, r3
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_IncTick+0x20>)
 8002016:	601a      	str	r2, [r3, #0]
}
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	2000004c 	.word	0x2000004c
 8002024:	2000087c 	.word	0x2000087c

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b02      	ldr	r3, [pc, #8]	; (8002038 <HAL_GetTick+0x10>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	2000087c 	.word	0x2000087c

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff fff0 	bl	8002028 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3301      	adds	r3, #1
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_Delay+0x44>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	001a      	movs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	189b      	adds	r3, r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	f7ff ffe0 	bl	8002028 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	2000004c 	.word	0x2000004c

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	0002      	movs	r2, r0
 800208c:	1dfb      	adds	r3, r7, #7
 800208e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002090:	1dfb      	adds	r3, r7, #7
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b7f      	cmp	r3, #127	; 0x7f
 8002096:	d809      	bhi.n	80020ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002098:	1dfb      	adds	r3, r7, #7
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	001a      	movs	r2, r3
 800209e:	231f      	movs	r3, #31
 80020a0:	401a      	ands	r2, r3
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <__NVIC_EnableIRQ+0x30>)
 80020a4:	2101      	movs	r1, #1
 80020a6:	4091      	lsls	r1, r2
 80020a8:	000a      	movs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	0002      	movs	r2, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b7f      	cmp	r3, #127	; 0x7f
 80020cc:	d828      	bhi.n	8002120 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ce:	4a2f      	ldr	r2, [pc, #188]	; (800218c <__NVIC_SetPriority+0xd4>)
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	33c0      	adds	r3, #192	; 0xc0
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	589b      	ldr	r3, [r3, r2]
 80020de:	1dfa      	adds	r2, r7, #7
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	0011      	movs	r1, r2
 80020e4:	2203      	movs	r2, #3
 80020e6:	400a      	ands	r2, r1
 80020e8:	00d2      	lsls	r2, r2, #3
 80020ea:	21ff      	movs	r1, #255	; 0xff
 80020ec:	4091      	lsls	r1, r2
 80020ee:	000a      	movs	r2, r1
 80020f0:	43d2      	mvns	r2, r2
 80020f2:	401a      	ands	r2, r3
 80020f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	019b      	lsls	r3, r3, #6
 80020fa:	22ff      	movs	r2, #255	; 0xff
 80020fc:	401a      	ands	r2, r3
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	0018      	movs	r0, r3
 8002104:	2303      	movs	r3, #3
 8002106:	4003      	ands	r3, r0
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800210c:	481f      	ldr	r0, [pc, #124]	; (800218c <__NVIC_SetPriority+0xd4>)
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b25b      	sxtb	r3, r3
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	430a      	orrs	r2, r1
 8002118:	33c0      	adds	r3, #192	; 0xc0
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800211e:	e031      	b.n	8002184 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <__NVIC_SetPriority+0xd8>)
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	0019      	movs	r1, r3
 8002128:	230f      	movs	r3, #15
 800212a:	400b      	ands	r3, r1
 800212c:	3b08      	subs	r3, #8
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3306      	adds	r3, #6
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	18d3      	adds	r3, r2, r3
 8002136:	3304      	adds	r3, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1dfa      	adds	r2, r7, #7
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	0011      	movs	r1, r2
 8002140:	2203      	movs	r2, #3
 8002142:	400a      	ands	r2, r1
 8002144:	00d2      	lsls	r2, r2, #3
 8002146:	21ff      	movs	r1, #255	; 0xff
 8002148:	4091      	lsls	r1, r2
 800214a:	000a      	movs	r2, r1
 800214c:	43d2      	mvns	r2, r2
 800214e:	401a      	ands	r2, r3
 8002150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	22ff      	movs	r2, #255	; 0xff
 8002158:	401a      	ands	r2, r3
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	0018      	movs	r0, r3
 8002160:	2303      	movs	r3, #3
 8002162:	4003      	ands	r3, r0
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002168:	4809      	ldr	r0, [pc, #36]	; (8002190 <__NVIC_SetPriority+0xd8>)
 800216a:	1dfb      	adds	r3, r7, #7
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	001c      	movs	r4, r3
 8002170:	230f      	movs	r3, #15
 8002172:	4023      	ands	r3, r4
 8002174:	3b08      	subs	r3, #8
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	430a      	orrs	r2, r1
 800217a:	3306      	adds	r3, #6
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	18c3      	adds	r3, r0, r3
 8002180:	3304      	adds	r3, #4
 8002182:	601a      	str	r2, [r3, #0]
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b003      	add	sp, #12
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	045b      	lsls	r3, r3, #17
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d301      	bcc.n	80021ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a8:	2301      	movs	r3, #1
 80021aa:	e010      	b.n	80021ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <SysTick_Config+0x44>)
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	3a01      	subs	r2, #1
 80021b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b4:	2301      	movs	r3, #1
 80021b6:	425b      	negs	r3, r3
 80021b8:	2103      	movs	r1, #3
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff ff7c 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <SysTick_Config+0x44>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <SysTick_Config+0x44>)
 80021c8:	2207      	movs	r2, #7
 80021ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	0018      	movs	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b002      	add	sp, #8
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	e000e010 	.word	0xe000e010

080021dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	210f      	movs	r1, #15
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	1c02      	adds	r2, r0, #0
 80021ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b25b      	sxtb	r3, r3
 80021f6:	0011      	movs	r1, r2
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7ff ff5d 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b004      	add	sp, #16
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	0002      	movs	r2, r0
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b25b      	sxtb	r3, r3
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff ff33 	bl	8002084 <__NVIC_EnableIRQ>
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b002      	add	sp, #8
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff ffaf 	bl	8002194 <SysTick_Config>
 8002236:	0003      	movs	r3, r0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	200b      	movs	r0, #11
 800224c:	183b      	adds	r3, r7, r0
 800224e:	1c0a      	adds	r2, r1, #0
 8002250:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2317      	movs	r3, #23
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800225a:	183b      	adds	r3, r7, r0
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d010      	beq.n	8002284 <HAL_EXTI_RegisterCallback+0x44>
 8002262:	dc13      	bgt.n	800228c <HAL_EXTI_RegisterCallback+0x4c>
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <HAL_EXTI_RegisterCallback+0x2e>
 8002268:	2b01      	cmp	r3, #1
 800226a:	d007      	beq.n	800227c <HAL_EXTI_RegisterCallback+0x3c>
 800226c:	e00e      	b.n	800228c <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	609a      	str	r2, [r3, #8]
      break;
 800227a:	e00c      	b.n	8002296 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	605a      	str	r2, [r3, #4]
      break;
 8002282:	e008      	b.n	8002296 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	609a      	str	r2, [r3, #8]
      break;
 800228a:	e004      	b.n	8002296 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 800228c:	2317      	movs	r3, #23
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
      break;
 8002294:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8002296:	2317      	movs	r3, #23
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	781b      	ldrb	r3, [r3, #0]
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b006      	add	sp, #24
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e003      	b.n	80022c0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80022be:	2300      	movs	r3, #0
  }
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	2201      	movs	r2, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	221f      	movs	r2, #31
 80022e2:	4013      	ands	r3, r2
 80022e4:	2201      	movs	r2, #1
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	015b      	lsls	r3, r3, #5
 80022f0:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_EXTI_IRQHandler+0x8c>)
 80022f2:	4694      	mov	ip, r2
 80022f4:	4463      	add	r3, ip
 80022f6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	015b      	lsls	r3, r3, #5
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <HAL_EXTI_IRQHandler+0x90>)
 8002322:	4694      	mov	ip, r2
 8002324:	4463      	add	r3, ip
 8002326:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4798      	blx	r3
    }
  }
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b006      	add	sp, #24
 8002352:	bd80      	pop	{r7, pc}
 8002354:	4002180c 	.word	0x4002180c
 8002358:	40021810 	.word	0x40021810

0800235c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800235c:	b5b0      	push	{r4, r5, r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	603a      	str	r2, [r7, #0]
 8002368:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_FLASH_Program+0x94>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_FLASH_Program+0x1a>
 8002372:	2302      	movs	r3, #2
 8002374:	e038      	b.n	80023e8 <HAL_FLASH_Program+0x8c>
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_FLASH_Program+0x94>)
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_FLASH_Program+0x94>)
 800237e:	2200      	movs	r2, #0
 8002380:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002382:	2517      	movs	r5, #23
 8002384:	197c      	adds	r4, r7, r5
 8002386:	23fa      	movs	r3, #250	; 0xfa
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f8ba 	bl	8002504 <FLASH_WaitForLastOperation>
 8002390:	0003      	movs	r3, r0
 8002392:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002394:	197b      	adds	r3, r7, r5
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11f      	bne.n	80023dc <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d106      	bne.n	80023b0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	0008      	movs	r0, r1
 80023aa:	f000 f8f9 	bl	80025a0 <FLASH_Program_DoubleWord>
 80023ae:	e005      	b.n	80023bc <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	0011      	movs	r1, r2
 80023b6:	0018      	movs	r0, r3
 80023b8:	f005 f84e 	bl	8007458 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023bc:	2317      	movs	r3, #23
 80023be:	18fc      	adds	r4, r7, r3
 80023c0:	23fa      	movs	r3, #250	; 0xfa
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f89d 	bl	8002504 <FLASH_WaitForLastOperation>
 80023ca:	0003      	movs	r3, r0
 80023cc:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_FLASH_Program+0x98>)
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43d9      	mvns	r1, r3
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_FLASH_Program+0x98>)
 80023d8:	400a      	ands	r2, r1
 80023da:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_FLASH_Program+0x94>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80023e2:	2317      	movs	r3, #23
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	781b      	ldrb	r3, [r3, #0]
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b006      	add	sp, #24
 80023ee:	bdb0      	pop	{r4, r5, r7, pc}
 80023f0:	20000880 	.word	0x20000880
 80023f4:	40022000 	.word	0x40022000

080023f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	1dfb      	adds	r3, r7, #7
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_FLASH_Unlock+0x3c>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da0c      	bge.n	8002426 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_FLASH_Unlock+0x3c>)
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_FLASH_Unlock+0x40>)
 8002410:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_FLASH_Unlock+0x3c>)
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_FLASH_Unlock+0x44>)
 8002416:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_FLASH_Unlock+0x3c>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	da02      	bge.n	8002426 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40022000 	.word	0x40022000
 8002438:	45670123 	.word	0x45670123
 800243c:	cdef89ab 	.word	0xcdef89ab

08002440 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_FLASH_Lock+0x34>)
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_FLASH_Lock+0x34>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0609      	lsls	r1, r1, #24
 8002456:	430a      	orrs	r2, r1
 8002458:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_FLASH_Lock+0x34>)
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	da02      	bge.n	8002468 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	781b      	ldrb	r3, [r3, #0]
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40022000 	.word	0x40022000

08002478 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_FLASH_OB_Unlock+0x44>)
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	05db      	lsls	r3, r3, #23
 800248c:	4013      	ands	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_FLASH_OB_Unlock+0x44>)
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_FLASH_OB_Unlock+0x48>)
 8002494:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_FLASH_OB_Unlock+0x44>)
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_FLASH_OB_Unlock+0x4c>)
 800249a:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <HAL_FLASH_OB_Unlock+0x44>)
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	05db      	lsls	r3, r3, #23
 80024a4:	4013      	ands	r3, r2
 80024a6:	d102      	bne.n	80024ae <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	781b      	ldrb	r3, [r3, #0]
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b002      	add	sp, #8
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	40022000 	.word	0x40022000
 80024c0:	08192a3b 	.word	0x08192a3b
 80024c4:	4c5d6e7f 	.word	0x4c5d6e7f

080024c8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_FLASH_OB_Lock+0x38>)
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_FLASH_OB_Lock+0x38>)
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	05c9      	lsls	r1, r1, #23
 80024de:	430a      	orrs	r2, r1
 80024e0:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_FLASH_OB_Lock+0x38>)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	05db      	lsls	r3, r3, #23
 80024ea:	4013      	ands	r3, r2
 80024ec:	d002      	beq.n	80024f4 <HAL_FLASH_OB_Lock+0x2c>
  {
    status = HAL_OK;
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	781b      	ldrb	r3, [r3, #0]
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40022000 	.word	0x40022000

08002504 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800250c:	f7ff fd8c 	bl	8002028 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	189b      	adds	r3, r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8002518:	23c0      	movs	r3, #192	; 0xc0
 800251a:	029b      	lsls	r3, r3, #10
 800251c:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800251e:	e007      	b.n	8002530 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8002520:	f7ff fd82 	bl	8002028 <HAL_GetTick>
 8002524:	0002      	movs	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4293      	cmp	r3, r2
 800252a:	d801      	bhi.n	8002530 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e02a      	b.n	8002586 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <FLASH_WaitForLastOperation+0x8c>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	4013      	ands	r3, r2
 8002538:	d1f2      	bne.n	8002520 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <FLASH_WaitForLastOperation+0x8c>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <FLASH_WaitForLastOperation+0x90>)
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <FLASH_WaitForLastOperation+0x8c>)
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <FLASH_WaitForLastOperation+0x94>)
 8002548:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <FLASH_WaitForLastOperation+0x98>)
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e015      	b.n	8002586 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800255a:	f7ff fd65 	bl	8002028 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	189b      	adds	r3, r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8002566:	e007      	b.n	8002578 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8002568:	f7ff fd5e 	bl	8002028 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4293      	cmp	r3, r2
 8002572:	d801      	bhi.n	8002578 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e006      	b.n	8002586 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <FLASH_WaitForLastOperation+0x8c>)
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	02db      	lsls	r3, r3, #11
 8002580:	4013      	ands	r3, r2
 8002582:	d1f1      	bne.n	8002568 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b004      	add	sp, #16
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	40022000 	.word	0x40022000
 8002594:	0000c3fa 	.word	0x0000c3fa
 8002598:	0008c3fb 	.word	0x0008c3fb
 800259c:	20000880 	.word	0x20000880

080025a0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	603a      	str	r2, [r7, #0]
 80025aa:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <FLASH_Program_DoubleWord+0x3c>)
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <FLASH_Program_DoubleWord+0x3c>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80025be:	f3bf 8f6f 	isb	sy
}
 80025c2:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	001c      	movs	r4, r3
 80025c8:	2300      	movs	r3, #0
 80025ca:	001d      	movs	r5, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3304      	adds	r3, #4
 80025d0:	0022      	movs	r2, r4
 80025d2:	601a      	str	r2, [r3, #0]
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b004      	add	sp, #16
 80025da:	bdb0      	pop	{r4, r5, r7, pc}
 80025dc:	40022000 	.word	0x40022000

080025e0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80025e0:	b5b0      	push	{r4, r5, r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025ea:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_FLASHEx_Erase+0xd8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_FLASHEx_Erase+0x16>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e05c      	b.n	80026b0 <HAL_FLASHEx_Erase+0xd0>
 80025f6:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_FLASHEx_Erase+0xd8>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025fc:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <HAL_FLASHEx_Erase+0xd8>)
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002602:	250f      	movs	r5, #15
 8002604:	197c      	adds	r4, r7, r5
 8002606:	23fa      	movs	r3, #250	; 0xfa
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	0018      	movs	r0, r3
 800260c:	f7ff ff7a 	bl	8002504 <FLASH_WaitForLastOperation>
 8002610:	0003      	movs	r3, r0
 8002612:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002614:	002c      	movs	r4, r5
 8002616:	193b      	adds	r3, r7, r4
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d142      	bne.n	80026a4 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d10d      	bne.n	8002642 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 f848 	bl	80026c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002630:	193c      	adds	r4, r7, r4
 8002632:	23fa      	movs	r3, #250	; 0xfa
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	0018      	movs	r0, r3
 8002638:	f7ff ff64 	bl	8002504 <FLASH_WaitForLastOperation>
 800263c:	0003      	movs	r3, r0
 800263e:	7023      	strb	r3, [r4, #0]
 8002640:	e030      	b.n	80026a4 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	4252      	negs	r2, r2
 8002648:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	e01a      	b.n	8002688 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f844 	bl	80026e8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002660:	250f      	movs	r5, #15
 8002662:	197c      	adds	r4, r7, r5
 8002664:	23fa      	movs	r3, #250	; 0xfa
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	0018      	movs	r0, r3
 800266a:	f7ff ff4b 	bl	8002504 <FLASH_WaitForLastOperation>
 800266e:	0003      	movs	r3, r0
 8002670:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8002672:	197b      	adds	r3, r7, r5
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	601a      	str	r2, [r3, #0]
          break;
 8002680:	e00a      	b.n	8002698 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3301      	adds	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	429a      	cmp	r2, r3
 8002696:	d3dc      	bcc.n	8002652 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_FLASHEx_Erase+0xdc>)
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_FLASHEx_Erase+0xdc>)
 800269e:	2102      	movs	r1, #2
 80026a0:	438a      	bics	r2, r1
 80026a2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_FLASHEx_Erase+0xd8>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80026aa:	230f      	movs	r3, #15
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	781b      	ldrb	r3, [r3, #0]
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b004      	add	sp, #16
 80026b6:	bdb0      	pop	{r4, r5, r7, pc}
 80026b8:	20000880 	.word	0x20000880
 80026bc:	40022000 	.word	0x40022000

080026c0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <FLASH_MassErase+0x24>)
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <FLASH_MassErase+0x24>)
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	0249      	lsls	r1, r1, #9
 80026d6:	430a      	orrs	r2, r1
 80026d8:	615a      	str	r2, [r3, #20]
}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b002      	add	sp, #8
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	40022000 	.word	0x40022000

080026e8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <FLASH_PageErase+0x48>)
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <FLASH_PageErase+0x4c>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d005      	beq.n	800270e <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	0192      	lsls	r2, r2, #6
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e003      	b.n	8002716 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <FLASH_PageErase+0x50>)
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	00da      	lsls	r2, r3, #3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	431a      	orrs	r2, r3
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <FLASH_PageErase+0x48>)
 8002720:	4906      	ldr	r1, [pc, #24]	; (800273c <FLASH_PageErase+0x54>)
 8002722:	430a      	orrs	r2, r1
 8002724:	615a      	str	r2, [r3, #20]
}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b004      	add	sp, #16
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	40022000 	.word	0x40022000
 8002734:	ffffe007 	.word	0xffffe007
 8002738:	ffffdfff 	.word	0xffffdfff
 800273c:	00010002 	.word	0x00010002

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274e:	e14d      	b.n	80029ec <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4091      	lsls	r1, r2
 800275a:	000a      	movs	r2, r1
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d100      	bne.n	8002768 <HAL_GPIO_Init+0x28>
 8002766:	e13e      	b.n	80029e6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2203      	movs	r2, #3
 800276e:	4013      	ands	r3, r2
 8002770:	2b01      	cmp	r3, #1
 8002772:	d005      	beq.n	8002780 <HAL_GPIO_Init+0x40>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2203      	movs	r2, #3
 800277a:	4013      	ands	r3, r2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d130      	bne.n	80027e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	409a      	lsls	r2, r3
 800278e:	0013      	movs	r3, r2
 8002790:	43da      	mvns	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	409a      	lsls	r2, r3
 80027a2:	0013      	movs	r3, r2
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b6:	2201      	movs	r2, #1
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	43da      	mvns	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	2201      	movs	r2, #1
 80027ce:	401a      	ands	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	409a      	lsls	r2, r3
 80027d4:	0013      	movs	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d017      	beq.n	800281e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	43da      	mvns	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2203      	movs	r2, #3
 8002824:	4013      	ands	r3, r2
 8002826:	2b02      	cmp	r3, #2
 8002828:	d123      	bne.n	8002872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	58d3      	ldr	r3, [r2, r3]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2207      	movs	r2, #7
 800283c:	4013      	ands	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	409a      	lsls	r2, r3
 8002844:	0013      	movs	r3, r2
 8002846:	43da      	mvns	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2107      	movs	r1, #7
 8002856:	400b      	ands	r3, r1
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	409a      	lsls	r2, r3
 800285c:	0013      	movs	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	6939      	ldr	r1, [r7, #16]
 8002870:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	409a      	lsls	r2, r3
 8002880:	0013      	movs	r3, r2
 8002882:	43da      	mvns	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2203      	movs	r2, #3
 8002890:	401a      	ands	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	409a      	lsls	r2, r3
 8002898:	0013      	movs	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	4013      	ands	r3, r2
 80028b0:	d100      	bne.n	80028b4 <HAL_GPIO_Init+0x174>
 80028b2:	e098      	b.n	80029e6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80028b4:	4a53      	ldr	r2, [pc, #332]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3318      	adds	r3, #24
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	589b      	ldr	r3, [r3, r2]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2203      	movs	r2, #3
 80028c6:	4013      	ands	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	220f      	movs	r2, #15
 80028cc:	409a      	lsls	r2, r3
 80028ce:	0013      	movs	r3, r2
 80028d0:	43da      	mvns	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	23a0      	movs	r3, #160	; 0xa0
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	429a      	cmp	r2, r3
 80028e0:	d019      	beq.n	8002916 <HAL_GPIO_Init+0x1d6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a48      	ldr	r2, [pc, #288]	; (8002a08 <HAL_GPIO_Init+0x2c8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d013      	beq.n	8002912 <HAL_GPIO_Init+0x1d2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a47      	ldr	r2, [pc, #284]	; (8002a0c <HAL_GPIO_Init+0x2cc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00d      	beq.n	800290e <HAL_GPIO_Init+0x1ce>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a46      	ldr	r2, [pc, #280]	; (8002a10 <HAL_GPIO_Init+0x2d0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d007      	beq.n	800290a <HAL_GPIO_Init+0x1ca>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <HAL_GPIO_Init+0x2d4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d101      	bne.n	8002906 <HAL_GPIO_Init+0x1c6>
 8002902:	2304      	movs	r3, #4
 8002904:	e008      	b.n	8002918 <HAL_GPIO_Init+0x1d8>
 8002906:	2305      	movs	r3, #5
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x1d8>
 800290a:	2303      	movs	r3, #3
 800290c:	e004      	b.n	8002918 <HAL_GPIO_Init+0x1d8>
 800290e:	2302      	movs	r3, #2
 8002910:	e002      	b.n	8002918 <HAL_GPIO_Init+0x1d8>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_GPIO_Init+0x1d8>
 8002916:	2300      	movs	r3, #0
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	2103      	movs	r1, #3
 800291c:	400a      	ands	r2, r1
 800291e:	00d2      	lsls	r2, r2, #3
 8002920:	4093      	lsls	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002928:	4936      	ldr	r1, [pc, #216]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3318      	adds	r3, #24
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002936:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43da      	mvns	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	035b      	lsls	r3, r3, #13
 800294e:	4013      	ands	r3, r2
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800295a:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43da      	mvns	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	039b      	lsls	r3, r3, #14
 8002978:	4013      	ands	r3, r2
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800298a:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 800298c:	2384      	movs	r3, #132	; 0x84
 800298e:	58d3      	ldr	r3, [r2, r3]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43da      	mvns	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	029b      	lsls	r3, r3, #10
 80029a4:	4013      	ands	r3, r2
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029b0:	4914      	ldr	r1, [pc, #80]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 80029b2:	2284      	movs	r2, #132	; 0x84
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80029b8:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	58d3      	ldr	r3, [r2, r3]
 80029be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	43da      	mvns	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	025b      	lsls	r3, r3, #9
 80029d2:	4013      	ands	r3, r2
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029de:	4909      	ldr	r1, [pc, #36]	; (8002a04 <HAL_GPIO_Init+0x2c4>)
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	40da      	lsrs	r2, r3
 80029f4:	1e13      	subs	r3, r2, #0
 80029f6:	d000      	beq.n	80029fa <HAL_GPIO_Init+0x2ba>
 80029f8:	e6aa      	b.n	8002750 <HAL_GPIO_Init+0x10>
  }
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b006      	add	sp, #24
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021800 	.word	0x40021800
 8002a08:	50000400 	.word	0x50000400
 8002a0c:	50000800 	.word	0x50000800
 8002a10:	50000c00 	.word	0x50000c00
 8002a14:	50001000 	.word	0x50001000

08002a18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a26:	e0ba      	b.n	8002b9e <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a28:	2201      	movs	r2, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d100      	bne.n	8002a3c <HAL_GPIO_DeInit+0x24>
 8002a3a:	e0ad      	b.n	8002b98 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8002a3c:	4a5d      	ldr	r2, [pc, #372]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3318      	adds	r3, #24
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	589b      	ldr	r3, [r3, r2]
 8002a48:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	4013      	ands	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	220f      	movs	r2, #15
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	23a0      	movs	r3, #160	; 0xa0
 8002a60:	05db      	lsls	r3, r3, #23
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d019      	beq.n	8002a9a <HAL_GPIO_DeInit+0x82>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a53      	ldr	r2, [pc, #332]	; (8002bb8 <HAL_GPIO_DeInit+0x1a0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_DeInit+0x7e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_GPIO_DeInit+0x1a4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00d      	beq.n	8002a92 <HAL_GPIO_DeInit+0x7a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a51      	ldr	r2, [pc, #324]	; (8002bc0 <HAL_GPIO_DeInit+0x1a8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_DeInit+0x76>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_GPIO_DeInit+0x1ac>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_GPIO_DeInit+0x72>
 8002a86:	2304      	movs	r3, #4
 8002a88:	e008      	b.n	8002a9c <HAL_GPIO_DeInit+0x84>
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_DeInit+0x84>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_DeInit+0x84>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_DeInit+0x84>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_DeInit+0x84>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	00d2      	lsls	r2, r2, #3
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d136      	bne.n	8002b1a <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002aac:	4a41      	ldr	r2, [pc, #260]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	58d3      	ldr	r3, [r2, r3]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	43d2      	mvns	r2, r2
 8002ab6:	493f      	ldr	r1, [pc, #252]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8002abe:	4a3d      	ldr	r2, [pc, #244]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002ac0:	2384      	movs	r3, #132	; 0x84
 8002ac2:	58d3      	ldr	r3, [r2, r3]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	43d2      	mvns	r2, r2
 8002ac8:	493a      	ldr	r1, [pc, #232]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	2284      	movs	r2, #132	; 0x84
 8002ace:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002ad0:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43d9      	mvns	r1, r3
 8002ad8:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002ada:	400a      	ands	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ade:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43d9      	mvns	r1, r3
 8002ae6:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2203      	movs	r2, #3
 8002af0:	4013      	ands	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	220f      	movs	r2, #15
 8002af6:	409a      	lsls	r2, r3
 8002af8:	0013      	movs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8002afc:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	3318      	adds	r3, #24
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	589a      	ldr	r2, [r3, r2]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43d9      	mvns	r1, r3
 8002b0c:	4829      	ldr	r0, [pc, #164]	; (8002bb4 <HAL_GPIO_DeInit+0x19c>)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	400a      	ands	r2, r1
 8002b14:	3318      	adds	r3, #24
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2103      	movs	r1, #3
 8002b24:	4099      	lsls	r1, r3
 8002b26:	000b      	movs	r3, r1
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	08da      	lsrs	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3208      	adds	r2, #8
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	58d3      	ldr	r3, [r2, r3]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	2107      	movs	r1, #7
 8002b3e:	400a      	ands	r2, r1
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	210f      	movs	r1, #15
 8002b44:	4091      	lsls	r1, r2
 8002b46:	000a      	movs	r2, r1
 8002b48:	43d1      	mvns	r1, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	08d2      	lsrs	r2, r2, #3
 8002b4e:	4019      	ands	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	0052      	lsls	r2, r2, #1
 8002b60:	2103      	movs	r1, #3
 8002b62:	4091      	lsls	r1, r2
 8002b64:	000a      	movs	r2, r1
 8002b66:	43d2      	mvns	r2, r2
 8002b68:	401a      	ands	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2101      	movs	r1, #1
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4091      	lsls	r1, r2
 8002b78:	000a      	movs	r2, r1
 8002b7a:	43d2      	mvns	r2, r2
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	0052      	lsls	r2, r2, #1
 8002b8a:	2103      	movs	r1, #3
 8002b8c:	4091      	lsls	r1, r2
 8002b8e:	000a      	movs	r2, r1
 8002b90:	43d2      	mvns	r2, r2
 8002b92:	401a      	ands	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	40da      	lsrs	r2, r3
 8002ba4:	1e13      	subs	r3, r2, #0
 8002ba6:	d000      	beq.n	8002baa <HAL_GPIO_DeInit+0x192>
 8002ba8:	e73e      	b.n	8002a28 <HAL_GPIO_DeInit+0x10>
  }
}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b006      	add	sp, #24
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021800 	.word	0x40021800
 8002bb8:	50000400 	.word	0x50000400
 8002bbc:	50000800 	.word	0x50000800
 8002bc0:	50000c00 	.word	0x50000c00
 8002bc4:	50001000 	.word	0x50001000

08002bc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	000a      	movs	r2, r1
 8002bd2:	1cbb      	adds	r3, r7, #2
 8002bd4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	1cba      	adds	r2, r7, #2
 8002bdc:	8812      	ldrh	r2, [r2, #0]
 8002bde:	4013      	ands	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002be2:	230f      	movs	r3, #15
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e003      	b.n	8002bf4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bec:	230f      	movs	r3, #15
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	0008      	movs	r0, r1
 8002c0c:	0011      	movs	r1, r2
 8002c0e:	1cbb      	adds	r3, r7, #2
 8002c10:	1c02      	adds	r2, r0, #0
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	1c7b      	adds	r3, r7, #1
 8002c16:	1c0a      	adds	r2, r1, #0
 8002c18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c1a:	1c7b      	adds	r3, r7, #1
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c22:	1cbb      	adds	r3, r7, #2
 8002c24:	881a      	ldrh	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c2a:	e003      	b.n	8002c34 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c2c:	1cbb      	adds	r3, r7, #2
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d11f      	bne.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	0013      	movs	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4912      	ldr	r1, [pc, #72]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7fd fa5c 	bl	800012c <__udivsi3>
 8002c74:	0003      	movs	r3, r0
 8002c76:	3301      	adds	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c7a:	e008      	b.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e001      	b.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e009      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	401a      	ands	r2, r3
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d0ed      	beq.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	fffff9ff 	.word	0xfffff9ff
 8002cb4:	20000044 	.word	0x20000044
 8002cb8:	000f4240 	.word	0x000f4240

08002cbc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	23e0      	movs	r3, #224	; 0xe0
 8002cc6:	01db      	lsls	r3, r3, #7
 8002cc8:	4013      	ands	r3, r2
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cda:	f7ff f9a5 	bl	8002028 <HAL_GetTick>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ce2:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0049      	lsls	r1, r1, #1
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7ff f999 	bl	8002028 <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e054      	b.n	8002dae <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d04:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8002d10:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	01d2      	lsls	r2, r2, #7
 8002d16:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d18:	f7ff f986 	bl	8002028 <HAL_GetTick>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 8002d20:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002d26:	e009      	b.n	8002d3c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7ff f97e 	bl	8002028 <HAL_GetTick>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <HAL_RCC_DeInit+0xe8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e038      	b.n	8002dae <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2238      	movs	r2, #56	; 0x38
 8002d42:	4013      	ands	r3, r2
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	0052      	lsls	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	0052      	lsls	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d56:	f7ff f967 	bl	8002028 <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7ff f962 	bl	8002028 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e01d      	b.n	8002dae <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	049b      	lsls	r3, r3, #18
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	0152      	lsls	r2, r2, #5
 8002d84:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_RCC_DeInit+0xe4>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	4252      	negs	r2, r2
 8002d92:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_RCC_DeInit+0xec>)
 8002d96:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HAL_RCC_DeInit+0xf0>)
 8002d98:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_DeInit+0xf4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7ff f8e6 	bl	8001f70 <HAL_InitTick>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
  }
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b002      	add	sp, #8
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	00001388 	.word	0x00001388
 8002dc0:	20000044 	.word	0x20000044
 8002dc4:	00f42400 	.word	0x00f42400
 8002dc8:	20000048 	.word	0x20000048

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f000 fb50 	bl	8003480 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2201      	movs	r2, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	d100      	bne.n	8002dec <HAL_RCC_OscConfig+0x20>
 8002dea:	e07c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dec:	4bc3      	ldr	r3, [pc, #780]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2238      	movs	r2, #56	; 0x38
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df6:	4bc1      	ldr	r3, [pc, #772]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d102      	bne.n	8002e0c <HAL_RCC_OscConfig+0x40>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d002      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d10b      	bne.n	8002e2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e12:	4bba      	ldr	r3, [pc, #744]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	029b      	lsls	r3, r3, #10
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d062      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x118>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d15e      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e32a      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	025b      	lsls	r3, r3, #9
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_OscConfig+0x7a>
 8002e36:	4bb1      	ldr	r3, [pc, #708]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4bb0      	ldr	r3, [pc, #704]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	0249      	lsls	r1, r1, #9
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e020      	b.n	8002e88 <HAL_RCC_OscConfig+0xbc>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	23a0      	movs	r3, #160	; 0xa0
 8002e4c:	02db      	lsls	r3, r3, #11
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d10e      	bne.n	8002e70 <HAL_RCC_OscConfig+0xa4>
 8002e52:	4baa      	ldr	r3, [pc, #680]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4ba9      	ldr	r3, [pc, #676]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	02c9      	lsls	r1, r1, #11
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	4ba6      	ldr	r3, [pc, #664]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4ba5      	ldr	r3, [pc, #660]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	0249      	lsls	r1, r1, #9
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0xbc>
 8002e70:	4ba2      	ldr	r3, [pc, #648]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4ba1      	ldr	r3, [pc, #644]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e76:	49a2      	ldr	r1, [pc, #648]	; (8003100 <HAL_RCC_OscConfig+0x334>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	4b9f      	ldr	r3, [pc, #636]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b9e      	ldr	r3, [pc, #632]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002e82:	49a0      	ldr	r1, [pc, #640]	; (8003104 <HAL_RCC_OscConfig+0x338>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d014      	beq.n	8002eba <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7ff f8ca 	bl	8002028 <HAL_GetTick>
 8002e94:	0003      	movs	r3, r0
 8002e96:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e9a:	f7ff f8c5 	bl	8002028 <HAL_GetTick>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e2e9      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eac:	4b93      	ldr	r3, [pc, #588]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	029b      	lsls	r3, r3, #10
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0xce>
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7ff f8b5 	bl	8002028 <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7ff f8b0 	bl	8002028 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e2d4      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ed6:	4b89      	ldr	r3, [pc, #548]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	029b      	lsls	r3, r3, #10
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xf8>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2202      	movs	r2, #2
 8002eec:	4013      	ands	r3, r2
 8002eee:	d100      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x126>
 8002ef0:	e099      	b.n	8003026 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef2:	4b82      	ldr	r3, [pc, #520]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2238      	movs	r2, #56	; 0x38
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002efc:	4b7f      	ldr	r3, [pc, #508]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2203      	movs	r2, #3
 8002f02:	4013      	ands	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d102      	bne.n	8002f12 <HAL_RCC_OscConfig+0x146>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d135      	bne.n	8002f84 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f18:	4b78      	ldr	r3, [pc, #480]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4013      	ands	r3, r2
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_OscConfig+0x164>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e2a7      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	4b72      	ldr	r3, [pc, #456]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a74      	ldr	r2, [pc, #464]	; (8003108 <HAL_RCC_OscConfig+0x33c>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	021a      	lsls	r2, r3, #8
 8002f40:	4b6e      	ldr	r3, [pc, #440]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d112      	bne.n	8002f72 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f4c:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a6e      	ldr	r2, [pc, #440]	; (800310c <HAL_RCC_OscConfig+0x340>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	4b68      	ldr	r3, [pc, #416]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002f60:	4b66      	ldr	r3, [pc, #408]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0adb      	lsrs	r3, r3, #11
 8002f66:	2207      	movs	r2, #7
 8002f68:	4013      	ands	r3, r2
 8002f6a:	4a69      	ldr	r2, [pc, #420]	; (8003110 <HAL_RCC_OscConfig+0x344>)
 8002f6c:	40da      	lsrs	r2, r3
 8002f6e:	4b69      	ldr	r3, [pc, #420]	; (8003114 <HAL_RCC_OscConfig+0x348>)
 8002f70:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f72:	4b69      	ldr	r3, [pc, #420]	; (8003118 <HAL_RCC_OscConfig+0x34c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7fe fffa 	bl	8001f70 <HAL_InitTick>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d051      	beq.n	8003024 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e27d      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d030      	beq.n	8002fee <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f8c:	4b5b      	ldr	r3, [pc, #364]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a5e      	ldr	r2, [pc, #376]	; (800310c <HAL_RCC_OscConfig+0x340>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	4b58      	ldr	r3, [pc, #352]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002fa0:	4b56      	ldr	r3, [pc, #344]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b55      	ldr	r3, [pc, #340]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002fa6:	2180      	movs	r1, #128	; 0x80
 8002fa8:	0049      	lsls	r1, r1, #1
 8002faa:	430a      	orrs	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7ff f83b 	bl	8002028 <HAL_GetTick>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7ff f836 	bl	8002028 <HAL_GetTick>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e25a      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b49      	ldr	r3, [pc, #292]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a4b      	ldr	r2, [pc, #300]	; (8003108 <HAL_RCC_OscConfig+0x33c>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	021a      	lsls	r2, r3, #8
 8002fe6:	4b45      	ldr	r3, [pc, #276]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	e01b      	b.n	8003026 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002fee:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b42      	ldr	r3, [pc, #264]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8002ff4:	4949      	ldr	r1, [pc, #292]	; (800311c <HAL_RCC_OscConfig+0x350>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7ff f815 	bl	8002028 <HAL_GetTick>
 8002ffe:	0003      	movs	r3, r0
 8003000:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003004:	f7ff f810 	bl	8002028 <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e234      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4013      	ands	r3, r2
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x238>
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003024:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2208      	movs	r2, #8
 800302c:	4013      	ands	r3, r2
 800302e:	d047      	beq.n	80030c0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003030:	4b32      	ldr	r3, [pc, #200]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2238      	movs	r2, #56	; 0x38
 8003036:	4013      	ands	r3, r2
 8003038:	2b18      	cmp	r3, #24
 800303a:	d10a      	bne.n	8003052 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800303c:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 800303e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003040:	2202      	movs	r2, #2
 8003042:	4013      	ands	r3, r2
 8003044:	d03c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x2f4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d138      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e216      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d019      	beq.n	800308e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800305a:	4b28      	ldr	r3, [pc, #160]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 800305c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8003060:	2101      	movs	r1, #1
 8003062:	430a      	orrs	r2, r1
 8003064:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fe ffdf 	bl	8002028 <HAL_GetTick>
 800306a:	0003      	movs	r3, r0
 800306c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7fe ffda 	bl	8002028 <HAL_GetTick>
 8003074:	0002      	movs	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1fe      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8003084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003086:	2202      	movs	r2, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d0f1      	beq.n	8003070 <HAL_RCC_OscConfig+0x2a4>
 800308c:	e018      	b.n	80030c0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8003090:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003092:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 8003094:	2101      	movs	r1, #1
 8003096:	438a      	bics	r2, r1
 8003098:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe ffc5 	bl	8002028 <HAL_GetTick>
 800309e:	0003      	movs	r3, r0
 80030a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a4:	f7fe ffc0 	bl	8002028 <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1e4      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	2202      	movs	r2, #2
 80030bc:	4013      	ands	r3, r2
 80030be:	d1f1      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2204      	movs	r2, #4
 80030c6:	4013      	ands	r3, r2
 80030c8:	d100      	bne.n	80030cc <HAL_RCC_OscConfig+0x300>
 80030ca:	e0c7      	b.n	800325c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030cc:	231f      	movs	r3, #31
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2238      	movs	r2, #56	; 0x38
 80030da:	4013      	ands	r3, r2
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d11f      	bne.n	8003120 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCC_OscConfig+0x330>)
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	2202      	movs	r2, #2
 80030e6:	4013      	ands	r3, r2
 80030e8:	d100      	bne.n	80030ec <HAL_RCC_OscConfig+0x320>
 80030ea:	e0b7      	b.n	800325c <HAL_RCC_OscConfig+0x490>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d000      	beq.n	80030f6 <HAL_RCC_OscConfig+0x32a>
 80030f4:	e0b2      	b.n	800325c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e1c2      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	40021000 	.word	0x40021000
 8003100:	fffeffff 	.word	0xfffeffff
 8003104:	fffbffff 	.word	0xfffbffff
 8003108:	ffff80ff 	.word	0xffff80ff
 800310c:	ffffc7ff 	.word	0xffffc7ff
 8003110:	00f42400 	.word	0x00f42400
 8003114:	20000044 	.word	0x20000044
 8003118:	20000048 	.word	0x20000048
 800311c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003120:	4bb5      	ldr	r3, [pc, #724]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	055b      	lsls	r3, r3, #21
 8003128:	4013      	ands	r3, r2
 800312a:	d101      	bne.n	8003130 <HAL_RCC_OscConfig+0x364>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x366>
 8003130:	2300      	movs	r3, #0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d011      	beq.n	800315a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	4bb0      	ldr	r3, [pc, #704]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800313a:	4baf      	ldr	r3, [pc, #700]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	0549      	lsls	r1, r1, #21
 8003140:	430a      	orrs	r2, r1
 8003142:	63da      	str	r2, [r3, #60]	; 0x3c
 8003144:	4bac      	ldr	r3, [pc, #688]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	055b      	lsls	r3, r3, #21
 800314c:	4013      	ands	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003152:	231f      	movs	r3, #31
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315a:	4ba8      	ldr	r3, [pc, #672]	; (80033fc <HAL_RCC_OscConfig+0x630>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4013      	ands	r3, r2
 8003164:	d11a      	bne.n	800319c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003166:	4ba5      	ldr	r3, [pc, #660]	; (80033fc <HAL_RCC_OscConfig+0x630>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4ba4      	ldr	r3, [pc, #656]	; (80033fc <HAL_RCC_OscConfig+0x630>)
 800316c:	2180      	movs	r1, #128	; 0x80
 800316e:	0049      	lsls	r1, r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003174:	f7fe ff58 	bl	8002028 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317e:	f7fe ff53 	bl	8002028 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e177      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003190:	4b9a      	ldr	r3, [pc, #616]	; (80033fc <HAL_RCC_OscConfig+0x630>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4013      	ands	r3, r2
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3e6>
 80031a4:	4b94      	ldr	r3, [pc, #592]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031a8:	4b93      	ldr	r3, [pc, #588]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031aa:	2101      	movs	r1, #1
 80031ac:	430a      	orrs	r2, r1
 80031ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x420>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x408>
 80031ba:	4b8f      	ldr	r3, [pc, #572]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031be:	4b8e      	ldr	r3, [pc, #568]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031c0:	2104      	movs	r1, #4
 80031c2:	430a      	orrs	r2, r1
 80031c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80031c6:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031ca:	4b8b      	ldr	r3, [pc, #556]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	430a      	orrs	r2, r1
 80031d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0x420>
 80031d4:	4b88      	ldr	r3, [pc, #544]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031d8:	4b87      	ldr	r3, [pc, #540]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031da:	2101      	movs	r1, #1
 80031dc:	438a      	bics	r2, r1
 80031de:	65da      	str	r2, [r3, #92]	; 0x5c
 80031e0:	4b85      	ldr	r3, [pc, #532]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031e4:	4b84      	ldr	r3, [pc, #528]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80031e6:	2104      	movs	r1, #4
 80031e8:	438a      	bics	r2, r1
 80031ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d014      	beq.n	800321e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe ff18 	bl	8002028 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fc:	e009      	b.n	8003212 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fe ff13 	bl	8002028 <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	4a7d      	ldr	r2, [pc, #500]	; (8003400 <HAL_RCC_OscConfig+0x634>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e136      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003212:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	2202      	movs	r2, #2
 8003218:	4013      	ands	r3, r2
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x432>
 800321c:	e013      	b.n	8003246 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fe ff03 	bl	8002028 <HAL_GetTick>
 8003222:	0003      	movs	r3, r0
 8003224:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003226:	e009      	b.n	800323c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fe fefe 	bl	8002028 <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	4a73      	ldr	r2, [pc, #460]	; (8003400 <HAL_RCC_OscConfig+0x634>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e121      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800323c:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	2202      	movs	r2, #2
 8003242:	4013      	ands	r3, r2
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003246:	231f      	movs	r3, #31
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b69      	ldr	r3, [pc, #420]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003254:	4b68      	ldr	r3, [pc, #416]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003256:	496b      	ldr	r1, [pc, #428]	; (8003404 <HAL_RCC_OscConfig+0x638>)
 8003258:	400a      	ands	r2, r1
 800325a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2220      	movs	r2, #32
 8003262:	4013      	ands	r3, r2
 8003264:	d039      	beq.n	80032da <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01b      	beq.n	80032a6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800326e:	4b62      	ldr	r3, [pc, #392]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b61      	ldr	r3, [pc, #388]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	03c9      	lsls	r1, r1, #15
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe fed4 	bl	8002028 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003286:	f7fe fecf 	bl	8002028 <HAL_GetTick>
 800328a:	0002      	movs	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0f3      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003298:	4b57      	ldr	r3, [pc, #348]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	4013      	ands	r3, r2
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x4ba>
 80032a4:	e019      	b.n	80032da <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032a6:	4b54      	ldr	r3, [pc, #336]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80032ac:	4956      	ldr	r1, [pc, #344]	; (8003408 <HAL_RCC_OscConfig+0x63c>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe feb9 	bl	8002028 <HAL_GetTick>
 80032b6:	0003      	movs	r3, r0
 80032b8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032bc:	f7fe feb4 	bl	8002028 <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0d8      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80032ce:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	4013      	ands	r3, r2
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d100      	bne.n	80032e4 <HAL_RCC_OscConfig+0x518>
 80032e2:	e0cc      	b.n	800347e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e4:	4b44      	ldr	r3, [pc, #272]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2238      	movs	r2, #56	; 0x38
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d100      	bne.n	80032f2 <HAL_RCC_OscConfig+0x526>
 80032f0:	e07b      	b.n	80033ea <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d156      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003300:	4942      	ldr	r1, [pc, #264]	; (800340c <HAL_RCC_OscConfig+0x640>)
 8003302:	400a      	ands	r2, r1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003306:	f7fe fe8f 	bl	8002028 <HAL_GetTick>
 800330a:	0003      	movs	r3, r0
 800330c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fe8a 	bl	8002028 <HAL_GetTick>
 8003314:	0002      	movs	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0ae      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003322:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	049b      	lsls	r3, r3, #18
 800332a:	4013      	ands	r3, r2
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332e:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	4a37      	ldr	r2, [pc, #220]	; (8003410 <HAL_RCC_OscConfig+0x644>)
 8003334:	4013      	ands	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	431a      	orrs	r2, r3
 800335c:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 800335e:	430a      	orrs	r2, r1
 8003360:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003362:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	0449      	lsls	r1, r1, #17
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003370:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	0549      	lsls	r1, r1, #21
 800337a:	430a      	orrs	r2, r1
 800337c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fe fe53 	bl	8002028 <HAL_GetTick>
 8003382:	0003      	movs	r3, r0
 8003384:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fe4e 	bl	8002028 <HAL_GetTick>
 800338c:	0002      	movs	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e072      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339a:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	049b      	lsls	r3, r3, #18
 80033a2:	4013      	ands	r3, r2
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x5bc>
 80033a6:	e06a      	b.n	800347e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80033ae:	4917      	ldr	r1, [pc, #92]	; (800340c <HAL_RCC_OscConfig+0x640>)
 80033b0:	400a      	ands	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe fe38 	bl	8002028 <HAL_GetTick>
 80033b8:	0003      	movs	r3, r0
 80033ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033be:	f7fe fe33 	bl	8002028 <HAL_GetTick>
 80033c2:	0002      	movs	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e057      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	049b      	lsls	r3, r3, #18
 80033d8:	4013      	ands	r3, r2
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 80033e2:	490c      	ldr	r1, [pc, #48]	; (8003414 <HAL_RCC_OscConfig+0x648>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	60da      	str	r2, [r3, #12]
 80033e8:	e049      	b.n	800347e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d112      	bne.n	8003418 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e044      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40007000 	.word	0x40007000
 8003400:	00001388 	.word	0x00001388
 8003404:	efffffff 	.word	0xefffffff
 8003408:	ffbfffff 	.word	0xffbfffff
 800340c:	feffffff 	.word	0xfeffffff
 8003410:	11c1808c 	.word	0x11c1808c
 8003414:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x6bc>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2203      	movs	r2, #3
 8003422:	401a      	ands	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	429a      	cmp	r2, r3
 800342a:	d126      	bne.n	800347a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2270      	movs	r2, #112	; 0x70
 8003430:	401a      	ands	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d11f      	bne.n	800347a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	23fe      	movs	r3, #254	; 0xfe
 800343e:	01db      	lsls	r3, r3, #7
 8003440:	401a      	ands	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d116      	bne.n	800347a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	23f8      	movs	r3, #248	; 0xf8
 8003450:	039b      	lsls	r3, r3, #14
 8003452:	401a      	ands	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d10e      	bne.n	800347a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	23e0      	movs	r3, #224	; 0xe0
 8003460:	051b      	lsls	r3, r3, #20
 8003462:	401a      	ands	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	0f5b      	lsrs	r3, r3, #29
 8003470:	075a      	lsls	r2, r3, #29
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b008      	add	sp, #32
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000

0800348c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0e9      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b76      	ldr	r3, [pc, #472]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2207      	movs	r2, #7
 80034a6:	4013      	ands	r3, r2
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d91e      	bls.n	80034ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2207      	movs	r2, #7
 80034b4:	4393      	bics	r3, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	4b70      	ldr	r3, [pc, #448]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034c0:	f7fe fdb2 	bl	8002028 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034c8:	e009      	b.n	80034de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ca:	f7fe fdad 	bl	8002028 <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	4a6a      	ldr	r2, [pc, #424]	; (8003680 <HAL_RCC_ClockConfig+0x1f4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0ca      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034de:	4b67      	ldr	r3, [pc, #412]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2207      	movs	r2, #7
 80034e4:	4013      	ands	r3, r2
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d015      	beq.n	8003522 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2204      	movs	r2, #4
 80034fc:	4013      	ands	r3, r2
 80034fe:	d006      	beq.n	800350e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003500:	4b60      	ldr	r3, [pc, #384]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 8003506:	21e0      	movs	r1, #224	; 0xe0
 8003508:	01c9      	lsls	r1, r1, #7
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350e:	4b5d      	ldr	r3, [pc, #372]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4a5d      	ldr	r2, [pc, #372]	; (8003688 <HAL_RCC_ClockConfig+0x1fc>)
 8003514:	4013      	ands	r3, r2
 8003516:	0019      	movs	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	4b59      	ldr	r3, [pc, #356]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2201      	movs	r2, #1
 8003528:	4013      	ands	r3, r2
 800352a:	d057      	beq.n	80035dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	029b      	lsls	r3, r3, #10
 800353c:	4013      	ands	r3, r2
 800353e:	d12b      	bne.n	8003598 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e097      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d107      	bne.n	800355c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354c:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	049b      	lsls	r3, r3, #18
 8003554:	4013      	ands	r3, r2
 8003556:	d11f      	bne.n	8003598 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e08b      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003564:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4013      	ands	r3, r2
 800356e:	d113      	bne.n	8003598 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e07f      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d106      	bne.n	800358a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800357c:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 800357e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d108      	bne.n	8003598 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e074      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	2202      	movs	r2, #2
 8003590:	4013      	ands	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e06d      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003598:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2207      	movs	r2, #7
 800359e:	4393      	bics	r3, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	4b37      	ldr	r3, [pc, #220]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fe fd3c 	bl	8002028 <HAL_GetTick>
 80035b0:	0003      	movs	r3, r0
 80035b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b4:	e009      	b.n	80035ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b6:	f7fe fd37 	bl	8002028 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <HAL_RCC_ClockConfig+0x1f4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e054      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b2e      	ldr	r3, [pc, #184]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2238      	movs	r2, #56	; 0x38
 80035d0:	401a      	ands	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1ec      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2207      	movs	r2, #7
 80035e2:	4013      	ands	r3, r2
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d21e      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2207      	movs	r2, #7
 80035f0:	4393      	bics	r3, r2
 80035f2:	0019      	movs	r1, r3
 80035f4:	4b21      	ldr	r3, [pc, #132]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035fc:	f7fe fd14 	bl	8002028 <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003604:	e009      	b.n	800361a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003606:	f7fe fd0f 	bl	8002028 <HAL_GetTick>
 800360a:	0002      	movs	r2, r0
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <HAL_RCC_ClockConfig+0x1f4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e02c      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800361a:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2207      	movs	r2, #7
 8003620:	4013      	ands	r3, r2
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d1ee      	bne.n	8003606 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2204      	movs	r2, #4
 800362e:	4013      	ands	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003632:	4b14      	ldr	r3, [pc, #80]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4a15      	ldr	r2, [pc, #84]	; (800368c <HAL_RCC_ClockConfig+0x200>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 8003642:	430a      	orrs	r2, r1
 8003644:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003646:	f000 f829 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800364a:	0001      	movs	r1, r0
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	220f      	movs	r2, #15
 8003654:	401a      	ands	r2, r3
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <HAL_RCC_ClockConfig+0x204>)
 8003658:	0092      	lsls	r2, r2, #2
 800365a:	58d3      	ldr	r3, [r2, r3]
 800365c:	221f      	movs	r2, #31
 800365e:	4013      	ands	r3, r2
 8003660:	000a      	movs	r2, r1
 8003662:	40da      	lsrs	r2, r3
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x208>)
 8003666:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_ClockConfig+0x20c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0018      	movs	r0, r3
 800366e:	f7fe fc7f 	bl	8001f70 <HAL_InitTick>
 8003672:	0003      	movs	r3, r0
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b004      	add	sp, #16
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40022000 	.word	0x40022000
 8003680:	00001388 	.word	0x00001388
 8003684:	40021000 	.word	0x40021000
 8003688:	fffff0ff 	.word	0xfffff0ff
 800368c:	ffff8fff 	.word	0xffff8fff
 8003690:	080078c8 	.word	0x080078c8
 8003694:	20000044 	.word	0x20000044
 8003698:	20000048 	.word	0x20000048

0800369c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036a2:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2238      	movs	r2, #56	; 0x38
 80036a8:	4013      	ands	r3, r2
 80036aa:	d10f      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0adb      	lsrs	r3, r3, #11
 80036b2:	2207      	movs	r2, #7
 80036b4:	4013      	ands	r3, r2
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	0013      	movs	r3, r2
 80036bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036be:	6839      	ldr	r1, [r7, #0]
 80036c0:	4835      	ldr	r0, [pc, #212]	; (8003798 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036c2:	f7fc fd33 	bl	800012c <__udivsi3>
 80036c6:	0003      	movs	r3, r0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	e05d      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036cc:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2238      	movs	r2, #56	; 0x38
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d102      	bne.n	80036de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036d8:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_RCC_GetSysClockFreq+0x100>)
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	e054      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2238      	movs	r2, #56	; 0x38
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d138      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2203      	movs	r2, #3
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036f4:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	2207      	movs	r2, #7
 80036fc:	4013      	ands	r3, r2
 80036fe:	3301      	adds	r3, #1
 8003700:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d10d      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	4824      	ldr	r0, [pc, #144]	; (800379c <HAL_RCC_GetSysClockFreq+0x100>)
 800370c:	f7fc fd0e 	bl	800012c <__udivsi3>
 8003710:	0003      	movs	r3, r0
 8003712:	0019      	movs	r1, r3
 8003714:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	227f      	movs	r2, #127	; 0x7f
 800371c:	4013      	ands	r3, r2
 800371e:	434b      	muls	r3, r1
 8003720:	617b      	str	r3, [r7, #20]
        break;
 8003722:	e00d      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	481c      	ldr	r0, [pc, #112]	; (8003798 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003728:	f7fc fd00 	bl	800012c <__udivsi3>
 800372c:	0003      	movs	r3, r0
 800372e:	0019      	movs	r1, r3
 8003730:	4b18      	ldr	r3, [pc, #96]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	227f      	movs	r2, #127	; 0x7f
 8003738:	4013      	ands	r3, r2
 800373a:	434b      	muls	r3, r1
 800373c:	617b      	str	r3, [r7, #20]
        break;
 800373e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	0f5b      	lsrs	r3, r3, #29
 8003746:	2207      	movs	r2, #7
 8003748:	4013      	ands	r3, r2
 800374a:	3301      	adds	r3, #1
 800374c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	6978      	ldr	r0, [r7, #20]
 8003752:	f7fc fceb 	bl	800012c <__udivsi3>
 8003756:	0003      	movs	r3, r0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e015      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2238      	movs	r2, #56	; 0x38
 8003762:	4013      	ands	r3, r2
 8003764:	2b20      	cmp	r3, #32
 8003766:	d103      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2238      	movs	r2, #56	; 0x38
 8003776:	4013      	ands	r3, r2
 8003778:	2b18      	cmp	r3, #24
 800377a:	d103      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800377c:	23fa      	movs	r3, #250	; 0xfa
 800377e:	01db      	lsls	r3, r3, #7
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e001      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003788:	693b      	ldr	r3, [r7, #16]
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b006      	add	sp, #24
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	40021000 	.word	0x40021000
 8003798:	00f42400 	.word	0x00f42400
 800379c:	007a1200 	.word	0x007a1200

080037a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b02      	ldr	r3, [pc, #8]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	20000044 	.word	0x20000044

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037b8:	f7ff fff2 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037bc:	0004      	movs	r4, r0
 80037be:	f7ff fa7d 	bl	8002cbc <LL_RCC_GetAPB1Prescaler>
 80037c2:	0003      	movs	r3, r0
 80037c4:	0b1a      	lsrs	r2, r3, #12
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037c8:	0092      	lsls	r2, r2, #2
 80037ca:	58d3      	ldr	r3, [r2, r3]
 80037cc:	221f      	movs	r2, #31
 80037ce:	4013      	ands	r3, r2
 80037d0:	40dc      	lsrs	r4, r3
 80037d2:	0023      	movs	r3, r4
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bdb0      	pop	{r4, r5, r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	08007908 	.word	0x08007908

080037e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80037e8:	2313      	movs	r3, #19
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037f0:	2312      	movs	r3, #18
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	029b      	lsls	r3, r3, #10
 8003800:	4013      	ands	r3, r2
 8003802:	d100      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003804:	e0ad      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2011      	movs	r0, #17
 8003808:	183b      	adds	r3, r7, r0
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	055b      	lsls	r3, r3, #21
 8003816:	4013      	ands	r3, r2
 8003818:	d110      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800381c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800381e:	4b43      	ldr	r3, [pc, #268]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003820:	2180      	movs	r1, #128	; 0x80
 8003822:	0549      	lsls	r1, r1, #21
 8003824:	430a      	orrs	r2, r1
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c
 8003828:	4b40      	ldr	r3, [pc, #256]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800382a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	055b      	lsls	r3, r3, #21
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003836:	183b      	adds	r3, r7, r0
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800383c:	4b3c      	ldr	r3, [pc, #240]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	0049      	lsls	r1, r1, #1
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800384a:	f7fe fbed 	bl	8002028 <HAL_GetTick>
 800384e:	0003      	movs	r3, r0
 8003850:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003852:	e00b      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fe fbe8 	bl	8002028 <HAL_GetTick>
 8003858:	0002      	movs	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d904      	bls.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003862:	2313      	movs	r3, #19
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2203      	movs	r2, #3
 8003868:	701a      	strb	r2, [r3, #0]
        break;
 800386a:	e005      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800386c:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4013      	ands	r3, r2
 8003876:	d0ed      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003878:	2313      	movs	r3, #19
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d15e      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003882:	4b2a      	ldr	r3, [pc, #168]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003884:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003886:	23c0      	movs	r3, #192	; 0xc0
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4013      	ands	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d019      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	429a      	cmp	r2, r3
 800389c:	d014      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	4a24      	ldr	r2, [pc, #144]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a8:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038ac:	4b1f      	ldr	r3, [pc, #124]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	0249      	lsls	r1, r1, #9
 80038b2:	430a      	orrs	r2, r1
 80038b4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038bc:	491e      	ldr	r1, [pc, #120]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80038be:	400a      	ands	r2, r1
 80038c0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2201      	movs	r2, #1
 80038cc:	4013      	ands	r3, r2
 80038ce:	d016      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe fbaa 	bl	8002028 <HAL_GetTick>
 80038d4:	0003      	movs	r3, r0
 80038d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d8:	e00c      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fe fba5 	bl	8002028 <HAL_GetTick>
 80038de:	0002      	movs	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d904      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80038ea:	2313      	movs	r3, #19
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	2203      	movs	r2, #3
 80038f0:	701a      	strb	r2, [r3, #0]
            break;
 80038f2:	e004      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f4:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	2202      	movs	r2, #2
 80038fa:	4013      	ands	r3, r2
 80038fc:	d0ed      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80038fe:	2313      	movs	r3, #19
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	4a09      	ldr	r2, [pc, #36]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800390e:	4013      	ands	r3, r2
 8003910:	0019      	movs	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003918:	430a      	orrs	r2, r1
 800391a:	65da      	str	r2, [r3, #92]	; 0x5c
 800391c:	e016      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800391e:	2312      	movs	r3, #18
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	2213      	movs	r2, #19
 8003924:	18ba      	adds	r2, r7, r2
 8003926:	7812      	ldrb	r2, [r2, #0]
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e00f      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800392c:	40021000 	.word	0x40021000
 8003930:	40007000 	.word	0x40007000
 8003934:	fffffcff 	.word	0xfffffcff
 8003938:	fffeffff 	.word	0xfffeffff
 800393c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003940:	2312      	movs	r3, #18
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	2213      	movs	r2, #19
 8003946:	18ba      	adds	r2, r7, r2
 8003948:	7812      	ldrb	r2, [r2, #0]
 800394a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800394c:	2311      	movs	r3, #17
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003956:	4bb6      	ldr	r3, [pc, #728]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395a:	4bb5      	ldr	r3, [pc, #724]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800395c:	49b5      	ldr	r1, [pc, #724]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800395e:	400a      	ands	r2, r1
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	4013      	ands	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800396c:	4bb0      	ldr	r3, [pc, #704]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	2203      	movs	r2, #3
 8003972:	4393      	bics	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4bad      	ldr	r3, [pc, #692]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800397c:	430a      	orrs	r2, r1
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2202      	movs	r2, #2
 8003986:	4013      	ands	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800398a:	4ba9      	ldr	r3, [pc, #676]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	220c      	movs	r2, #12
 8003990:	4393      	bics	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	4ba5      	ldr	r3, [pc, #660]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800399a:	430a      	orrs	r2, r1
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2204      	movs	r2, #4
 80039a4:	4013      	ands	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039a8:	4ba1      	ldr	r3, [pc, #644]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	2230      	movs	r2, #48	; 0x30
 80039ae:	4393      	bics	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	4b9e      	ldr	r3, [pc, #632]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039b8:	430a      	orrs	r2, r1
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2210      	movs	r2, #16
 80039c2:	4013      	ands	r3, r2
 80039c4:	d009      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039c6:	4b9a      	ldr	r3, [pc, #616]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ca:	4a9b      	ldr	r2, [pc, #620]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	0019      	movs	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	4b96      	ldr	r3, [pc, #600]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039d6:	430a      	orrs	r2, r1
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	015b      	lsls	r3, r3, #5
 80039e2:	4013      	ands	r3, r2
 80039e4:	d009      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80039e6:	4b92      	ldr	r3, [pc, #584]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	4a94      	ldr	r2, [pc, #592]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	0019      	movs	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	4b8e      	ldr	r3, [pc, #568]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039f6:	430a      	orrs	r2, r1
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4013      	ands	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a06:	4b8a      	ldr	r3, [pc, #552]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	4a8d      	ldr	r2, [pc, #564]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a14:	4b86      	ldr	r3, [pc, #536]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4013      	ands	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a26:	4b82      	ldr	r3, [pc, #520]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	4a86      	ldr	r2, [pc, #536]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	4b7e      	ldr	r3, [pc, #504]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a36:	430a      	orrs	r2, r1
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	4013      	ands	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a44:	4b7a      	ldr	r3, [pc, #488]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	4a7f      	ldr	r2, [pc, #508]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	4b77      	ldr	r3, [pc, #476]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2240      	movs	r2, #64	; 0x40
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a62:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	4a79      	ldr	r2, [pc, #484]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a72:	430a      	orrs	r2, r1
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	01db      	lsls	r3, r3, #7
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d015      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a82:	4b6b      	ldr	r3, [pc, #428]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	0899      	lsrs	r1, r3, #2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8e:	4b68      	ldr	r3, [pc, #416]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a90:	430a      	orrs	r2, r1
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	05db      	lsls	r3, r3, #23
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d106      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003aa0:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	4b62      	ldr	r3, [pc, #392]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	0249      	lsls	r1, r1, #9
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003aba:	4b5d      	ldr	r3, [pc, #372]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	2240      	movs	r2, #64	; 0x40
 8003ac0:	4393      	bics	r3, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac8:	4b59      	ldr	r3, [pc, #356]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aca:	430a      	orrs	r2, r1
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	039b      	lsls	r3, r3, #14
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d016      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ada:	4b55      	ldr	r3, [pc, #340]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ade:	4a5c      	ldr	r2, [pc, #368]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae8:	4b51      	ldr	r3, [pc, #324]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aea:	430a      	orrs	r2, r1
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	03db      	lsls	r3, r3, #15
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d106      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003afa:	4b4d      	ldr	r3, [pc, #308]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	4b4c      	ldr	r3, [pc, #304]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	0449      	lsls	r1, r1, #17
 8003b04:	430a      	orrs	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	03db      	lsls	r3, r3, #15
 8003b10:	4013      	ands	r3, r2
 8003b12:	d016      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b14:	4b46      	ldr	r3, [pc, #280]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	4a4e      	ldr	r2, [pc, #312]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b22:	4b43      	ldr	r3, [pc, #268]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b24:	430a      	orrs	r2, r1
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	045b      	lsls	r3, r3, #17
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d106      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b34:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	4b3d      	ldr	r3, [pc, #244]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b3a:	2180      	movs	r1, #128	; 0x80
 8003b3c:	0449      	lsls	r1, r1, #17
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d014      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003b4e:	4b38      	ldr	r3, [pc, #224]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	2203      	movs	r2, #3
 8003b54:	4393      	bics	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d106      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b6a:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	0249      	lsls	r1, r1, #9
 8003b74:	430a      	orrs	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	019b      	lsls	r3, r3, #6
 8003b80:	4013      	ands	r3, r2
 8003b82:	d014      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003b84:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	220c      	movs	r2, #12
 8003b8a:	4393      	bics	r3, r2
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b92:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b94:	430a      	orrs	r2, r1
 8003b96:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d106      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ba0:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	0249      	lsls	r1, r1, #9
 8003baa:	430a      	orrs	r2, r1
 8003bac:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	045b      	lsls	r3, r3, #17
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d016      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bba:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	019b      	lsls	r3, r3, #6
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	0449      	lsls	r1, r1, #17
 8003be4:	430a      	orrs	r2, r1
 8003be6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	049b      	lsls	r3, r3, #18
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d016      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c02:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c04:	430a      	orrs	r2, r1
 8003c06:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d106      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c1a:	2180      	movs	r1, #128	; 0x80
 8003c1c:	0449      	lsls	r1, r1, #17
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c22:	2312      	movs	r3, #18
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b006      	add	sp, #24
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	efffffff 	.word	0xefffffff
 8003c38:	fffff3ff 	.word	0xfffff3ff
 8003c3c:	fffffcff 	.word	0xfffffcff
 8003c40:	fff3ffff 	.word	0xfff3ffff
 8003c44:	ffcfffff 	.word	0xffcfffff
 8003c48:	ffffcfff 	.word	0xffffcfff
 8003c4c:	ffff3fff 	.word	0xffff3fff
 8003c50:	ffbfffff 	.word	0xffbfffff
 8003c54:	feffffff 	.word	0xfeffffff

08003c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0a8      	b.n	8003dbc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	2382      	movs	r3, #130	; 0x82
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d009      	beq.n	8003c92 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	61da      	str	r2, [r3, #28]
 8003c84:	e005      	b.n	8003c92 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	225d      	movs	r2, #93	; 0x5d
 8003c9c:	5c9b      	ldrb	r3, [r3, r2]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	225c      	movs	r2, #92	; 0x5c
 8003ca8:	2100      	movs	r1, #0
 8003caa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 f88a 	bl	8003dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	225d      	movs	r2, #93	; 0x5d
 8003cb8:	2102      	movs	r1, #2
 8003cba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	438a      	bics	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	23e0      	movs	r3, #224	; 0xe0
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d902      	bls.n	8003cde <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e002      	b.n	8003ce4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	015b      	lsls	r3, r3, #5
 8003ce2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	23f0      	movs	r3, #240	; 0xf0
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d008      	beq.n	8003d02 <HAL_SPI_Init+0xaa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	23e0      	movs	r3, #224	; 0xe0
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d002      	beq.n	8003d02 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	2382      	movs	r3, #130	; 0x82
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	2384      	movs	r3, #132	; 0x84
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	400b      	ands	r3, r1
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	400b      	ands	r3, r1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2101      	movs	r1, #1
 8003d28:	400b      	ands	r3, r1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6999      	ldr	r1, [r3, #24]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	400b      	ands	r3, r1
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2138      	movs	r1, #56	; 0x38
 8003d3e:	400b      	ands	r3, r1
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	400b      	ands	r3, r1
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	019b      	lsls	r3, r3, #6
 8003d56:	401a      	ands	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	2204      	movs	r2, #4
 8003d68:	401a      	ands	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	2110      	movs	r1, #16
 8003d70:	400b      	ands	r3, r1
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d78:	2108      	movs	r1, #8
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68d9      	ldr	r1, [r3, #12]
 8003d82:	23f0      	movs	r3, #240	; 0xf0
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	400b      	ands	r3, r1
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	0011      	movs	r1, r2
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	015b      	lsls	r3, r3, #5
 8003d92:	401a      	ands	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4907      	ldr	r1, [pc, #28]	; (8003dc4 <HAL_SPI_Init+0x16c>)
 8003da8:	400a      	ands	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	225d      	movs	r2, #93	; 0x5d
 8003db6:	2101      	movs	r1, #1
 8003db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b004      	add	sp, #16
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	fffff7ff 	.word	0xfffff7ff

08003dc8 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	001a      	movs	r2, r3
 8003de6:	1cbb      	adds	r3, r7, #2
 8003de8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dea:	2301      	movs	r3, #1
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dee:	2323      	movs	r3, #35	; 0x23
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	225c      	movs	r2, #92	; 0x5c
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x2c>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e1b5      	b.n	8004170 <HAL_SPI_TransmitReceive+0x398>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	225c      	movs	r2, #92	; 0x5c
 8003e08:	2101      	movs	r1, #1
 8003e0a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e0c:	f7fe f90c 	bl	8002028 <HAL_GetTick>
 8003e10:	0003      	movs	r3, r0
 8003e12:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e14:	201b      	movs	r0, #27
 8003e16:	183b      	adds	r3, r7, r0
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	215d      	movs	r1, #93	; 0x5d
 8003e1c:	5c52      	ldrb	r2, [r2, r1]
 8003e1e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e26:	2312      	movs	r3, #18
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	1cba      	adds	r2, r7, #2
 8003e2c:	8812      	ldrh	r2, [r2, #0]
 8003e2e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e30:	183b      	adds	r3, r7, r0
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d011      	beq.n	8003e5c <HAL_SPI_TransmitReceive+0x84>
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	2382      	movs	r3, #130	; 0x82
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d107      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x7a>
 8003e4a:	183b      	adds	r3, r7, r0
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d004      	beq.n	8003e5c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003e52:	2323      	movs	r3, #35	; 0x23
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	2202      	movs	r2, #2
 8003e58:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e5a:	e17e      	b.n	800415a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x98>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x98>
 8003e68:	1cbb      	adds	r3, r7, #2
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003e70:	2323      	movs	r3, #35	; 0x23
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e78:	e16f      	b.n	800415a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	225d      	movs	r2, #93	; 0x5d
 8003e7e:	5c9b      	ldrb	r3, [r3, r2]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d003      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	225d      	movs	r2, #93	; 0x5d
 8003e8a:	2105      	movs	r1, #5
 8003e8c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1cba      	adds	r2, r7, #2
 8003e9e:	2146      	movs	r1, #70	; 0x46
 8003ea0:	8812      	ldrh	r2, [r2, #0]
 8003ea2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1cba      	adds	r2, r7, #2
 8003ea8:	2144      	movs	r1, #68	; 0x44
 8003eaa:	8812      	ldrh	r2, [r2, #0]
 8003eac:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1cba      	adds	r2, r7, #2
 8003eb8:	8812      	ldrh	r2, [r2, #0]
 8003eba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1cba      	adds	r2, r7, #2
 8003ec0:	8812      	ldrh	r2, [r2, #0]
 8003ec2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	23e0      	movs	r3, #224	; 0xe0
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d908      	bls.n	8003eee <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	49a4      	ldr	r1, [pc, #656]	; (8004178 <HAL_SPI_TransmitReceive+0x3a0>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	e008      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2180      	movs	r1, #128	; 0x80
 8003efa:	0149      	lsls	r1, r1, #5
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2240      	movs	r2, #64	; 0x40
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d007      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2140      	movs	r1, #64	; 0x40
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	23e0      	movs	r3, #224	; 0xe0
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d800      	bhi.n	8003f2c <HAL_SPI_TransmitReceive+0x154>
 8003f2a:	e07f      	b.n	800402c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x168>
 8003f34:	2312      	movs	r3, #18
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d000      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x168>
 8003f3e:	e069      	b.n	8004014 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f64:	e056      	b.n	8004014 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d11b      	bne.n	8003fac <HAL_SPI_TransmitReceive+0x1d4>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_SPI_TransmitReceive+0x1d4>
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d113      	bne.n	8003fac <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	881a      	ldrh	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	1c9a      	adds	r2, r3, #2
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d11c      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x21c>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2246      	movs	r2, #70	; 0x46
 8003fbe:	5a9b      	ldrh	r3, [r3, r2]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	b292      	uxth	r2, r2
 8003fd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	1c9a      	adds	r2, r3, #2
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2246      	movs	r2, #70	; 0x46
 8003fe2:	5a9b      	ldrh	r3, [r3, r2]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b299      	uxth	r1, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2246      	movs	r2, #70	; 0x46
 8003fee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ff4:	f7fe f818 	bl	8002028 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004000:	429a      	cmp	r2, r3
 8004002:	d807      	bhi.n	8004014 <HAL_SPI_TransmitReceive+0x23c>
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	3301      	adds	r3, #1
 8004008:	d004      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800400a:	2323      	movs	r3, #35	; 0x23
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	2203      	movs	r2, #3
 8004010:	701a      	strb	r2, [r3, #0]
        goto error;
 8004012:	e0a2      	b.n	800415a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1a3      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x18e>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2246      	movs	r2, #70	; 0x46
 8004022:	5a9b      	ldrh	r3, [r3, r2]
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d19d      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x18e>
 800402a:	e085      	b.n	8004138 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x268>
 8004034:	2312      	movs	r3, #18
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d000      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x268>
 800403e:	e070      	b.n	8004122 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	7812      	ldrb	r2, [r2, #0]
 800404c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004066:	e05c      	b.n	8004122 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2202      	movs	r2, #2
 8004070:	4013      	ands	r3, r2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d11c      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x2d8>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0x2d8>
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	2b01      	cmp	r3, #1
 8004084:	d114      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	7812      	ldrb	r2, [r2, #0]
 8004092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2201      	movs	r2, #1
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d11e      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x324>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2246      	movs	r2, #70	; 0x46
 80040c2:	5a9b      	ldrh	r3, [r3, r2]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	001a      	movs	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	7812      	ldrb	r2, [r2, #0]
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2246      	movs	r2, #70	; 0x46
 80040ea:	5a9b      	ldrh	r3, [r3, r2]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b299      	uxth	r1, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2246      	movs	r2, #70	; 0x46
 80040f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f8:	2301      	movs	r3, #1
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040fc:	f7fd ff94 	bl	8002028 <HAL_GetTick>
 8004100:	0002      	movs	r2, r0
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004108:	429a      	cmp	r2, r3
 800410a:	d802      	bhi.n	8004112 <HAL_SPI_TransmitReceive+0x33a>
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	3301      	adds	r3, #1
 8004110:	d102      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x340>
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2b00      	cmp	r3, #0
 8004116:	d104      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004118:	2323      	movs	r3, #35	; 0x23
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	2203      	movs	r2, #3
 800411e:	701a      	strb	r2, [r3, #0]
        goto error;
 8004120:	e01b      	b.n	800415a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d19d      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x290>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2246      	movs	r2, #70	; 0x46
 8004130:	5a9b      	ldrh	r3, [r3, r2]
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d197      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	0018      	movs	r0, r3
 8004140:	f000 f958 	bl	80043f4 <SPI_EndRxTxTransaction>
 8004144:	1e03      	subs	r3, r0, #0
 8004146:	d007      	beq.n	8004158 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004148:	2323      	movs	r3, #35	; 0x23
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	661a      	str	r2, [r3, #96]	; 0x60
 8004156:	e000      	b.n	800415a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004158:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	225d      	movs	r2, #93	; 0x5d
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	225c      	movs	r2, #92	; 0x5c
 8004166:	2100      	movs	r1, #0
 8004168:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800416a:	2323      	movs	r3, #35	; 0x23
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	781b      	ldrb	r3, [r3, #0]
}
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	b00a      	add	sp, #40	; 0x28
 8004176:	bd80      	pop	{r7, pc}
 8004178:	ffffefff 	.word	0xffffefff

0800417c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	225d      	movs	r2, #93	; 0x5d
 8004188:	5c9b      	ldrb	r3, [r3, r2]
 800418a:	b2db      	uxtb	r3, r3
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}

08004194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	1dfb      	adds	r3, r7, #7
 80041a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041a4:	f7fd ff40 	bl	8002028 <HAL_GetTick>
 80041a8:	0002      	movs	r2, r0
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	18d3      	adds	r3, r2, r3
 80041b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041b4:	f7fd ff38 	bl	8002028 <HAL_GetTick>
 80041b8:	0003      	movs	r3, r0
 80041ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041bc:	4b3a      	ldr	r3, [pc, #232]	; (80042a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	015b      	lsls	r3, r3, #5
 80041c2:	0d1b      	lsrs	r3, r3, #20
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	4353      	muls	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ca:	e058      	b.n	800427e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	d055      	beq.n	800427e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041d2:	f7fd ff29 	bl	8002028 <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d902      	bls.n	80041e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d142      	bne.n	800426e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	21e0      	movs	r1, #224	; 0xe0
 80041f4:	438a      	bics	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	2382      	movs	r3, #130	; 0x82
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	429a      	cmp	r2, r3
 8004202:	d113      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	429a      	cmp	r2, r3
 800420e:	d005      	beq.n	800421c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	429a      	cmp	r2, r3
 800421a:	d107      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2140      	movs	r1, #64	; 0x40
 8004228:	438a      	bics	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	019b      	lsls	r3, r3, #6
 8004234:	429a      	cmp	r2, r3
 8004236:	d110      	bne.n	800425a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	491a      	ldr	r1, [pc, #104]	; (80042ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004244:	400a      	ands	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	0189      	lsls	r1, r1, #6
 8004256:	430a      	orrs	r2, r1
 8004258:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	225d      	movs	r2, #93	; 0x5d
 800425e:	2101      	movs	r1, #1
 8004260:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	225c      	movs	r2, #92	; 0x5c
 8004266:	2100      	movs	r1, #0
 8004268:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e017      	b.n	800429e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	3b01      	subs	r3, #1
 800427c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	425a      	negs	r2, r3
 800428e:	4153      	adcs	r3, r2
 8004290:	b2db      	uxtb	r3, r3
 8004292:	001a      	movs	r2, r3
 8004294:	1dfb      	adds	r3, r7, #7
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d197      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b008      	add	sp, #32
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	20000044 	.word	0x20000044
 80042ac:	ffffdfff 	.word	0xffffdfff

080042b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042be:	2317      	movs	r3, #23
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042c6:	f7fd feaf 	bl	8002028 <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	18d3      	adds	r3, r2, r3
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80042d6:	f7fd fea7 	bl	8002028 <HAL_GetTick>
 80042da:	0003      	movs	r3, r0
 80042dc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042e6:	4b41      	ldr	r3, [pc, #260]	; (80043ec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	0013      	movs	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	189b      	adds	r3, r3, r2
 80042f0:	00da      	lsls	r2, r3, #3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	0d1b      	lsrs	r3, r3, #20
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	4353      	muls	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80042fc:	e068      	b.n	80043d0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	23c0      	movs	r3, #192	; 0xc0
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	429a      	cmp	r2, r3
 8004306:	d10a      	bne.n	800431e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d107      	bne.n	800431e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	2117      	movs	r1, #23
 8004316:	187b      	adds	r3, r7, r1
 8004318:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800431a:	187b      	adds	r3, r7, r1
 800431c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	d055      	beq.n	80043d0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004324:	f7fd fe80 	bl	8002028 <HAL_GetTick>
 8004328:	0002      	movs	r2, r0
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	429a      	cmp	r2, r3
 8004332:	d902      	bls.n	800433a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	2b00      	cmp	r3, #0
 8004338:	d142      	bne.n	80043c0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	21e0      	movs	r1, #224	; 0xe0
 8004346:	438a      	bics	r2, r1
 8004348:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	2382      	movs	r3, #130	; 0x82
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	429a      	cmp	r2, r3
 8004354:	d113      	bne.n	800437e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	429a      	cmp	r2, r3
 8004360:	d005      	beq.n	800436e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	429a      	cmp	r2, r3
 800436c:	d107      	bne.n	800437e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2140      	movs	r1, #64	; 0x40
 800437a:	438a      	bics	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	429a      	cmp	r2, r3
 8004388:	d110      	bne.n	80043ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4916      	ldr	r1, [pc, #88]	; (80043f0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004396:	400a      	ands	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	0189      	lsls	r1, r1, #6
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	225d      	movs	r2, #93	; 0x5d
 80043b0:	2101      	movs	r1, #1
 80043b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	225c      	movs	r2, #92	; 0x5c
 80043b8:	2100      	movs	r1, #0
 80043ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e010      	b.n	80043e2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d18e      	bne.n	80042fe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b00a      	add	sp, #40	; 0x28
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	20000044 	.word	0x20000044
 80043f0:	ffffdfff 	.word	0xffffdfff

080043f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	23c0      	movs	r3, #192	; 0xc0
 8004404:	0159      	lsls	r1, r3, #5
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	0013      	movs	r3, r2
 800440e:	2200      	movs	r2, #0
 8004410:	f7ff ff4e 	bl	80042b0 <SPI_WaitFifoStateUntilTimeout>
 8004414:	1e03      	subs	r3, r0, #0
 8004416:	d007      	beq.n	8004428 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441c:	2220      	movs	r2, #32
 800441e:	431a      	orrs	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e027      	b.n	8004478 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	0013      	movs	r3, r2
 8004432:	2200      	movs	r2, #0
 8004434:	2180      	movs	r1, #128	; 0x80
 8004436:	f7ff fead 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 800443a:	1e03      	subs	r3, r0, #0
 800443c:	d007      	beq.n	800444e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004442:	2220      	movs	r2, #32
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e014      	b.n	8004478 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	23c0      	movs	r3, #192	; 0xc0
 8004452:	00d9      	lsls	r1, r3, #3
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	0013      	movs	r3, r2
 800445c:	2200      	movs	r2, #0
 800445e:	f7ff ff27 	bl	80042b0 <SPI_WaitFifoStateUntilTimeout>
 8004462:	1e03      	subs	r3, r0, #0
 8004464:	d007      	beq.n	8004476 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	2220      	movs	r2, #32
 800446c:	431a      	orrs	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e000      	b.n	8004478 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b004      	add	sp, #16
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e046      	b.n	8004520 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2288      	movs	r2, #136	; 0x88
 8004496:	589b      	ldr	r3, [r3, r2]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d107      	bne.n	80044ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2284      	movs	r2, #132	; 0x84
 80044a0:	2100      	movs	r1, #0
 80044a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7fd fc8c 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2288      	movs	r2, #136	; 0x88
 80044b0:	2124      	movs	r1, #36	; 0x24
 80044b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2101      	movs	r1, #1
 80044c0:	438a      	bics	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	0018      	movs	r0, r3
 80044c8:	f000 f8cc 	bl	8004664 <UART_SetConfig>
 80044cc:	0003      	movs	r3, r0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e024      	b.n	8004520 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 fc15 	bl	8004d10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	490d      	ldr	r1, [pc, #52]	; (8004528 <HAL_UART_Init+0xa8>)
 80044f2:	400a      	ands	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	212a      	movs	r1, #42	; 0x2a
 8004502:	438a      	bics	r2, r1
 8004504:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2101      	movs	r1, #1
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	0018      	movs	r0, r3
 800451a:	f000 fcad 	bl	8004e78 <UART_CheckIdleState>
 800451e:	0003      	movs	r3, r0
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	b002      	add	sp, #8
 8004526:	bd80      	pop	{r7, pc}
 8004528:	ffffb7ff 	.word	0xffffb7ff

0800452c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	1dbb      	adds	r3, r7, #6
 800453a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2288      	movs	r2, #136	; 0x88
 8004540:	589b      	ldr	r3, [r3, r2]
 8004542:	2b20      	cmp	r3, #32
 8004544:	d000      	beq.n	8004548 <HAL_UART_Transmit+0x1c>
 8004546:	e088      	b.n	800465a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_UART_Transmit+0x2a>
 800454e:	1dbb      	adds	r3, r7, #6
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e080      	b.n	800465c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	015b      	lsls	r3, r3, #5
 8004562:	429a      	cmp	r2, r3
 8004564:	d109      	bne.n	800457a <HAL_UART_Transmit+0x4e>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d105      	bne.n	800457a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2201      	movs	r2, #1
 8004572:	4013      	ands	r3, r2
 8004574:	d001      	beq.n	800457a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e070      	b.n	800465c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2290      	movs	r2, #144	; 0x90
 800457e:	2100      	movs	r1, #0
 8004580:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2288      	movs	r2, #136	; 0x88
 8004586:	2121      	movs	r1, #33	; 0x21
 8004588:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800458a:	f7fd fd4d 	bl	8002028 <HAL_GetTick>
 800458e:	0003      	movs	r3, r0
 8004590:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1dba      	adds	r2, r7, #6
 8004596:	2154      	movs	r1, #84	; 0x54
 8004598:	8812      	ldrh	r2, [r2, #0]
 800459a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1dba      	adds	r2, r7, #6
 80045a0:	2156      	movs	r1, #86	; 0x56
 80045a2:	8812      	ldrh	r2, [r2, #0]
 80045a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	2380      	movs	r3, #128	; 0x80
 80045ac:	015b      	lsls	r3, r3, #5
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d108      	bne.n	80045c4 <HAL_UART_Transmit+0x98>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e003      	b.n	80045cc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045cc:	e02c      	b.n	8004628 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	0013      	movs	r3, r2
 80045d8:	2200      	movs	r2, #0
 80045da:	2180      	movs	r1, #128	; 0x80
 80045dc:	f000 fc9a 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e039      	b.n	800465c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	001a      	movs	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	05d2      	lsls	r2, r2, #23
 80045fa:	0dd2      	lsrs	r2, r2, #23
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	3302      	adds	r3, #2
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	e007      	b.n	8004616 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	3301      	adds	r3, #1
 8004614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2256      	movs	r2, #86	; 0x56
 800461a:	5a9b      	ldrh	r3, [r3, r2]
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b299      	uxth	r1, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2256      	movs	r2, #86	; 0x56
 8004626:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2256      	movs	r2, #86	; 0x56
 800462c:	5a9b      	ldrh	r3, [r3, r2]
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1cc      	bne.n	80045ce <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	0013      	movs	r3, r2
 800463e:	2200      	movs	r2, #0
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	f000 fc67 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004646:	1e03      	subs	r3, r0, #0
 8004648:	d001      	beq.n	800464e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e006      	b.n	800465c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2288      	movs	r2, #136	; 0x88
 8004652:	2120      	movs	r1, #32
 8004654:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b008      	add	sp, #32
 8004662:	bd80      	pop	{r7, pc}

08004664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004664:	b5b0      	push	{r4, r5, r7, lr}
 8004666:	b090      	sub	sp, #64	; 0x40
 8004668:	af00      	add	r7, sp, #0
 800466a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800466c:	231a      	movs	r3, #26
 800466e:	2220      	movs	r2, #32
 8004670:	189b      	adds	r3, r3, r2
 8004672:	19db      	adds	r3, r3, r7
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	431a      	orrs	r2, r3
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	431a      	orrs	r2, r3
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4313      	orrs	r3, r2
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4ac1      	ldr	r2, [pc, #772]	; (800499c <UART_SetConfig+0x338>)
 8004698:	4013      	ands	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a2:	430b      	orrs	r3, r1
 80046a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4abc      	ldr	r2, [pc, #752]	; (80049a0 <UART_SetConfig+0x33c>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	0018      	movs	r0, r3
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	68d9      	ldr	r1, [r3, #12]
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	0003      	movs	r3, r0
 80046bc:	430b      	orrs	r3, r1
 80046be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4ab6      	ldr	r2, [pc, #728]	; (80049a4 <UART_SetConfig+0x340>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d009      	beq.n	80046e4 <UART_SetConfig+0x80>
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4ab4      	ldr	r2, [pc, #720]	; (80049a8 <UART_SetConfig+0x344>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046e0:	4313      	orrs	r3, r2
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	4ab0      	ldr	r2, [pc, #704]	; (80049ac <UART_SetConfig+0x348>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	0019      	movs	r1, r3
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f6:	430b      	orrs	r3, r1
 80046f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	220f      	movs	r2, #15
 8004702:	4393      	bics	r3, r2
 8004704:	0018      	movs	r0, r3
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	0003      	movs	r3, r0
 8004710:	430b      	orrs	r3, r1
 8004712:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4aa5      	ldr	r2, [pc, #660]	; (80049b0 <UART_SetConfig+0x34c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d131      	bne.n	8004782 <UART_SetConfig+0x11e>
 800471e:	4ba5      	ldr	r3, [pc, #660]	; (80049b4 <UART_SetConfig+0x350>)
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	2203      	movs	r2, #3
 8004724:	4013      	ands	r3, r2
 8004726:	2b03      	cmp	r3, #3
 8004728:	d01d      	beq.n	8004766 <UART_SetConfig+0x102>
 800472a:	d823      	bhi.n	8004774 <UART_SetConfig+0x110>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d00c      	beq.n	800474a <UART_SetConfig+0xe6>
 8004730:	d820      	bhi.n	8004774 <UART_SetConfig+0x110>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <UART_SetConfig+0xd8>
 8004736:	2b01      	cmp	r3, #1
 8004738:	d00e      	beq.n	8004758 <UART_SetConfig+0xf4>
 800473a:	e01b      	b.n	8004774 <UART_SetConfig+0x110>
 800473c:	231b      	movs	r3, #27
 800473e:	2220      	movs	r2, #32
 8004740:	189b      	adds	r3, r3, r2
 8004742:	19db      	adds	r3, r3, r7
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e154      	b.n	80049f4 <UART_SetConfig+0x390>
 800474a:	231b      	movs	r3, #27
 800474c:	2220      	movs	r2, #32
 800474e:	189b      	adds	r3, r3, r2
 8004750:	19db      	adds	r3, r3, r7
 8004752:	2202      	movs	r2, #2
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e14d      	b.n	80049f4 <UART_SetConfig+0x390>
 8004758:	231b      	movs	r3, #27
 800475a:	2220      	movs	r2, #32
 800475c:	189b      	adds	r3, r3, r2
 800475e:	19db      	adds	r3, r3, r7
 8004760:	2204      	movs	r2, #4
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e146      	b.n	80049f4 <UART_SetConfig+0x390>
 8004766:	231b      	movs	r3, #27
 8004768:	2220      	movs	r2, #32
 800476a:	189b      	adds	r3, r3, r2
 800476c:	19db      	adds	r3, r3, r7
 800476e:	2208      	movs	r2, #8
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e13f      	b.n	80049f4 <UART_SetConfig+0x390>
 8004774:	231b      	movs	r3, #27
 8004776:	2220      	movs	r2, #32
 8004778:	189b      	adds	r3, r3, r2
 800477a:	19db      	adds	r3, r3, r7
 800477c:	2210      	movs	r2, #16
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e138      	b.n	80049f4 <UART_SetConfig+0x390>
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a8c      	ldr	r2, [pc, #560]	; (80049b8 <UART_SetConfig+0x354>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d131      	bne.n	80047f0 <UART_SetConfig+0x18c>
 800478c:	4b89      	ldr	r3, [pc, #548]	; (80049b4 <UART_SetConfig+0x350>)
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	220c      	movs	r2, #12
 8004792:	4013      	ands	r3, r2
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d01d      	beq.n	80047d4 <UART_SetConfig+0x170>
 8004798:	d823      	bhi.n	80047e2 <UART_SetConfig+0x17e>
 800479a:	2b08      	cmp	r3, #8
 800479c:	d00c      	beq.n	80047b8 <UART_SetConfig+0x154>
 800479e:	d820      	bhi.n	80047e2 <UART_SetConfig+0x17e>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <UART_SetConfig+0x146>
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d00e      	beq.n	80047c6 <UART_SetConfig+0x162>
 80047a8:	e01b      	b.n	80047e2 <UART_SetConfig+0x17e>
 80047aa:	231b      	movs	r3, #27
 80047ac:	2220      	movs	r2, #32
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	19db      	adds	r3, r3, r7
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e11d      	b.n	80049f4 <UART_SetConfig+0x390>
 80047b8:	231b      	movs	r3, #27
 80047ba:	2220      	movs	r2, #32
 80047bc:	189b      	adds	r3, r3, r2
 80047be:	19db      	adds	r3, r3, r7
 80047c0:	2202      	movs	r2, #2
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e116      	b.n	80049f4 <UART_SetConfig+0x390>
 80047c6:	231b      	movs	r3, #27
 80047c8:	2220      	movs	r2, #32
 80047ca:	189b      	adds	r3, r3, r2
 80047cc:	19db      	adds	r3, r3, r7
 80047ce:	2204      	movs	r2, #4
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	e10f      	b.n	80049f4 <UART_SetConfig+0x390>
 80047d4:	231b      	movs	r3, #27
 80047d6:	2220      	movs	r2, #32
 80047d8:	189b      	adds	r3, r3, r2
 80047da:	19db      	adds	r3, r3, r7
 80047dc:	2208      	movs	r2, #8
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	e108      	b.n	80049f4 <UART_SetConfig+0x390>
 80047e2:	231b      	movs	r3, #27
 80047e4:	2220      	movs	r2, #32
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	19db      	adds	r3, r3, r7
 80047ea:	2210      	movs	r2, #16
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e101      	b.n	80049f4 <UART_SetConfig+0x390>
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a71      	ldr	r2, [pc, #452]	; (80049bc <UART_SetConfig+0x358>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d131      	bne.n	800485e <UART_SetConfig+0x1fa>
 80047fa:	4b6e      	ldr	r3, [pc, #440]	; (80049b4 <UART_SetConfig+0x350>)
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	2230      	movs	r2, #48	; 0x30
 8004800:	4013      	ands	r3, r2
 8004802:	2b30      	cmp	r3, #48	; 0x30
 8004804:	d01d      	beq.n	8004842 <UART_SetConfig+0x1de>
 8004806:	d823      	bhi.n	8004850 <UART_SetConfig+0x1ec>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d00c      	beq.n	8004826 <UART_SetConfig+0x1c2>
 800480c:	d820      	bhi.n	8004850 <UART_SetConfig+0x1ec>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <UART_SetConfig+0x1b4>
 8004812:	2b10      	cmp	r3, #16
 8004814:	d00e      	beq.n	8004834 <UART_SetConfig+0x1d0>
 8004816:	e01b      	b.n	8004850 <UART_SetConfig+0x1ec>
 8004818:	231b      	movs	r3, #27
 800481a:	2220      	movs	r2, #32
 800481c:	189b      	adds	r3, r3, r2
 800481e:	19db      	adds	r3, r3, r7
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e0e6      	b.n	80049f4 <UART_SetConfig+0x390>
 8004826:	231b      	movs	r3, #27
 8004828:	2220      	movs	r2, #32
 800482a:	189b      	adds	r3, r3, r2
 800482c:	19db      	adds	r3, r3, r7
 800482e:	2202      	movs	r2, #2
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	e0df      	b.n	80049f4 <UART_SetConfig+0x390>
 8004834:	231b      	movs	r3, #27
 8004836:	2220      	movs	r2, #32
 8004838:	189b      	adds	r3, r3, r2
 800483a:	19db      	adds	r3, r3, r7
 800483c:	2204      	movs	r2, #4
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	e0d8      	b.n	80049f4 <UART_SetConfig+0x390>
 8004842:	231b      	movs	r3, #27
 8004844:	2220      	movs	r2, #32
 8004846:	189b      	adds	r3, r3, r2
 8004848:	19db      	adds	r3, r3, r7
 800484a:	2208      	movs	r2, #8
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e0d1      	b.n	80049f4 <UART_SetConfig+0x390>
 8004850:	231b      	movs	r3, #27
 8004852:	2220      	movs	r2, #32
 8004854:	189b      	adds	r3, r3, r2
 8004856:	19db      	adds	r3, r3, r7
 8004858:	2210      	movs	r2, #16
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e0ca      	b.n	80049f4 <UART_SetConfig+0x390>
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a57      	ldr	r2, [pc, #348]	; (80049c0 <UART_SetConfig+0x35c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d106      	bne.n	8004876 <UART_SetConfig+0x212>
 8004868:	231b      	movs	r3, #27
 800486a:	2220      	movs	r2, #32
 800486c:	189b      	adds	r3, r3, r2
 800486e:	19db      	adds	r3, r3, r7
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e0be      	b.n	80049f4 <UART_SetConfig+0x390>
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a52      	ldr	r2, [pc, #328]	; (80049c4 <UART_SetConfig+0x360>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d106      	bne.n	800488e <UART_SetConfig+0x22a>
 8004880:	231b      	movs	r3, #27
 8004882:	2220      	movs	r2, #32
 8004884:	189b      	adds	r3, r3, r2
 8004886:	19db      	adds	r3, r3, r7
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	e0b2      	b.n	80049f4 <UART_SetConfig+0x390>
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a4d      	ldr	r2, [pc, #308]	; (80049c8 <UART_SetConfig+0x364>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d106      	bne.n	80048a6 <UART_SetConfig+0x242>
 8004898:	231b      	movs	r3, #27
 800489a:	2220      	movs	r2, #32
 800489c:	189b      	adds	r3, r3, r2
 800489e:	19db      	adds	r3, r3, r7
 80048a0:	2200      	movs	r2, #0
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	e0a6      	b.n	80049f4 <UART_SetConfig+0x390>
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3e      	ldr	r2, [pc, #248]	; (80049a4 <UART_SetConfig+0x340>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d13e      	bne.n	800492e <UART_SetConfig+0x2ca>
 80048b0:	4b40      	ldr	r3, [pc, #256]	; (80049b4 <UART_SetConfig+0x350>)
 80048b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048b4:	23c0      	movs	r3, #192	; 0xc0
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	4013      	ands	r3, r2
 80048ba:	22c0      	movs	r2, #192	; 0xc0
 80048bc:	0112      	lsls	r2, r2, #4
 80048be:	4293      	cmp	r3, r2
 80048c0:	d027      	beq.n	8004912 <UART_SetConfig+0x2ae>
 80048c2:	22c0      	movs	r2, #192	; 0xc0
 80048c4:	0112      	lsls	r2, r2, #4
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d82a      	bhi.n	8004920 <UART_SetConfig+0x2bc>
 80048ca:	2280      	movs	r2, #128	; 0x80
 80048cc:	0112      	lsls	r2, r2, #4
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d011      	beq.n	80048f6 <UART_SetConfig+0x292>
 80048d2:	2280      	movs	r2, #128	; 0x80
 80048d4:	0112      	lsls	r2, r2, #4
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d822      	bhi.n	8004920 <UART_SetConfig+0x2bc>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <UART_SetConfig+0x284>
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	00d2      	lsls	r2, r2, #3
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <UART_SetConfig+0x2a0>
 80048e6:	e01b      	b.n	8004920 <UART_SetConfig+0x2bc>
 80048e8:	231b      	movs	r3, #27
 80048ea:	2220      	movs	r2, #32
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	19db      	adds	r3, r3, r7
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e07e      	b.n	80049f4 <UART_SetConfig+0x390>
 80048f6:	231b      	movs	r3, #27
 80048f8:	2220      	movs	r2, #32
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	19db      	adds	r3, r3, r7
 80048fe:	2202      	movs	r2, #2
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e077      	b.n	80049f4 <UART_SetConfig+0x390>
 8004904:	231b      	movs	r3, #27
 8004906:	2220      	movs	r2, #32
 8004908:	189b      	adds	r3, r3, r2
 800490a:	19db      	adds	r3, r3, r7
 800490c:	2204      	movs	r2, #4
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	e070      	b.n	80049f4 <UART_SetConfig+0x390>
 8004912:	231b      	movs	r3, #27
 8004914:	2220      	movs	r2, #32
 8004916:	189b      	adds	r3, r3, r2
 8004918:	19db      	adds	r3, r3, r7
 800491a:	2208      	movs	r2, #8
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	e069      	b.n	80049f4 <UART_SetConfig+0x390>
 8004920:	231b      	movs	r3, #27
 8004922:	2220      	movs	r2, #32
 8004924:	189b      	adds	r3, r3, r2
 8004926:	19db      	adds	r3, r3, r7
 8004928:	2210      	movs	r2, #16
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	e062      	b.n	80049f4 <UART_SetConfig+0x390>
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <UART_SetConfig+0x344>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d157      	bne.n	80049e8 <UART_SetConfig+0x384>
 8004938:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <UART_SetConfig+0x350>)
 800493a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800493c:	23c0      	movs	r3, #192	; 0xc0
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4013      	ands	r3, r2
 8004942:	22c0      	movs	r2, #192	; 0xc0
 8004944:	0092      	lsls	r2, r2, #2
 8004946:	4293      	cmp	r3, r2
 8004948:	d040      	beq.n	80049cc <UART_SetConfig+0x368>
 800494a:	22c0      	movs	r2, #192	; 0xc0
 800494c:	0092      	lsls	r2, r2, #2
 800494e:	4293      	cmp	r3, r2
 8004950:	d843      	bhi.n	80049da <UART_SetConfig+0x376>
 8004952:	2280      	movs	r2, #128	; 0x80
 8004954:	0092      	lsls	r2, r2, #2
 8004956:	4293      	cmp	r3, r2
 8004958:	d011      	beq.n	800497e <UART_SetConfig+0x31a>
 800495a:	2280      	movs	r2, #128	; 0x80
 800495c:	0092      	lsls	r2, r2, #2
 800495e:	4293      	cmp	r3, r2
 8004960:	d83b      	bhi.n	80049da <UART_SetConfig+0x376>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <UART_SetConfig+0x30c>
 8004966:	2280      	movs	r2, #128	; 0x80
 8004968:	0052      	lsls	r2, r2, #1
 800496a:	4293      	cmp	r3, r2
 800496c:	d00e      	beq.n	800498c <UART_SetConfig+0x328>
 800496e:	e034      	b.n	80049da <UART_SetConfig+0x376>
 8004970:	231b      	movs	r3, #27
 8004972:	2220      	movs	r2, #32
 8004974:	189b      	adds	r3, r3, r2
 8004976:	19db      	adds	r3, r3, r7
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e03a      	b.n	80049f4 <UART_SetConfig+0x390>
 800497e:	231b      	movs	r3, #27
 8004980:	2220      	movs	r2, #32
 8004982:	189b      	adds	r3, r3, r2
 8004984:	19db      	adds	r3, r3, r7
 8004986:	2202      	movs	r2, #2
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e033      	b.n	80049f4 <UART_SetConfig+0x390>
 800498c:	231b      	movs	r3, #27
 800498e:	2220      	movs	r2, #32
 8004990:	189b      	adds	r3, r3, r2
 8004992:	19db      	adds	r3, r3, r7
 8004994:	2204      	movs	r2, #4
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e02c      	b.n	80049f4 <UART_SetConfig+0x390>
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	cfff69f3 	.word	0xcfff69f3
 80049a0:	ffffcfff 	.word	0xffffcfff
 80049a4:	40008000 	.word	0x40008000
 80049a8:	40008400 	.word	0x40008400
 80049ac:	11fff4ff 	.word	0x11fff4ff
 80049b0:	40013800 	.word	0x40013800
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40004400 	.word	0x40004400
 80049bc:	40004800 	.word	0x40004800
 80049c0:	40004c00 	.word	0x40004c00
 80049c4:	40005000 	.word	0x40005000
 80049c8:	40013c00 	.word	0x40013c00
 80049cc:	231b      	movs	r3, #27
 80049ce:	2220      	movs	r2, #32
 80049d0:	189b      	adds	r3, r3, r2
 80049d2:	19db      	adds	r3, r3, r7
 80049d4:	2208      	movs	r2, #8
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e00c      	b.n	80049f4 <UART_SetConfig+0x390>
 80049da:	231b      	movs	r3, #27
 80049dc:	2220      	movs	r2, #32
 80049de:	189b      	adds	r3, r3, r2
 80049e0:	19db      	adds	r3, r3, r7
 80049e2:	2210      	movs	r2, #16
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e005      	b.n	80049f4 <UART_SetConfig+0x390>
 80049e8:	231b      	movs	r3, #27
 80049ea:	2220      	movs	r2, #32
 80049ec:	189b      	adds	r3, r3, r2
 80049ee:	19db      	adds	r3, r3, r7
 80049f0:	2210      	movs	r2, #16
 80049f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4ac1      	ldr	r2, [pc, #772]	; (8004d00 <UART_SetConfig+0x69c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d005      	beq.n	8004a0a <UART_SetConfig+0x3a6>
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4ac0      	ldr	r2, [pc, #768]	; (8004d04 <UART_SetConfig+0x6a0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d000      	beq.n	8004a0a <UART_SetConfig+0x3a6>
 8004a08:	e093      	b.n	8004b32 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a0a:	231b      	movs	r3, #27
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	19db      	adds	r3, r3, r7
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d015      	beq.n	8004a44 <UART_SetConfig+0x3e0>
 8004a18:	dc18      	bgt.n	8004a4c <UART_SetConfig+0x3e8>
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d00d      	beq.n	8004a3a <UART_SetConfig+0x3d6>
 8004a1e:	dc15      	bgt.n	8004a4c <UART_SetConfig+0x3e8>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <UART_SetConfig+0x3c6>
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d005      	beq.n	8004a34 <UART_SetConfig+0x3d0>
 8004a28:	e010      	b.n	8004a4c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2a:	f7fe fec3 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a32:	e014      	b.n	8004a5e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a34:	4bb4      	ldr	r3, [pc, #720]	; (8004d08 <UART_SetConfig+0x6a4>)
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a38:	e011      	b.n	8004a5e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a3a:	f7fe fe2f 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a42:	e00c      	b.n	8004a5e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a4a:	e008      	b.n	8004a5e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004a50:	231a      	movs	r3, #26
 8004a52:	2220      	movs	r2, #32
 8004a54:	189b      	adds	r3, r3, r2
 8004a56:	19db      	adds	r3, r3, r7
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
        break;
 8004a5c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d100      	bne.n	8004a66 <UART_SetConfig+0x402>
 8004a64:	e135      	b.n	8004cd2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a6a:	4ba8      	ldr	r3, [pc, #672]	; (8004d0c <UART_SetConfig+0x6a8>)
 8004a6c:	0052      	lsls	r2, r2, #1
 8004a6e:	5ad3      	ldrh	r3, [r2, r3]
 8004a70:	0019      	movs	r1, r3
 8004a72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a74:	f7fb fb5a 	bl	800012c <__udivsi3>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	0013      	movs	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	189b      	adds	r3, r3, r2
 8004a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d305      	bcc.n	8004a98 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d906      	bls.n	8004aa6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004a98:	231a      	movs	r3, #26
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	189b      	adds	r3, r3, r2
 8004a9e:	19db      	adds	r3, r3, r7
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	e044      	b.n	8004b30 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab2:	4b96      	ldr	r3, [pc, #600]	; (8004d0c <UART_SetConfig+0x6a8>)
 8004ab4:	0052      	lsls	r2, r2, #1
 8004ab6:	5ad3      	ldrh	r3, [r2, r3]
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	69b8      	ldr	r0, [r7, #24]
 8004ac4:	69f9      	ldr	r1, [r7, #28]
 8004ac6:	f7fb fca7 	bl	8000418 <__aeabi_uldivmod>
 8004aca:	0002      	movs	r2, r0
 8004acc:	000b      	movs	r3, r1
 8004ace:	0e11      	lsrs	r1, r2, #24
 8004ad0:	021d      	lsls	r5, r3, #8
 8004ad2:	430d      	orrs	r5, r1
 8004ad4:	0214      	lsls	r4, r2, #8
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68b8      	ldr	r0, [r7, #8]
 8004ae4:	68f9      	ldr	r1, [r7, #12]
 8004ae6:	1900      	adds	r0, r0, r4
 8004ae8:	4169      	adcs	r1, r5
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	2300      	movs	r3, #0
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f7fb fc8e 	bl	8000418 <__aeabi_uldivmod>
 8004afc:	0002      	movs	r2, r0
 8004afe:	000b      	movs	r3, r1
 8004b00:	0013      	movs	r3, r2
 8004b02:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b06:	23c0      	movs	r3, #192	; 0xc0
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d309      	bcc.n	8004b22 <UART_SetConfig+0x4be>
 8004b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	035b      	lsls	r3, r3, #13
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d204      	bcs.n	8004b22 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1e:	60da      	str	r2, [r3, #12]
 8004b20:	e006      	b.n	8004b30 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004b22:	231a      	movs	r3, #26
 8004b24:	2220      	movs	r2, #32
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	19db      	adds	r3, r3, r7
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004b2e:	e0d0      	b.n	8004cd2 <UART_SetConfig+0x66e>
 8004b30:	e0cf      	b.n	8004cd2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d000      	beq.n	8004b40 <UART_SetConfig+0x4dc>
 8004b3e:	e070      	b.n	8004c22 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004b40:	231b      	movs	r3, #27
 8004b42:	2220      	movs	r2, #32
 8004b44:	189b      	adds	r3, r3, r2
 8004b46:	19db      	adds	r3, r3, r7
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d015      	beq.n	8004b7a <UART_SetConfig+0x516>
 8004b4e:	dc18      	bgt.n	8004b82 <UART_SetConfig+0x51e>
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d00d      	beq.n	8004b70 <UART_SetConfig+0x50c>
 8004b54:	dc15      	bgt.n	8004b82 <UART_SetConfig+0x51e>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <UART_SetConfig+0x4fc>
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d005      	beq.n	8004b6a <UART_SetConfig+0x506>
 8004b5e:	e010      	b.n	8004b82 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b60:	f7fe fe28 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8004b64:	0003      	movs	r3, r0
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b68:	e014      	b.n	8004b94 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b6a:	4b67      	ldr	r3, [pc, #412]	; (8004d08 <UART_SetConfig+0x6a4>)
 8004b6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b6e:	e011      	b.n	8004b94 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b70:	f7fe fd94 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8004b74:	0003      	movs	r3, r0
 8004b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b78:	e00c      	b.n	8004b94 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b80:	e008      	b.n	8004b94 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b86:	231a      	movs	r3, #26
 8004b88:	2220      	movs	r2, #32
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	19db      	adds	r3, r3, r7
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
        break;
 8004b92:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d100      	bne.n	8004b9c <UART_SetConfig+0x538>
 8004b9a:	e09a      	b.n	8004cd2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba0:	4b5a      	ldr	r3, [pc, #360]	; (8004d0c <UART_SetConfig+0x6a8>)
 8004ba2:	0052      	lsls	r2, r2, #1
 8004ba4:	5ad3      	ldrh	r3, [r2, r3]
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004baa:	f7fb fabf 	bl	800012c <__udivsi3>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	005a      	lsls	r2, r3, #1
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	18d2      	adds	r2, r2, r3
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	0019      	movs	r1, r3
 8004bc0:	0010      	movs	r0, r2
 8004bc2:	f7fb fab3 	bl	800012c <__udivsi3>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d921      	bls.n	8004c14 <UART_SetConfig+0x5b0>
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	025b      	lsls	r3, r3, #9
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d21c      	bcs.n	8004c14 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	200e      	movs	r0, #14
 8004be0:	2420      	movs	r4, #32
 8004be2:	1903      	adds	r3, r0, r4
 8004be4:	19db      	adds	r3, r3, r7
 8004be6:	210f      	movs	r1, #15
 8004be8:	438a      	bics	r2, r1
 8004bea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2207      	movs	r2, #7
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	b299      	uxth	r1, r3
 8004bf8:	1903      	adds	r3, r0, r4
 8004bfa:	19db      	adds	r3, r3, r7
 8004bfc:	1902      	adds	r2, r0, r4
 8004bfe:	19d2      	adds	r2, r2, r7
 8004c00:	8812      	ldrh	r2, [r2, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1902      	adds	r2, r0, r4
 8004c0c:	19d2      	adds	r2, r2, r7
 8004c0e:	8812      	ldrh	r2, [r2, #0]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	e05e      	b.n	8004cd2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004c14:	231a      	movs	r3, #26
 8004c16:	2220      	movs	r2, #32
 8004c18:	189b      	adds	r3, r3, r2
 8004c1a:	19db      	adds	r3, r3, r7
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e057      	b.n	8004cd2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c22:	231b      	movs	r3, #27
 8004c24:	2220      	movs	r2, #32
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	19db      	adds	r3, r3, r7
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d015      	beq.n	8004c5c <UART_SetConfig+0x5f8>
 8004c30:	dc18      	bgt.n	8004c64 <UART_SetConfig+0x600>
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d00d      	beq.n	8004c52 <UART_SetConfig+0x5ee>
 8004c36:	dc15      	bgt.n	8004c64 <UART_SetConfig+0x600>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <UART_SetConfig+0x5de>
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d005      	beq.n	8004c4c <UART_SetConfig+0x5e8>
 8004c40:	e010      	b.n	8004c64 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c42:	f7fe fdb7 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8004c46:	0003      	movs	r3, r0
 8004c48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c4a:	e014      	b.n	8004c76 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b2e      	ldr	r3, [pc, #184]	; (8004d08 <UART_SetConfig+0x6a4>)
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c50:	e011      	b.n	8004c76 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fe fd23 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8004c56:	0003      	movs	r3, r0
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c5a:	e00c      	b.n	8004c76 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c62:	e008      	b.n	8004c76 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004c68:	231a      	movs	r3, #26
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	189b      	adds	r3, r3, r2
 8004c6e:	19db      	adds	r3, r3, r7
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
        break;
 8004c74:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02a      	beq.n	8004cd2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c80:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <UART_SetConfig+0x6a8>)
 8004c82:	0052      	lsls	r2, r2, #1
 8004c84:	5ad3      	ldrh	r3, [r2, r3]
 8004c86:	0019      	movs	r1, r3
 8004c88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c8a:	f7fb fa4f 	bl	800012c <__udivsi3>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	001a      	movs	r2, r3
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	18d2      	adds	r2, r2, r3
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	0010      	movs	r0, r2
 8004ca2:	f7fb fa43 	bl	800012c <__udivsi3>
 8004ca6:	0003      	movs	r3, r0
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2b0f      	cmp	r3, #15
 8004cae:	d90a      	bls.n	8004cc6 <UART_SetConfig+0x662>
 8004cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	025b      	lsls	r3, r3, #9
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d205      	bcs.n	8004cc6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60da      	str	r2, [r3, #12]
 8004cc4:	e005      	b.n	8004cd2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc6:	231a      	movs	r3, #26
 8004cc8:	2220      	movs	r2, #32
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	19db      	adds	r3, r3, r7
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	226a      	movs	r2, #106	; 0x6a
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	2268      	movs	r2, #104	; 0x68
 8004cde:	2101      	movs	r1, #1
 8004ce0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2200      	movs	r2, #0
 8004cec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cee:	231a      	movs	r3, #26
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	19db      	adds	r3, r3, r7
 8004cf6:	781b      	ldrb	r3, [r3, #0]
}
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b010      	add	sp, #64	; 0x40
 8004cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8004d00:	40008000 	.word	0x40008000
 8004d04:	40008400 	.word	0x40008400
 8004d08:	00f42400 	.word	0x00f42400
 8004d0c:	08007928 	.word	0x08007928

08004d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d00b      	beq.n	8004d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a4a      	ldr	r2, [pc, #296]	; (8004e54 <UART_AdvFeatureConfig+0x144>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	2202      	movs	r2, #2
 8004d40:	4013      	ands	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4a43      	ldr	r2, [pc, #268]	; (8004e58 <UART_AdvFeatureConfig+0x148>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	0019      	movs	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	2204      	movs	r2, #4
 8004d62:	4013      	ands	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a3b      	ldr	r2, [pc, #236]	; (8004e5c <UART_AdvFeatureConfig+0x14c>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	2208      	movs	r2, #8
 8004d84:	4013      	ands	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4a34      	ldr	r2, [pc, #208]	; (8004e60 <UART_AdvFeatureConfig+0x150>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	0019      	movs	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	2210      	movs	r2, #16
 8004da6:	4013      	ands	r3, r2
 8004da8:	d00b      	beq.n	8004dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a2c      	ldr	r2, [pc, #176]	; (8004e64 <UART_AdvFeatureConfig+0x154>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <UART_AdvFeatureConfig+0x158>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	2240      	movs	r2, #64	; 0x40
 8004dea:	4013      	ands	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a1d      	ldr	r2, [pc, #116]	; (8004e6c <UART_AdvFeatureConfig+0x15c>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	0019      	movs	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	035b      	lsls	r3, r3, #13
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d10b      	bne.n	8004e2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4a15      	ldr	r2, [pc, #84]	; (8004e70 <UART_AdvFeatureConfig+0x160>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	2280      	movs	r2, #128	; 0x80
 8004e30:	4013      	ands	r3, r2
 8004e32:	d00b      	beq.n	8004e4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4a0e      	ldr	r2, [pc, #56]	; (8004e74 <UART_AdvFeatureConfig+0x164>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
  }
}
 8004e4c:	46c0      	nop			; (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b002      	add	sp, #8
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	fffdffff 	.word	0xfffdffff
 8004e58:	fffeffff 	.word	0xfffeffff
 8004e5c:	fffbffff 	.word	0xfffbffff
 8004e60:	ffff7fff 	.word	0xffff7fff
 8004e64:	ffffefff 	.word	0xffffefff
 8004e68:	ffffdfff 	.word	0xffffdfff
 8004e6c:	ffefffff 	.word	0xffefffff
 8004e70:	ff9fffff 	.word	0xff9fffff
 8004e74:	fff7ffff 	.word	0xfff7ffff

08004e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2290      	movs	r2, #144	; 0x90
 8004e84:	2100      	movs	r1, #0
 8004e86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e88:	f7fd f8ce 	bl	8002028 <HAL_GetTick>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2208      	movs	r2, #8
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d10c      	bne.n	8004eb8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2280      	movs	r2, #128	; 0x80
 8004ea2:	0391      	lsls	r1, r2, #14
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <UART_CheckIdleState+0x98>)
 8004ea8:	9200      	str	r2, [sp, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f000 f832 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004eb0:	1e03      	subs	r3, r0, #0
 8004eb2:	d001      	beq.n	8004eb8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e026      	b.n	8004f06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d10c      	bne.n	8004ee0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2280      	movs	r2, #128	; 0x80
 8004eca:	03d1      	lsls	r1, r2, #15
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <UART_CheckIdleState+0x98>)
 8004ed0:	9200      	str	r2, [sp, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f000 f81e 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004ed8:	1e03      	subs	r3, r0, #0
 8004eda:	d001      	beq.n	8004ee0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e012      	b.n	8004f06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2288      	movs	r2, #136	; 0x88
 8004ee4:	2120      	movs	r1, #32
 8004ee6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	228c      	movs	r2, #140	; 0x8c
 8004eec:	2120      	movs	r1, #32
 8004eee:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2284      	movs	r2, #132	; 0x84
 8004f00:	2100      	movs	r1, #0
 8004f02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b004      	add	sp, #16
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	01ffffff 	.word	0x01ffffff

08004f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b094      	sub	sp, #80	; 0x50
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	1dfb      	adds	r3, r7, #7
 8004f22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	e0a7      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f28:	3301      	adds	r3, #1
 8004f2a:	d100      	bne.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x1a>
 8004f2c:	e0a3      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fd f87b 	bl	8002028 <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d13f      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f44:	f3ef 8310 	mrs	r3, PRIMASK
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4e:	2301      	movs	r3, #1
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	494e      	ldr	r1, [pc, #312]	; (80050a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004f66:	400a      	ands	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	f383 8810 	msr	PRIMASK, r3
}
 8004f74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f76:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f80:	2301      	movs	r3, #1
 8004f82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2101      	movs	r1, #1
 8004f98:	438a      	bics	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa2:	f383 8810 	msr	PRIMASK, r3
}
 8004fa6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2288      	movs	r2, #136	; 0x88
 8004fac:	2120      	movs	r1, #32
 8004fae:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	228c      	movs	r2, #140	; 0x8c
 8004fb4:	2120      	movs	r1, #32
 8004fb6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2284      	movs	r2, #132	; 0x84
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e069      	b.n	8005098 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d052      	beq.n	8005076 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69da      	ldr	r2, [r3, #28]
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	401a      	ands	r2, r3
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d148      	bne.n	8005076 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2280      	movs	r2, #128	; 0x80
 8004fea:	0112      	lsls	r2, r2, #4
 8004fec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fee:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff2:	613b      	str	r3, [r7, #16]
  return(result);
 8004ff4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f383 8810 	msr	PRIMASK, r3
}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4924      	ldr	r1, [pc, #144]	; (80050a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005010:	400a      	ands	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f383 8810 	msr	PRIMASK, r3
}
 800501e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005020:	f3ef 8310 	mrs	r3, PRIMASK
 8005024:	61fb      	str	r3, [r7, #28]
  return(result);
 8005026:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005028:	64bb      	str	r3, [r7, #72]	; 0x48
 800502a:	2301      	movs	r3, #1
 800502c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f383 8810 	msr	PRIMASK, r3
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2101      	movs	r1, #1
 8005042:	438a      	bics	r2, r1
 8005044:	609a      	str	r2, [r3, #8]
 8005046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	f383 8810 	msr	PRIMASK, r3
}
 8005050:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2288      	movs	r2, #136	; 0x88
 8005056:	2120      	movs	r1, #32
 8005058:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	228c      	movs	r2, #140	; 0x8c
 800505e:	2120      	movs	r1, #32
 8005060:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2290      	movs	r2, #144	; 0x90
 8005066:	2120      	movs	r1, #32
 8005068:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2284      	movs	r2, #132	; 0x84
 800506e:	2100      	movs	r1, #0
 8005070:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e010      	b.n	8005098 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	425a      	negs	r2, r3
 8005086:	4153      	adcs	r3, r2
 8005088:	b2db      	uxtb	r3, r3
 800508a:	001a      	movs	r2, r3
 800508c:	1dfb      	adds	r3, r7, #7
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d100      	bne.n	8005096 <UART_WaitOnFlagUntilTimeout+0x182>
 8005094:	e747      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b014      	add	sp, #80	; 0x50
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	fffffe5f 	.word	0xfffffe5f

080050a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2284      	movs	r2, #132	; 0x84
 80050b0:	5c9b      	ldrb	r3, [r3, r2]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_UARTEx_DisableFifoMode+0x16>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e027      	b.n	800510a <HAL_UARTEx_DisableFifoMode+0x66>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2284      	movs	r2, #132	; 0x84
 80050be:	2101      	movs	r1, #1
 80050c0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2288      	movs	r2, #136	; 0x88
 80050c6:	2124      	movs	r1, #36	; 0x24
 80050c8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2101      	movs	r1, #1
 80050de:	438a      	bics	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <HAL_UARTEx_DisableFifoMode+0x70>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2288      	movs	r2, #136	; 0x88
 80050fc:	2120      	movs	r1, #32
 80050fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2284      	movs	r2, #132	; 0x84
 8005104:	2100      	movs	r1, #0
 8005106:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	0018      	movs	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	b004      	add	sp, #16
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	dfffffff 	.word	0xdfffffff

08005118 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2284      	movs	r2, #132	; 0x84
 8005126:	5c9b      	ldrb	r3, [r3, r2]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e02e      	b.n	800518e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2284      	movs	r2, #132	; 0x84
 8005134:	2101      	movs	r1, #1
 8005136:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2288      	movs	r2, #136	; 0x88
 800513c:	2124      	movs	r1, #36	; 0x24
 800513e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2101      	movs	r1, #1
 8005154:	438a      	bics	r2, r1
 8005156:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	08d9      	lsrs	r1, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	0018      	movs	r0, r3
 8005170:	f000 f854 	bl	800521c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2288      	movs	r2, #136	; 0x88
 8005180:	2120      	movs	r1, #32
 8005182:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2284      	movs	r2, #132	; 0x84
 8005188:	2100      	movs	r1, #0
 800518a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	0018      	movs	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	b004      	add	sp, #16
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2284      	movs	r2, #132	; 0x84
 80051a6:	5c9b      	ldrb	r3, [r3, r2]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e02f      	b.n	8005210 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2284      	movs	r2, #132	; 0x84
 80051b4:	2101      	movs	r1, #1
 80051b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2288      	movs	r2, #136	; 0x88
 80051bc:	2124      	movs	r1, #36	; 0x24
 80051be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2101      	movs	r1, #1
 80051d4:	438a      	bics	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4a0e      	ldr	r2, [pc, #56]	; (8005218 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	0019      	movs	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 f813 	bl	800521c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2288      	movs	r2, #136	; 0x88
 8005202:	2120      	movs	r1, #32
 8005204:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2284      	movs	r2, #132	; 0x84
 800520a:	2100      	movs	r1, #0
 800520c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b004      	add	sp, #16
 8005216:	bd80      	pop	{r7, pc}
 8005218:	f1ffffff 	.word	0xf1ffffff

0800521c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800521c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	226a      	movs	r2, #106	; 0x6a
 8005230:	2101      	movs	r1, #1
 8005232:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2268      	movs	r2, #104	; 0x68
 8005238:	2101      	movs	r1, #1
 800523a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800523c:	e043      	b.n	80052c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800523e:	260f      	movs	r6, #15
 8005240:	19bb      	adds	r3, r7, r6
 8005242:	2208      	movs	r2, #8
 8005244:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005246:	200e      	movs	r0, #14
 8005248:	183b      	adds	r3, r7, r0
 800524a:	2208      	movs	r2, #8
 800524c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	0e5b      	lsrs	r3, r3, #25
 8005256:	b2da      	uxtb	r2, r3
 8005258:	240d      	movs	r4, #13
 800525a:	193b      	adds	r3, r7, r4
 800525c:	2107      	movs	r1, #7
 800525e:	400a      	ands	r2, r1
 8005260:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	0f5b      	lsrs	r3, r3, #29
 800526a:	b2da      	uxtb	r2, r3
 800526c:	250c      	movs	r5, #12
 800526e:	197b      	adds	r3, r7, r5
 8005270:	2107      	movs	r1, #7
 8005272:	400a      	ands	r2, r1
 8005274:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005276:	183b      	adds	r3, r7, r0
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	197a      	adds	r2, r7, r5
 800527c:	7812      	ldrb	r2, [r2, #0]
 800527e:	4914      	ldr	r1, [pc, #80]	; (80052d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005280:	5c8a      	ldrb	r2, [r1, r2]
 8005282:	435a      	muls	r2, r3
 8005284:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005286:	197b      	adds	r3, r7, r5
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	4a12      	ldr	r2, [pc, #72]	; (80052d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800528c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800528e:	0019      	movs	r1, r3
 8005290:	f7fa ffd6 	bl	8000240 <__divsi3>
 8005294:	0003      	movs	r3, r0
 8005296:	b299      	uxth	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	226a      	movs	r2, #106	; 0x6a
 800529c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800529e:	19bb      	adds	r3, r7, r6
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	193a      	adds	r2, r7, r4
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	490a      	ldr	r1, [pc, #40]	; (80052d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80052a8:	5c8a      	ldrb	r2, [r1, r2]
 80052aa:	435a      	muls	r2, r3
 80052ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052ae:	193b      	adds	r3, r7, r4
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80052b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052b6:	0019      	movs	r1, r3
 80052b8:	f7fa ffc2 	bl	8000240 <__divsi3>
 80052bc:	0003      	movs	r3, r0
 80052be:	b299      	uxth	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2268      	movs	r2, #104	; 0x68
 80052c4:	5299      	strh	r1, [r3, r2]
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b005      	add	sp, #20
 80052cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	08007940 	.word	0x08007940
 80052d4:	08007948 	.word	0x08007948

080052d8 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80052d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052da:	b08d      	sub	sp, #52	; 0x34
 80052dc:	af00      	add	r7, sp, #0
 80052de:	0004      	movs	r4, r0
 80052e0:	0008      	movs	r0, r1
 80052e2:	0011      	movs	r1, r2
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	1dfb      	adds	r3, r7, #7
 80052e8:	1c22      	adds	r2, r4, #0
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	1dbb      	adds	r3, r7, #6
 80052ee:	1c02      	adds	r2, r0, #0
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	1d7b      	adds	r3, r7, #5
 80052f4:	1c0a      	adds	r2, r1, #0
 80052f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80052f8:	2514      	movs	r5, #20
 80052fa:	197b      	adds	r3, r7, r5
 80052fc:	1dfa      	adds	r2, r7, #7
 80052fe:	7812      	ldrb	r2, [r2, #0]
 8005300:	701a      	strb	r2, [r3, #0]
  cp.privacy_enabled = privacy_enabled;
 8005302:	197b      	adds	r3, r7, r5
 8005304:	1dba      	adds	r2, r7, #6
 8005306:	7812      	ldrb	r2, [r2, #0]
 8005308:	705a      	strb	r2, [r3, #1]
  cp.device_name_char_len = device_name_char_len;
 800530a:	197b      	adds	r3, r7, r5
 800530c:	1d7a      	adds	r2, r7, #5
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	709a      	strb	r2, [r3, #2]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005312:	260c      	movs	r6, #12
 8005314:	19bb      	adds	r3, r7, r6
 8005316:	2207      	movs	r2, #7
 8005318:	2100      	movs	r1, #0
 800531a:	0018      	movs	r0, r3
 800531c:	f001 fa82 	bl	8006824 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005320:	2418      	movs	r4, #24
 8005322:	193b      	adds	r3, r7, r4
 8005324:	2218      	movs	r2, #24
 8005326:	2100      	movs	r1, #0
 8005328:	0018      	movs	r0, r3
 800532a:	f001 fa7b 	bl	8006824 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800532e:	0021      	movs	r1, r4
 8005330:	187b      	adds	r3, r7, r1
 8005332:	223f      	movs	r2, #63	; 0x3f
 8005334:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_INIT;
 8005336:	187b      	adds	r3, r7, r1
 8005338:	228a      	movs	r2, #138	; 0x8a
 800533a:	805a      	strh	r2, [r3, #2]
  rq.cparam = &cp;
 800533c:	187b      	adds	r3, r7, r1
 800533e:	197a      	adds	r2, r7, r5
 8005340:	609a      	str	r2, [r3, #8]
  rq.clen = sizeof(cp);
 8005342:	187b      	adds	r3, r7, r1
 8005344:	2203      	movs	r2, #3
 8005346:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 8005348:	187b      	adds	r3, r7, r1
 800534a:	19ba      	adds	r2, r7, r6
 800534c:	611a      	str	r2, [r3, #16]
  rq.rlen = GAP_INIT_RP_SIZE;
 800534e:	187b      	adds	r3, r7, r1
 8005350:	2207      	movs	r2, #7
 8005352:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005354:	187b      	adds	r3, r7, r1
 8005356:	2100      	movs	r1, #0
 8005358:	0018      	movs	r0, r3
 800535a:	f000 fd83 	bl	8005e64 <hci_send_req>
 800535e:	1e03      	subs	r3, r0, #0
 8005360:	da01      	bge.n	8005366 <aci_gap_init_IDB05A1+0x8e>
    return BLE_STATUS_TIMEOUT;
 8005362:	23ff      	movs	r3, #255	; 0xff
 8005364:	e01f      	b.n	80053a6 <aci_gap_init_IDB05A1+0xce>
  
  if (resp.status) {
 8005366:	220c      	movs	r2, #12
 8005368:	18bb      	adds	r3, r7, r2
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <aci_gap_init_IDB05A1+0x9e>
    return resp.status;
 8005370:	18bb      	adds	r3, r7, r2
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	e017      	b.n	80053a6 <aci_gap_init_IDB05A1+0xce>
  }
  
  *service_handle = btohs(resp.service_handle);
 8005376:	210c      	movs	r1, #12
 8005378:	187b      	adds	r3, r7, r1
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	0c1b      	lsrs	r3, r3, #16
 8005380:	b29a      	uxth	r2, r3
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8005386:	187b      	adds	r3, r7, r1
 8005388:	78da      	ldrb	r2, [r3, #3]
 800538a:	791b      	ldrb	r3, [r3, #4]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	4313      	orrs	r3, r2
 8005390:	b29a      	uxth	r2, r3
 8005392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005394:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005396:	187b      	adds	r3, r7, r1
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a2:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	0018      	movs	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b00d      	add	sp, #52	; 0x34
 80053ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053ae <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80053ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b0:	b095      	sub	sp, #84	; 0x54
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	0005      	movs	r5, r0
 80053b6:	000c      	movs	r4, r1
 80053b8:	0010      	movs	r0, r2
 80053ba:	0019      	movs	r1, r3
 80053bc:	1dfb      	adds	r3, r7, #7
 80053be:	1c2a      	adds	r2, r5, #0
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	1d3b      	adds	r3, r7, #4
 80053c4:	1c22      	adds	r2, r4, #0
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	1cbb      	adds	r3, r7, #2
 80053ca:	1c02      	adds	r2, r0, #0
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	1dbb      	adds	r3, r7, #6
 80053d0:	1c0a      	adds	r2, r1, #0
 80053d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80053d4:	234f      	movs	r3, #79	; 0x4f
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80053dc:	2364      	movs	r3, #100	; 0x64
 80053de:	2108      	movs	r1, #8
 80053e0:	185b      	adds	r3, r3, r1
 80053e2:	19db      	adds	r3, r3, r7
 80053e4:	781a      	ldrb	r2, [r3, #0]
 80053e6:	236c      	movs	r3, #108	; 0x6c
 80053e8:	185b      	adds	r3, r3, r1
 80053ea:	19db      	adds	r3, r3, r7
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	18d3      	adds	r3, r2, r3
 80053f0:	330e      	adds	r3, #14
 80053f2:	2b28      	cmp	r3, #40	; 0x28
 80053f4:	d901      	bls.n	80053fa <aci_gap_set_discoverable+0x4c>
    return BLE_STATUS_INVALID_PARAMS;
 80053f6:	2342      	movs	r3, #66	; 0x42
 80053f8:	e0f0      	b.n	80055dc <aci_gap_set_discoverable+0x22e>

  buffer[indx] = AdvType;
 80053fa:	204f      	movs	r0, #79	; 0x4f
 80053fc:	183b      	adds	r3, r7, r0
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2508      	movs	r5, #8
 8005402:	197a      	adds	r2, r7, r5
 8005404:	1df9      	adds	r1, r7, #7
 8005406:	7809      	ldrb	r1, [r1, #0]
 8005408:	54d1      	strb	r1, [r2, r3]
  indx++;
 800540a:	0001      	movs	r1, r0
 800540c:	187b      	adds	r3, r7, r1
 800540e:	781a      	ldrb	r2, [r3, #0]
 8005410:	187b      	adds	r3, r7, r1
 8005412:	3201      	adds	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
  
  AdvIntervMin = htobs(AdvIntervMin);
 8005416:	1d3b      	adds	r3, r7, #4
 8005418:	881a      	ldrh	r2, [r3, #0]
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800541e:	000c      	movs	r4, r1
 8005420:	187b      	adds	r3, r7, r1
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	197a      	adds	r2, r7, r5
 8005426:	18d3      	adds	r3, r2, r3
 8005428:	1d39      	adds	r1, r7, #4
 800542a:	2202      	movs	r2, #2
 800542c:	0018      	movs	r0, r3
 800542e:	f001 f9f0 	bl	8006812 <memcpy>
  indx +=  2;
 8005432:	0021      	movs	r1, r4
 8005434:	187b      	adds	r3, r7, r1
 8005436:	187a      	adds	r2, r7, r1
 8005438:	7812      	ldrb	r2, [r2, #0]
 800543a:	3202      	adds	r2, #2
 800543c:	701a      	strb	r2, [r3, #0]
    
  AdvIntervMax = htobs(AdvIntervMax);
 800543e:	1cbb      	adds	r3, r7, #2
 8005440:	881a      	ldrh	r2, [r3, #0]
 8005442:	1cbb      	adds	r3, r7, #2
 8005444:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8005446:	000c      	movs	r4, r1
 8005448:	187b      	adds	r3, r7, r1
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	197a      	adds	r2, r7, r5
 800544e:	18d3      	adds	r3, r2, r3
 8005450:	1cb9      	adds	r1, r7, #2
 8005452:	2202      	movs	r2, #2
 8005454:	0018      	movs	r0, r3
 8005456:	f001 f9dc 	bl	8006812 <memcpy>
  indx +=  2;
 800545a:	193b      	adds	r3, r7, r4
 800545c:	193a      	adds	r2, r7, r4
 800545e:	7812      	ldrb	r2, [r2, #0]
 8005460:	3202      	adds	r2, #2
 8005462:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = OwnAddrType;
 8005464:	193b      	adds	r3, r7, r4
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	197a      	adds	r2, r7, r5
 800546a:	1db9      	adds	r1, r7, #6
 800546c:	7809      	ldrb	r1, [r1, #0]
 800546e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005470:	193b      	adds	r3, r7, r4
 8005472:	781a      	ldrb	r2, [r3, #0]
 8005474:	193b      	adds	r3, r7, r4
 8005476:	3201      	adds	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = AdvFilterPolicy;
 800547a:	193b      	adds	r3, r7, r4
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	1979      	adds	r1, r7, r5
 8005480:	2360      	movs	r3, #96	; 0x60
 8005482:	2008      	movs	r0, #8
 8005484:	181b      	adds	r3, r3, r0
 8005486:	19db      	adds	r3, r3, r7
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	548b      	strb	r3, [r1, r2]
  indx++;
 800548c:	193b      	adds	r3, r7, r4
 800548e:	781a      	ldrb	r2, [r3, #0]
 8005490:	193b      	adds	r3, r7, r4
 8005492:	3201      	adds	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = LocalNameLen;
 8005496:	193b      	adds	r3, r7, r4
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	197a      	adds	r2, r7, r5
 800549c:	2664      	movs	r6, #100	; 0x64
 800549e:	1831      	adds	r1, r6, r0
 80054a0:	19c9      	adds	r1, r1, r7
 80054a2:	7809      	ldrb	r1, [r1, #0]
 80054a4:	54d1      	strb	r1, [r2, r3]
  indx++;
 80054a6:	193b      	adds	r3, r7, r4
 80054a8:	781a      	ldrb	r2, [r3, #0]
 80054aa:	193b      	adds	r3, r7, r4
 80054ac:	3201      	adds	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80054b0:	193b      	adds	r3, r7, r4
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	197a      	adds	r2, r7, r5
 80054b6:	18d0      	adds	r0, r2, r3
 80054b8:	2308      	movs	r3, #8
 80054ba:	18f2      	adds	r2, r6, r3
 80054bc:	19d3      	adds	r3, r2, r7
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054c2:	0019      	movs	r1, r3
 80054c4:	f001 f9a5 	bl	8006812 <memcpy>
  indx +=  LocalNameLen;
 80054c8:	193b      	adds	r3, r7, r4
 80054ca:	1939      	adds	r1, r7, r4
 80054cc:	2008      	movs	r0, #8
 80054ce:	1832      	adds	r2, r6, r0
 80054d0:	19d2      	adds	r2, r2, r7
 80054d2:	7809      	ldrb	r1, [r1, #0]
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	188a      	adds	r2, r1, r2
 80054d8:	701a      	strb	r2, [r3, #0]
  
  buffer[indx] = ServiceUUIDLen;
 80054da:	193b      	adds	r3, r7, r4
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	197a      	adds	r2, r7, r5
 80054e0:	266c      	movs	r6, #108	; 0x6c
 80054e2:	1831      	adds	r1, r6, r0
 80054e4:	19c9      	adds	r1, r1, r7
 80054e6:	7809      	ldrb	r1, [r1, #0]
 80054e8:	54d1      	strb	r1, [r2, r3]
  indx++;
 80054ea:	193b      	adds	r3, r7, r4
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	193b      	adds	r3, r7, r4
 80054f0:	3201      	adds	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80054f4:	193b      	adds	r3, r7, r4
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	197a      	adds	r2, r7, r5
 80054fa:	18d0      	adds	r0, r2, r3
 80054fc:	2308      	movs	r3, #8
 80054fe:	18f2      	adds	r2, r6, r3
 8005500:	19d3      	adds	r3, r2, r7
 8005502:	781a      	ldrb	r2, [r3, #0]
 8005504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005506:	0019      	movs	r1, r3
 8005508:	f001 f983 	bl	8006812 <memcpy>
  indx +=  ServiceUUIDLen;  
 800550c:	0020      	movs	r0, r4
 800550e:	183b      	adds	r3, r7, r0
 8005510:	1839      	adds	r1, r7, r0
 8005512:	2408      	movs	r4, #8
 8005514:	1932      	adds	r2, r6, r4
 8005516:	19d2      	adds	r2, r2, r7
 8005518:	7809      	ldrb	r1, [r1, #0]
 800551a:	7812      	ldrb	r2, [r2, #0]
 800551c:	188a      	adds	r2, r1, r2
 800551e:	701a      	strb	r2, [r3, #0]

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8005520:	2174      	movs	r1, #116	; 0x74
 8005522:	0026      	movs	r6, r4
 8005524:	198b      	adds	r3, r1, r6
 8005526:	19db      	adds	r3, r3, r7
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	198b      	adds	r3, r1, r6
 800552c:	19db      	adds	r3, r3, r7
 800552e:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8005530:	0004      	movs	r4, r0
 8005532:	183b      	adds	r3, r7, r0
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	197a      	adds	r2, r7, r5
 8005538:	18d3      	adds	r3, r2, r3
 800553a:	198a      	adds	r2, r1, r6
 800553c:	19d1      	adds	r1, r2, r7
 800553e:	2202      	movs	r2, #2
 8005540:	0018      	movs	r0, r3
 8005542:	f001 f966 	bl	8006812 <memcpy>
  indx +=  2;
 8005546:	0020      	movs	r0, r4
 8005548:	183b      	adds	r3, r7, r0
 800554a:	183a      	adds	r2, r7, r0
 800554c:	7812      	ldrb	r2, [r2, #0]
 800554e:	3202      	adds	r2, #2
 8005550:	701a      	strb	r2, [r3, #0]
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8005552:	2178      	movs	r1, #120	; 0x78
 8005554:	198b      	adds	r3, r1, r6
 8005556:	19db      	adds	r3, r3, r7
 8005558:	881a      	ldrh	r2, [r3, #0]
 800555a:	198b      	adds	r3, r1, r6
 800555c:	19db      	adds	r3, r3, r7
 800555e:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8005560:	0004      	movs	r4, r0
 8005562:	193b      	adds	r3, r7, r4
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	197a      	adds	r2, r7, r5
 8005568:	18d3      	adds	r3, r2, r3
 800556a:	198a      	adds	r2, r1, r6
 800556c:	19d1      	adds	r1, r2, r7
 800556e:	2202      	movs	r2, #2
 8005570:	0018      	movs	r0, r3
 8005572:	f001 f94e 	bl	8006812 <memcpy>
  indx +=  2;    
 8005576:	193b      	adds	r3, r7, r4
 8005578:	193a      	adds	r2, r7, r4
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	3202      	adds	r2, #2
 800557e:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005580:	2634      	movs	r6, #52	; 0x34
 8005582:	19bb      	adds	r3, r7, r6
 8005584:	2218      	movs	r2, #24
 8005586:	2100      	movs	r1, #0
 8005588:	0018      	movs	r0, r3
 800558a:	f001 f94b 	bl	8006824 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800558e:	0031      	movs	r1, r6
 8005590:	187b      	adds	r3, r7, r1
 8005592:	223f      	movs	r2, #63	; 0x3f
 8005594:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8005596:	187b      	adds	r3, r7, r1
 8005598:	2283      	movs	r2, #131	; 0x83
 800559a:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 800559c:	187b      	adds	r3, r7, r1
 800559e:	197a      	adds	r2, r7, r5
 80055a0:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 80055a2:	193b      	adds	r3, r7, r4
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	2233      	movs	r2, #51	; 0x33
 80055ae:	18ba      	adds	r2, r7, r2
 80055b0:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80055b2:	187b      	adds	r3, r7, r1
 80055b4:	2201      	movs	r2, #1
 80055b6:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 80055b8:	187b      	adds	r3, r7, r1
 80055ba:	2100      	movs	r1, #0
 80055bc:	0018      	movs	r0, r3
 80055be:	f000 fc51 	bl	8005e64 <hci_send_req>
 80055c2:	1e03      	subs	r3, r0, #0
 80055c4:	da01      	bge.n	80055ca <aci_gap_set_discoverable+0x21c>
    return BLE_STATUS_TIMEOUT;
 80055c6:	23ff      	movs	r3, #255	; 0xff
 80055c8:	e008      	b.n	80055dc <aci_gap_set_discoverable+0x22e>

  if (status) {
 80055ca:	2233      	movs	r2, #51	; 0x33
 80055cc:	18bb      	adds	r3, r7, r2
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <aci_gap_set_discoverable+0x22c>
    return status;
 80055d4:	18bb      	adds	r3, r7, r2
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	e000      	b.n	80055dc <aci_gap_set_discoverable+0x22e>
  }

  return 0;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b015      	add	sp, #84	; 0x54
 80055e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055e4 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b089      	sub	sp, #36	; 0x24
 80055e8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80055ea:	2408      	movs	r4, #8
 80055ec:	193b      	adds	r3, r7, r4
 80055ee:	2218      	movs	r2, #24
 80055f0:	2100      	movs	r1, #0
 80055f2:	0018      	movs	r0, r3
 80055f4:	f001 f916 	bl	8006824 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80055f8:	0021      	movs	r1, r4
 80055fa:	187b      	adds	r3, r7, r1
 80055fc:	223f      	movs	r2, #63	; 0x3f
 80055fe:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_INIT;
 8005600:	187b      	adds	r3, r7, r1
 8005602:	2202      	movs	r2, #2
 8005604:	32ff      	adds	r2, #255	; 0xff
 8005606:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8005608:	187b      	adds	r3, r7, r1
 800560a:	1dfa      	adds	r2, r7, #7
 800560c:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800560e:	187b      	adds	r3, r7, r1
 8005610:	2201      	movs	r2, #1
 8005612:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005614:	187b      	adds	r3, r7, r1
 8005616:	2100      	movs	r1, #0
 8005618:	0018      	movs	r0, r3
 800561a:	f000 fc23 	bl	8005e64 <hci_send_req>
 800561e:	1e03      	subs	r3, r0, #0
 8005620:	da01      	bge.n	8005626 <aci_gatt_init+0x42>
    return BLE_STATUS_TIMEOUT;
 8005622:	23ff      	movs	r3, #255	; 0xff
 8005624:	e001      	b.n	800562a <aci_gatt_init+0x46>

  return status;
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	781b      	ldrb	r3, [r3, #0]
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b009      	add	sp, #36	; 0x24
 8005630:	bd90      	pop	{r4, r7, pc}

08005632 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8005632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005634:	b091      	sub	sp, #68	; 0x44
 8005636:	af00      	add	r7, sp, #0
 8005638:	0004      	movs	r4, r0
 800563a:	6039      	str	r1, [r7, #0]
 800563c:	0010      	movs	r0, r2
 800563e:	0019      	movs	r1, r3
 8005640:	1dfb      	adds	r3, r7, #7
 8005642:	1c22      	adds	r2, r4, #0
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	1dbb      	adds	r3, r7, #6
 8005648:	1c02      	adds	r2, r0, #0
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	1d7b      	adds	r3, r7, #5
 800564e:	1c0a      	adds	r2, r1, #0
 8005650:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005652:	203e      	movs	r0, #62	; 0x3e
 8005654:	183b      	adds	r3, r7, r0
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_uuid_type;
 800565a:	183b      	adds	r3, r7, r0
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	220c      	movs	r2, #12
 8005660:	18ba      	adds	r2, r7, r2
 8005662:	1df9      	adds	r1, r7, #7
 8005664:	7809      	ldrb	r1, [r1, #0]
 8005666:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005668:	183b      	adds	r3, r7, r0
 800566a:	781a      	ldrb	r2, [r3, #0]
 800566c:	183b      	adds	r3, r7, r0
 800566e:	3201      	adds	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
    
  if(service_uuid_type == UUID_TYPE_16){
 8005672:	1dfb      	adds	r3, r7, #7
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d104      	bne.n	8005684 <aci_gatt_add_serv+0x52>
    uuid_len = 2;
 800567a:	233f      	movs	r3, #63	; 0x3f
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	2202      	movs	r2, #2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e003      	b.n	800568c <aci_gatt_add_serv+0x5a>
  }
  else {
    uuid_len = 16;
 8005684:	233f      	movs	r3, #63	; 0x3f
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	2210      	movs	r2, #16
 800568a:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800568c:	243e      	movs	r4, #62	; 0x3e
 800568e:	193b      	adds	r3, r7, r4
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	260c      	movs	r6, #12
 8005694:	19ba      	adds	r2, r7, r6
 8005696:	18d0      	adds	r0, r2, r3
 8005698:	253f      	movs	r5, #63	; 0x3f
 800569a:	197b      	adds	r3, r7, r5
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	0019      	movs	r1, r3
 80056a2:	f001 f8b6 	bl	8006812 <memcpy>
  indx +=  uuid_len;
 80056a6:	0020      	movs	r0, r4
 80056a8:	183b      	adds	r3, r7, r0
 80056aa:	1839      	adds	r1, r7, r0
 80056ac:	197a      	adds	r2, r7, r5
 80056ae:	7809      	ldrb	r1, [r1, #0]
 80056b0:	7812      	ldrb	r2, [r2, #0]
 80056b2:	188a      	adds	r2, r1, r2
 80056b4:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_type;
 80056b6:	183b      	adds	r3, r7, r0
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	19ba      	adds	r2, r7, r6
 80056bc:	1db9      	adds	r1, r7, #6
 80056be:	7809      	ldrb	r1, [r1, #0]
 80056c0:	54d1      	strb	r1, [r2, r3]
  indx++;
 80056c2:	183b      	adds	r3, r7, r0
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	0004      	movs	r4, r0
 80056c8:	183b      	adds	r3, r7, r0
 80056ca:	3201      	adds	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = max_attr_records;
 80056ce:	193b      	adds	r3, r7, r4
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	19ba      	adds	r2, r7, r6
 80056d4:	1d79      	adds	r1, r7, #5
 80056d6:	7809      	ldrb	r1, [r1, #0]
 80056d8:	54d1      	strb	r1, [r2, r3]
  indx++;
 80056da:	193b      	adds	r3, r7, r4
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	193b      	adds	r3, r7, r4
 80056e0:	3201      	adds	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80056e4:	2320      	movs	r3, #32
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	2203      	movs	r2, #3
 80056ea:	2100      	movs	r1, #0
 80056ec:	0018      	movs	r0, r3
 80056ee:	f001 f899 	bl	8006824 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80056f2:	2524      	movs	r5, #36	; 0x24
 80056f4:	197b      	adds	r3, r7, r5
 80056f6:	2218      	movs	r2, #24
 80056f8:	2100      	movs	r1, #0
 80056fa:	0018      	movs	r0, r3
 80056fc:	f001 f892 	bl	8006824 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005700:	0029      	movs	r1, r5
 8005702:	187b      	adds	r3, r7, r1
 8005704:	223f      	movs	r2, #63	; 0x3f
 8005706:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_SERV;
 8005708:	187b      	adds	r3, r7, r1
 800570a:	2281      	movs	r2, #129	; 0x81
 800570c:	0052      	lsls	r2, r2, #1
 800570e:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005710:	187b      	adds	r3, r7, r1
 8005712:	19ba      	adds	r2, r7, r6
 8005714:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8005716:	193b      	adds	r3, r7, r4
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	187b      	adds	r3, r7, r1
 800571c:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800571e:	187b      	adds	r3, r7, r1
 8005720:	2220      	movs	r2, #32
 8005722:	18ba      	adds	r2, r7, r2
 8005724:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8005726:	187b      	adds	r3, r7, r1
 8005728:	2203      	movs	r2, #3
 800572a:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 800572c:	187b      	adds	r3, r7, r1
 800572e:	2100      	movs	r1, #0
 8005730:	0018      	movs	r0, r3
 8005732:	f000 fb97 	bl	8005e64 <hci_send_req>
 8005736:	1e03      	subs	r3, r0, #0
 8005738:	da01      	bge.n	800573e <aci_gatt_add_serv+0x10c>
    return BLE_STATUS_TIMEOUT;
 800573a:	23ff      	movs	r3, #255	; 0xff
 800573c:	e010      	b.n	8005760 <aci_gatt_add_serv+0x12e>

  if (resp.status) {
 800573e:	2220      	movs	r2, #32
 8005740:	18bb      	adds	r3, r7, r2
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <aci_gatt_add_serv+0x11c>
    return resp.status;
 8005748:	18bb      	adds	r3, r7, r2
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	e008      	b.n	8005760 <aci_gatt_add_serv+0x12e>
  }
    
  *serviceHandle = btohs(resp.handle);
 800574e:	2320      	movs	r3, #32
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	0c1b      	lsrs	r3, r3, #16
 8005758:	b29a      	uxth	r2, r3
 800575a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800575c:	801a      	strh	r2, [r3, #0]

  return 0;
 800575e:	2300      	movs	r3, #0
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	b011      	add	sp, #68	; 0x44
 8005766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005768 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800576a:	b093      	sub	sp, #76	; 0x4c
 800576c:	af00      	add	r7, sp, #0
 800576e:	0004      	movs	r4, r0
 8005770:	0008      	movs	r0, r1
 8005772:	603a      	str	r2, [r7, #0]
 8005774:	0019      	movs	r1, r3
 8005776:	1dbb      	adds	r3, r7, #6
 8005778:	1c22      	adds	r2, r4, #0
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	1d7b      	adds	r3, r7, #5
 800577e:	1c02      	adds	r2, r0, #0
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	1d3b      	adds	r3, r7, #4
 8005784:	1c0a      	adds	r2, r1, #0
 8005786:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005788:	2146      	movs	r1, #70	; 0x46
 800578a:	187b      	adds	r3, r7, r1
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]
    
  serviceHandle = htobs(serviceHandle);
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	881a      	ldrh	r2, [r3, #0]
 8005794:	1dbb      	adds	r3, r7, #6
 8005796:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005798:	000c      	movs	r4, r1
 800579a:	187b      	adds	r3, r7, r1
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	250c      	movs	r5, #12
 80057a0:	197a      	adds	r2, r7, r5
 80057a2:	18d3      	adds	r3, r2, r3
 80057a4:	1db9      	adds	r1, r7, #6
 80057a6:	2202      	movs	r2, #2
 80057a8:	0018      	movs	r0, r3
 80057aa:	f001 f832 	bl	8006812 <memcpy>
  indx += 2;
 80057ae:	0020      	movs	r0, r4
 80057b0:	183b      	adds	r3, r7, r0
 80057b2:	183a      	adds	r2, r7, r0
 80057b4:	7812      	ldrb	r2, [r2, #0]
 80057b6:	3202      	adds	r2, #2
 80057b8:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charUuidType;
 80057ba:	183b      	adds	r3, r7, r0
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	197a      	adds	r2, r7, r5
 80057c0:	1d79      	adds	r1, r7, #5
 80057c2:	7809      	ldrb	r1, [r1, #0]
 80057c4:	54d1      	strb	r1, [r2, r3]
  indx++;
 80057c6:	183b      	adds	r3, r7, r0
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	183b      	adds	r3, r7, r0
 80057cc:	3201      	adds	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
    
  if(charUuidType == UUID_TYPE_16){
 80057d0:	1d7b      	adds	r3, r7, #5
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d104      	bne.n	80057e2 <aci_gatt_add_char+0x7a>
    uuid_len = 2;
 80057d8:	2347      	movs	r3, #71	; 0x47
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	2202      	movs	r2, #2
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	e003      	b.n	80057ea <aci_gatt_add_char+0x82>
  }
  else {
    uuid_len = 16;
 80057e2:	2347      	movs	r3, #71	; 0x47
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	2210      	movs	r2, #16
 80057e8:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80057ea:	2446      	movs	r4, #70	; 0x46
 80057ec:	193b      	adds	r3, r7, r4
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	250c      	movs	r5, #12
 80057f2:	197a      	adds	r2, r7, r5
 80057f4:	18d0      	adds	r0, r2, r3
 80057f6:	2647      	movs	r6, #71	; 0x47
 80057f8:	19bb      	adds	r3, r7, r6
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	0019      	movs	r1, r3
 8005800:	f001 f807 	bl	8006812 <memcpy>
  indx +=  uuid_len;
 8005804:	0020      	movs	r0, r4
 8005806:	183b      	adds	r3, r7, r0
 8005808:	1839      	adds	r1, r7, r0
 800580a:	19ba      	adds	r2, r7, r6
 800580c:	7809      	ldrb	r1, [r1, #0]
 800580e:	7812      	ldrb	r2, [r2, #0]
 8005810:	188a      	adds	r2, r1, r2
 8005812:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 8005814:	183b      	adds	r3, r7, r0
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	197a      	adds	r2, r7, r5
 800581a:	1d39      	adds	r1, r7, #4
 800581c:	7809      	ldrb	r1, [r1, #0]
 800581e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005820:	183b      	adds	r3, r7, r0
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	0004      	movs	r4, r0
 8005826:	183b      	adds	r3, r7, r0
 8005828:	3201      	adds	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charProperties;
 800582c:	193b      	adds	r3, r7, r4
 800582e:	781a      	ldrb	r2, [r3, #0]
 8005830:	1979      	adds	r1, r7, r5
 8005832:	2358      	movs	r3, #88	; 0x58
 8005834:	2008      	movs	r0, #8
 8005836:	181b      	adds	r3, r3, r0
 8005838:	19db      	adds	r3, r3, r7
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	548b      	strb	r3, [r1, r2]
  indx++;
 800583e:	193b      	adds	r3, r7, r4
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	193b      	adds	r3, r7, r4
 8005844:	3201      	adds	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = secPermissions;
 8005848:	193b      	adds	r3, r7, r4
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	197a      	adds	r2, r7, r5
 800584e:	215c      	movs	r1, #92	; 0x5c
 8005850:	1809      	adds	r1, r1, r0
 8005852:	19c9      	adds	r1, r1, r7
 8005854:	7809      	ldrb	r1, [r1, #0]
 8005856:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005858:	193b      	adds	r3, r7, r4
 800585a:	781a      	ldrb	r2, [r3, #0]
 800585c:	193b      	adds	r3, r7, r4
 800585e:	3201      	adds	r2, #1
 8005860:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = gattEvtMask;
 8005862:	193b      	adds	r3, r7, r4
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	197a      	adds	r2, r7, r5
 8005868:	2160      	movs	r1, #96	; 0x60
 800586a:	1809      	adds	r1, r1, r0
 800586c:	19c9      	adds	r1, r1, r7
 800586e:	7809      	ldrb	r1, [r1, #0]
 8005870:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005872:	193b      	adds	r3, r7, r4
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	193b      	adds	r3, r7, r4
 8005878:	3201      	adds	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = encryKeySize;
 800587c:	193b      	adds	r3, r7, r4
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	197a      	adds	r2, r7, r5
 8005882:	2164      	movs	r1, #100	; 0x64
 8005884:	1809      	adds	r1, r1, r0
 8005886:	19c9      	adds	r1, r1, r7
 8005888:	7809      	ldrb	r1, [r1, #0]
 800588a:	54d1      	strb	r1, [r2, r3]
  indx++;
 800588c:	193b      	adds	r3, r7, r4
 800588e:	781a      	ldrb	r2, [r3, #0]
 8005890:	193b      	adds	r3, r7, r4
 8005892:	3201      	adds	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = isVariable;
 8005896:	193b      	adds	r3, r7, r4
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	197a      	adds	r2, r7, r5
 800589c:	2168      	movs	r1, #104	; 0x68
 800589e:	1809      	adds	r1, r1, r0
 80058a0:	19c9      	adds	r1, r1, r7
 80058a2:	7809      	ldrb	r1, [r1, #0]
 80058a4:	54d1      	strb	r1, [r2, r3]
  indx++;
 80058a6:	193b      	adds	r3, r7, r4
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	193b      	adds	r3, r7, r4
 80058ac:	3201      	adds	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80058b0:	2328      	movs	r3, #40	; 0x28
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	2203      	movs	r2, #3
 80058b6:	2100      	movs	r1, #0
 80058b8:	0018      	movs	r0, r3
 80058ba:	f000 ffb3 	bl	8006824 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80058be:	262c      	movs	r6, #44	; 0x2c
 80058c0:	19bb      	adds	r3, r7, r6
 80058c2:	2218      	movs	r2, #24
 80058c4:	2100      	movs	r1, #0
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 ffac 	bl	8006824 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80058cc:	0031      	movs	r1, r6
 80058ce:	187b      	adds	r3, r7, r1
 80058d0:	223f      	movs	r2, #63	; 0x3f
 80058d2:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_CHAR;
 80058d4:	187b      	adds	r3, r7, r1
 80058d6:	2282      	movs	r2, #130	; 0x82
 80058d8:	0052      	lsls	r2, r2, #1
 80058da:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 80058dc:	187b      	adds	r3, r7, r1
 80058de:	197a      	adds	r2, r7, r5
 80058e0:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 80058e2:	193b      	adds	r3, r7, r4
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	187b      	adds	r3, r7, r1
 80058e8:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 80058ea:	187b      	adds	r3, r7, r1
 80058ec:	2228      	movs	r2, #40	; 0x28
 80058ee:	18ba      	adds	r2, r7, r2
 80058f0:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80058f2:	187b      	adds	r3, r7, r1
 80058f4:	2203      	movs	r2, #3
 80058f6:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 80058f8:	187b      	adds	r3, r7, r1
 80058fa:	2100      	movs	r1, #0
 80058fc:	0018      	movs	r0, r3
 80058fe:	f000 fab1 	bl	8005e64 <hci_send_req>
 8005902:	1e03      	subs	r3, r0, #0
 8005904:	da01      	bge.n	800590a <aci_gatt_add_char+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005906:	23ff      	movs	r3, #255	; 0xff
 8005908:	e010      	b.n	800592c <aci_gatt_add_char+0x1c4>

  if (resp.status) {
 800590a:	2228      	movs	r2, #40	; 0x28
 800590c:	18bb      	adds	r3, r7, r2
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <aci_gatt_add_char+0x1b2>
    return resp.status;
 8005914:	18bb      	adds	r3, r7, r2
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	e008      	b.n	800592c <aci_gatt_add_char+0x1c4>
  }
    
  *charHandle = btohs(resp.handle);
 800591a:	2328      	movs	r3, #40	; 0x28
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	0c1b      	lsrs	r3, r3, #16
 8005924:	b29a      	uxth	r2, r3
 8005926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005928:	801a      	strh	r2, [r3, #0]

  return 0;
 800592a:	2300      	movs	r3, #0
}
 800592c:	0018      	movs	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	b013      	add	sp, #76	; 0x4c
 8005932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005934 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8005934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005936:	b0ab      	sub	sp, #172	; 0xac
 8005938:	af00      	add	r7, sp, #0
 800593a:	0005      	movs	r5, r0
 800593c:	000c      	movs	r4, r1
 800593e:	0010      	movs	r0, r2
 8005940:	0019      	movs	r1, r3
 8005942:	1dbb      	adds	r3, r7, #6
 8005944:	1c2a      	adds	r2, r5, #0
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	1d3b      	adds	r3, r7, #4
 800594a:	1c22      	adds	r2, r4, #0
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	1cfb      	adds	r3, r7, #3
 8005950:	1c02      	adds	r2, r0, #0
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	1cbb      	adds	r3, r7, #2
 8005956:	1c0a      	adds	r2, r1, #0
 8005958:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800595a:	23a7      	movs	r3, #167	; 0xa7
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8005962:	1cbb      	adds	r3, r7, #2
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b7a      	cmp	r3, #122	; 0x7a
 8005968:	d901      	bls.n	800596e <aci_gatt_update_char_value+0x3a>
    return BLE_STATUS_INVALID_PARAMS;
 800596a:	2342      	movs	r3, #66	; 0x42
 800596c:	e082      	b.n	8005a74 <aci_gatt_update_char_value+0x140>

  servHandle = htobs(servHandle);
 800596e:	1dbb      	adds	r3, r7, #6
 8005970:	881a      	ldrh	r2, [r3, #0]
 8005972:	1dbb      	adds	r3, r7, #6
 8005974:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8005976:	24a7      	movs	r4, #167	; 0xa7
 8005978:	193b      	adds	r3, r7, r4
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2508      	movs	r5, #8
 800597e:	197a      	adds	r2, r7, r5
 8005980:	18d3      	adds	r3, r2, r3
 8005982:	1db9      	adds	r1, r7, #6
 8005984:	2202      	movs	r2, #2
 8005986:	0018      	movs	r0, r3
 8005988:	f000 ff43 	bl	8006812 <memcpy>
  indx += 2;
 800598c:	0021      	movs	r1, r4
 800598e:	187b      	adds	r3, r7, r1
 8005990:	187a      	adds	r2, r7, r1
 8005992:	7812      	ldrb	r2, [r2, #0]
 8005994:	3202      	adds	r2, #2
 8005996:	701a      	strb	r2, [r3, #0]
    
  charHandle = htobs(charHandle);
 8005998:	1d3b      	adds	r3, r7, #4
 800599a:	881a      	ldrh	r2, [r3, #0]
 800599c:	1d3b      	adds	r3, r7, #4
 800599e:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80059a0:	000c      	movs	r4, r1
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	002e      	movs	r6, r5
 80059a8:	19ba      	adds	r2, r7, r6
 80059aa:	18d3      	adds	r3, r2, r3
 80059ac:	1d39      	adds	r1, r7, #4
 80059ae:	2202      	movs	r2, #2
 80059b0:	0018      	movs	r0, r3
 80059b2:	f000 ff2e 	bl	8006812 <memcpy>
  indx += 2;
 80059b6:	193b      	adds	r3, r7, r4
 80059b8:	193a      	adds	r2, r7, r4
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	3202      	adds	r2, #2
 80059be:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValOffset;
 80059c0:	193b      	adds	r3, r7, r4
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	19ba      	adds	r2, r7, r6
 80059c6:	1cf9      	adds	r1, r7, #3
 80059c8:	7809      	ldrb	r1, [r1, #0]
 80059ca:	54d1      	strb	r1, [r2, r3]
  indx++;
 80059cc:	193b      	adds	r3, r7, r4
 80059ce:	781a      	ldrb	r2, [r3, #0]
 80059d0:	193b      	adds	r3, r7, r4
 80059d2:	3201      	adds	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 80059d6:	193b      	adds	r3, r7, r4
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	19ba      	adds	r2, r7, r6
 80059dc:	1cb9      	adds	r1, r7, #2
 80059de:	7809      	ldrb	r1, [r1, #0]
 80059e0:	54d1      	strb	r1, [r2, r3]
  indx++;
 80059e2:	193b      	adds	r3, r7, r4
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	193b      	adds	r3, r7, r4
 80059e8:	3201      	adds	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80059ec:	193b      	adds	r3, r7, r4
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	19ba      	adds	r2, r7, r6
 80059f2:	18d0      	adds	r0, r2, r3
 80059f4:	1cbb      	adds	r3, r7, #2
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	23b8      	movs	r3, #184	; 0xb8
 80059fa:	2108      	movs	r1, #8
 80059fc:	185b      	adds	r3, r3, r1
 80059fe:	19db      	adds	r3, r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	0019      	movs	r1, r3
 8005a04:	f000 ff05 	bl	8006812 <memcpy>
  indx +=  charValueLen;
 8005a08:	193b      	adds	r3, r7, r4
 8005a0a:	1939      	adds	r1, r7, r4
 8005a0c:	1cba      	adds	r2, r7, #2
 8005a0e:	7809      	ldrb	r1, [r1, #0]
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	188a      	adds	r2, r1, r2
 8005a14:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a16:	258c      	movs	r5, #140	; 0x8c
 8005a18:	197b      	adds	r3, r7, r5
 8005a1a:	2218      	movs	r2, #24
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f000 ff00 	bl	8006824 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005a24:	0029      	movs	r1, r5
 8005a26:	187b      	adds	r3, r7, r1
 8005a28:	223f      	movs	r2, #63	; 0x3f
 8005a2a:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005a2c:	187b      	adds	r3, r7, r1
 8005a2e:	2283      	movs	r2, #131	; 0x83
 8005a30:	0052      	lsls	r2, r2, #1
 8005a32:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005a34:	187b      	adds	r3, r7, r1
 8005a36:	19ba      	adds	r2, r7, r6
 8005a38:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8005a3a:	193b      	adds	r3, r7, r4
 8005a3c:	781a      	ldrb	r2, [r3, #0]
 8005a3e:	187b      	adds	r3, r7, r1
 8005a40:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005a42:	187b      	adds	r3, r7, r1
 8005a44:	228b      	movs	r2, #139	; 0x8b
 8005a46:	18ba      	adds	r2, r7, r2
 8005a48:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005a4a:	187b      	adds	r3, r7, r1
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005a50:	187b      	adds	r3, r7, r1
 8005a52:	2100      	movs	r1, #0
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 fa05 	bl	8005e64 <hci_send_req>
 8005a5a:	1e03      	subs	r3, r0, #0
 8005a5c:	da01      	bge.n	8005a62 <aci_gatt_update_char_value+0x12e>
    return BLE_STATUS_TIMEOUT;
 8005a5e:	23ff      	movs	r3, #255	; 0xff
 8005a60:	e008      	b.n	8005a74 <aci_gatt_update_char_value+0x140>

  if (status) {
 8005a62:	228b      	movs	r2, #139	; 0x8b
 8005a64:	18bb      	adds	r3, r7, r2
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <aci_gatt_update_char_value+0x13e>
    return status;
 8005a6c:	18bb      	adds	r3, r7, r2
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	e000      	b.n	8005a74 <aci_gatt_update_char_value+0x140>
  }

  return 0;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	0018      	movs	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b02b      	add	sp, #172	; 0xac
 8005a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a7c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8005a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7e:	b0ab      	sub	sp, #172	; 0xac
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	603a      	str	r2, [r7, #0]
 8005a84:	1dfb      	adds	r3, r7, #7
 8005a86:	1c02      	adds	r2, r0, #0
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	1dbb      	adds	r3, r7, #6
 8005a8c:	1c0a      	adds	r2, r1, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005a90:	23a7      	movs	r3, #167	; 0xa7
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8005a98:	1dbb      	adds	r3, r7, #6
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b7e      	cmp	r3, #126	; 0x7e
 8005a9e:	d901      	bls.n	8005aa4 <aci_hal_write_config_data+0x28>
    return BLE_STATUS_INVALID_PARAMS;
 8005aa0:	2342      	movs	r3, #66	; 0x42
 8005aa2:	e050      	b.n	8005b46 <aci_hal_write_config_data+0xca>

  buffer[indx] = offset;
 8005aa4:	24a7      	movs	r4, #167	; 0xa7
 8005aa6:	193b      	adds	r3, r7, r4
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2608      	movs	r6, #8
 8005aac:	19ba      	adds	r2, r7, r6
 8005aae:	1df9      	adds	r1, r7, #7
 8005ab0:	7809      	ldrb	r1, [r1, #0]
 8005ab2:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005ab4:	193b      	adds	r3, r7, r4
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	193b      	adds	r3, r7, r4
 8005aba:	3201      	adds	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = len;
 8005abe:	193b      	adds	r3, r7, r4
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	19ba      	adds	r2, r7, r6
 8005ac4:	1db9      	adds	r1, r7, #6
 8005ac6:	7809      	ldrb	r1, [r1, #0]
 8005ac8:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005aca:	193b      	adds	r3, r7, r4
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	193b      	adds	r3, r7, r4
 8005ad0:	3201      	adds	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8005ad4:	193b      	adds	r3, r7, r4
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	19ba      	adds	r2, r7, r6
 8005ada:	18d0      	adds	r0, r2, r3
 8005adc:	1dbb      	adds	r3, r7, #6
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	0019      	movs	r1, r3
 8005ae4:	f000 fe95 	bl	8006812 <memcpy>
  indx +=  len;
 8005ae8:	193b      	adds	r3, r7, r4
 8005aea:	1939      	adds	r1, r7, r4
 8005aec:	1dba      	adds	r2, r7, #6
 8005aee:	7809      	ldrb	r1, [r1, #0]
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	188a      	adds	r2, r1, r2
 8005af4:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005af6:	258c      	movs	r5, #140	; 0x8c
 8005af8:	197b      	adds	r3, r7, r5
 8005afa:	2218      	movs	r2, #24
 8005afc:	2100      	movs	r1, #0
 8005afe:	0018      	movs	r0, r3
 8005b00:	f000 fe90 	bl	8006824 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005b04:	0029      	movs	r1, r5
 8005b06:	187b      	adds	r3, r7, r1
 8005b08:	223f      	movs	r2, #63	; 0x3f
 8005b0a:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8005b0c:	187b      	adds	r3, r7, r1
 8005b0e:	220c      	movs	r2, #12
 8005b10:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	19ba      	adds	r2, r7, r6
 8005b16:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	187b      	adds	r3, r7, r1
 8005b1e:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005b20:	187b      	adds	r3, r7, r1
 8005b22:	228b      	movs	r2, #139	; 0x8b
 8005b24:	18ba      	adds	r2, r7, r2
 8005b26:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005b28:	187b      	adds	r3, r7, r1
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005b2e:	187b      	adds	r3, r7, r1
 8005b30:	2100      	movs	r1, #0
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 f996 	bl	8005e64 <hci_send_req>
 8005b38:	1e03      	subs	r3, r0, #0
 8005b3a:	da01      	bge.n	8005b40 <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8005b3c:	23ff      	movs	r3, #255	; 0xff
 8005b3e:	e002      	b.n	8005b46 <aci_hal_write_config_data+0xca>

  return status;
 8005b40:	238b      	movs	r3, #139	; 0x8b
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	781b      	ldrb	r3, [r3, #0]
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b02b      	add	sp, #172	; 0xac
 8005b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b4e <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8005b4e:	b590      	push	{r4, r7, lr}
 8005b50:	b089      	sub	sp, #36	; 0x24
 8005b52:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b54:	2408      	movs	r4, #8
 8005b56:	193b      	adds	r3, r7, r4
 8005b58:	2218      	movs	r2, #24
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f000 fe61 	bl	8006824 <memset>
  rq.ogf = OGF_HOST_CTL;
 8005b62:	0021      	movs	r1, r4
 8005b64:	187b      	adds	r3, r7, r1
 8005b66:	2203      	movs	r2, #3
 8005b68:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_RESET;
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8005b70:	187b      	adds	r3, r7, r1
 8005b72:	1dfa      	adds	r2, r7, #7
 8005b74:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005b76:	187b      	adds	r3, r7, r1
 8005b78:	2201      	movs	r2, #1
 8005b7a:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005b7c:	187b      	adds	r3, r7, r1
 8005b7e:	2100      	movs	r1, #0
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 f96f 	bl	8005e64 <hci_send_req>
 8005b86:	1e03      	subs	r3, r0, #0
 8005b88:	da01      	bge.n	8005b8e <hci_reset+0x40>
    return BLE_STATUS_TIMEOUT;
 8005b8a:	23ff      	movs	r3, #255	; 0xff
 8005b8c:	e001      	b.n	8005b92 <hci_reset+0x44>
  
  return status;  
 8005b8e:	1dfb      	adds	r3, r7, #7
 8005b90:	781b      	ldrb	r3, [r3, #0]
}
 8005b92:	0018      	movs	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	b009      	add	sp, #36	; 0x24
 8005b98:	bd90      	pop	{r4, r7, pc}

08005b9a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8005b9a:	b5b0      	push	{r4, r5, r7, lr}
 8005b9c:	b092      	sub	sp, #72	; 0x48
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	0002      	movs	r2, r0
 8005ba2:	6039      	str	r1, [r7, #0]
 8005ba4:	1dfb      	adds	r3, r7, #7
 8005ba6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8005ba8:	2410      	movs	r4, #16
 8005baa:	193b      	adds	r3, r7, r4
 8005bac:	2220      	movs	r2, #32
 8005bae:	2100      	movs	r1, #0
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f000 fe37 	bl	8006824 <memset>
  scan_resp_cp.length = length;
 8005bb6:	193b      	adds	r3, r7, r4
 8005bb8:	1dfa      	adds	r2, r7, #7
 8005bba:	7812      	ldrb	r2, [r2, #0]
 8005bbc:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8005bbe:	1dfb      	adds	r3, r7, #7
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	2a1f      	cmp	r2, #31
 8005bc6:	d900      	bls.n	8005bca <hci_le_set_scan_resp_data+0x30>
 8005bc8:	231f      	movs	r3, #31
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	001a      	movs	r2, r3
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	2510      	movs	r5, #16
 8005bd2:	197b      	adds	r3, r7, r5
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f000 fe1b 	bl	8006812 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005bdc:	2430      	movs	r4, #48	; 0x30
 8005bde:	193b      	adds	r3, r7, r4
 8005be0:	2218      	movs	r2, #24
 8005be2:	2100      	movs	r1, #0
 8005be4:	0018      	movs	r0, r3
 8005be6:	f000 fe1d 	bl	8006824 <memset>
  rq.ogf = OGF_LE_CTL;
 8005bea:	0021      	movs	r1, r4
 8005bec:	187b      	adds	r3, r7, r1
 8005bee:	2208      	movs	r2, #8
 8005bf0:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8005bf2:	187b      	adds	r3, r7, r1
 8005bf4:	2209      	movs	r2, #9
 8005bf6:	805a      	strh	r2, [r3, #2]
  rq.cparam = &scan_resp_cp;
 8005bf8:	187b      	adds	r3, r7, r1
 8005bfa:	197a      	adds	r2, r7, r5
 8005bfc:	609a      	str	r2, [r3, #8]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8005bfe:	187b      	adds	r3, r7, r1
 8005c00:	2220      	movs	r2, #32
 8005c02:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005c04:	187b      	adds	r3, r7, r1
 8005c06:	220f      	movs	r2, #15
 8005c08:	18ba      	adds	r2, r7, r2
 8005c0a:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005c0c:	187b      	adds	r3, r7, r1
 8005c0e:	2201      	movs	r2, #1
 8005c10:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005c12:	187b      	adds	r3, r7, r1
 8005c14:	2100      	movs	r1, #0
 8005c16:	0018      	movs	r0, r3
 8005c18:	f000 f924 	bl	8005e64 <hci_send_req>
 8005c1c:	1e03      	subs	r3, r0, #0
 8005c1e:	da01      	bge.n	8005c24 <hci_le_set_scan_resp_data+0x8a>
    return BLE_STATUS_TIMEOUT;
 8005c20:	23ff      	movs	r3, #255	; 0xff
 8005c22:	e002      	b.n	8005c2a <hci_le_set_scan_resp_data+0x90>
  
  return status;
 8005c24:	230f      	movs	r3, #15
 8005c26:	18fb      	adds	r3, r7, r3
 8005c28:	781b      	ldrb	r3, [r3, #0]
}
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b012      	add	sp, #72	; 0x48
 8005c30:	bdb0      	pop	{r4, r5, r7, pc}

08005c32 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d001      	beq.n	8005c4c <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e00c      	b.n	8005c66 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3302      	adds	r3, #2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	0019      	movs	r1, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2288      	movs	r2, #136	; 0x88
 8005c58:	5c9b      	ldrb	r3, [r3, r2]
 8005c5a:	3b03      	subs	r3, #3
 8005c5c:	4299      	cmp	r1, r3
 8005c5e:	d001      	beq.n	8005c64 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005c60:	2302      	movs	r3, #2
 8005c62:	e000      	b.n	8005c66 <verify_packet+0x34>
  
  return 0;      
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b004      	add	sp, #16
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005c70:	b5b0      	push	{r4, r5, r7, lr}
 8005c72:	b0a6      	sub	sp, #152	; 0x98
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	0004      	movs	r4, r0
 8005c78:	0008      	movs	r0, r1
 8005c7a:	0011      	movs	r1, r2
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	250e      	movs	r5, #14
 8005c80:	197b      	adds	r3, r7, r5
 8005c82:	1c22      	adds	r2, r4, #0
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	240c      	movs	r4, #12
 8005c88:	193b      	adds	r3, r7, r4
 8005c8a:	1c02      	adds	r2, r0, #0
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	200b      	movs	r0, #11
 8005c90:	183b      	adds	r3, r7, r0
 8005c92:	1c0a      	adds	r2, r1, #0
 8005c94:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005c96:	193b      	adds	r3, r7, r4
 8005c98:	2200      	movs	r2, #0
 8005c9a:	5e9b      	ldrsh	r3, [r3, r2]
 8005c9c:	059b      	lsls	r3, r3, #22
 8005c9e:	0d9b      	lsrs	r3, r3, #22
 8005ca0:	b21a      	sxth	r2, r3
 8005ca2:	197b      	adds	r3, r7, r5
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	029b      	lsls	r3, r3, #10
 8005ca8:	b21b      	sxth	r3, r3
 8005caa:	4313      	orrs	r3, r2
 8005cac:	b21b      	sxth	r3, r3
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	2114      	movs	r1, #20
 8005cb2:	187b      	adds	r3, r7, r1
 8005cb4:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8005cb6:	187b      	adds	r3, r7, r1
 8005cb8:	0004      	movs	r4, r0
 8005cba:	183a      	adds	r2, r7, r0
 8005cbc:	7812      	ldrb	r2, [r2, #0]
 8005cbe:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 8005cc0:	2518      	movs	r5, #24
 8005cc2:	197b      	adds	r3, r7, r5
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005cc8:	197b      	adds	r3, r7, r5
 8005cca:	3301      	adds	r3, #1
 8005ccc:	187a      	adds	r2, r7, r1
 8005cce:	0018      	movs	r0, r3
 8005cd0:	0011      	movs	r1, r2
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	001a      	movs	r2, r3
 8005cd6:	f000 fd9c 	bl	8006812 <memcpy>
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005cda:	197b      	adds	r3, r7, r5
 8005cdc:	3304      	adds	r3, #4
 8005cde:	193a      	adds	r2, r7, r4
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f000 fd94 	bl	8006812 <memcpy>
  
  if (hciContext.io.Send)
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <send_cmd+0xa0>)
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <send_cmd+0x96>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005cf2:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <send_cmd+0xa0>)
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	193a      	adds	r2, r7, r4
 8005cf8:	7812      	ldrb	r2, [r2, #0]
 8005cfa:	b292      	uxth	r2, r2
 8005cfc:	3204      	adds	r2, #4
 8005cfe:	b291      	uxth	r1, r2
 8005d00:	197a      	adds	r2, r7, r5
 8005d02:	0010      	movs	r0, r2
 8005d04:	4798      	blx	r3
  }
}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b026      	add	sp, #152	; 0x98
 8005d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	20000b68 	.word	0x20000b68

08005d14 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8005d1e:	e00c      	b.n	8005d3a <move_list+0x26>
  {
    list_remove_tail(src_list, &tmp_node);
 8005d20:	230c      	movs	r3, #12
 8005d22:	18fa      	adds	r2, r7, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	0011      	movs	r1, r2
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f000 fb13 	bl	8006354 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	0011      	movs	r1, r2
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 fa7f 	bl	8006238 <list_insert_head>
  while (!list_is_empty(src_list))
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f000 fa55 	bl	80061ec <list_is_empty>
 8005d42:	1e03      	subs	r3, r0, #0
 8005d44:	d0ec      	beq.n	8005d20 <move_list+0xc>
  }
}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	46c0      	nop			; (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b004      	add	sp, #16
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005d56:	e00b      	b.n	8005d70 <free_event_list+0x20>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005d58:	1d3a      	adds	r2, r7, #4
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <free_event_list+0x38>)
 8005d5c:	0011      	movs	r1, r2
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 fad1 	bl	8006306 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <free_event_list+0x3c>)
 8005d68:	0011      	movs	r1, r2
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 fa88 	bl	8006280 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005d70:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <free_event_list+0x3c>)
 8005d72:	0018      	movs	r0, r3
 8005d74:	f000 fb15 	bl	80063a2 <list_get_size>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	ddec      	ble.n	8005d58 <free_event_list+0x8>
  }
}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	46c0      	nop			; (mov r8, r8)
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b002      	add	sp, #8
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	200008a4 	.word	0x200008a4
 8005d8c:	2000089c 	.word	0x2000089c

08005d90 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005da0:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <hci_init+0x88>)
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	61da      	str	r2, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005da6:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <hci_init+0x8c>)
 8005da8:	0018      	movs	r0, r3
 8005daa:	f000 fa11 	bl	80061d0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005dae:	4b1c      	ldr	r3, [pc, #112]	; (8005e20 <hci_init+0x90>)
 8005db0:	0018      	movs	r0, r3
 8005db2:	f000 fa0d 	bl	80061d0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8005db6:	f7fa fdbd 	bl	8000934 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005dba:	230f      	movs	r3, #15
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e010      	b.n	8005de6 <hci_init+0x56>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005dc4:	240f      	movs	r4, #15
 8005dc6:	193b      	adds	r3, r7, r4
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	228c      	movs	r2, #140	; 0x8c
 8005dcc:	435a      	muls	r2, r3
 8005dce:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <hci_init+0x94>)
 8005dd0:	18d2      	adds	r2, r2, r3
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <hci_init+0x8c>)
 8005dd4:	0011      	movs	r1, r2
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f000 fa52 	bl	8006280 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005ddc:	193b      	adds	r3, r7, r4
 8005dde:	781a      	ldrb	r2, [r3, #0]
 8005de0:	193b      	adds	r3, r7, r4
 8005de2:	3201      	adds	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	230f      	movs	r3, #15
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d9e9      	bls.n	8005dc4 <hci_init+0x34>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <hci_init+0x88>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <hci_init+0x70>
 8005df8:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <hci_init+0x88>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <hci_init+0x88>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <hci_init+0x7e>
 8005e08:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <hci_init+0x88>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4798      	blx	r3
}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b005      	add	sp, #20
 8005e14:	bd90      	pop	{r4, r7, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	20000b68 	.word	0x20000b68
 8005e1c:	2000089c 	.word	0x2000089c
 8005e20:	200008a4 	.word	0x200008a4
 8005e24:	200008ac 	.word	0x200008ac

08005e28 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <hci_register_io_bus+0x38>)
 8005e36:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <hci_register_io_bus+0x38>)
 8005e3e:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <hci_register_io_bus+0x38>)
 8005e46:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <hci_register_io_bus+0x38>)
 8005e4e:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <hci_register_io_bus+0x38>)
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b002      	add	sp, #8
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000b68 	.word	0x20000b68

08005e64 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08e      	sub	sp, #56	; 0x38
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	000a      	movs	r2, r1
 8005e6e:	1cfb      	adds	r3, r7, #3
 8005e70:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	885b      	ldrh	r3, [r3, #2]
 8005e76:	b21b      	sxth	r3, r3
 8005e78:	059b      	lsls	r3, r3, #22
 8005e7a:	0d9b      	lsrs	r3, r3, #22
 8005e7c:	b21a      	sxth	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	b21b      	sxth	r3, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b21a      	sxth	r2, r3
 8005e8a:	2336      	movs	r3, #54	; 0x36
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	801a      	strh	r2, [r3, #0]
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005e94:	2308      	movs	r3, #8
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f000 f999 	bl	80061d0 <list_init_head>

  free_event_list();
 8005e9e:	f7ff ff57 	bl	8005d50 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8818      	ldrh	r0, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8859      	ldrh	r1, [r3, #2]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f7ff fedc 	bl	8005c70 <send_cmd>
  
  if (async)
 8005eb8:	1cfb      	adds	r3, r7, #3
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <hci_send_req+0x60>
  {
    return 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e0f8      	b.n	80060b6 <hci_send_req+0x252>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005ec4:	f7fc f8b0 	bl	8002028 <HAL_GetTick>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	633b      	str	r3, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005ecc:	f7fc f8ac 	bl	8002028 <HAL_GetTick>
 8005ed0:	0002      	movs	r2, r0
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	1ad2      	subs	r2, r2, r3
 8005ed6:	23fa      	movs	r3, #250	; 0xfa
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d900      	bls.n	8005ee0 <hci_send_req+0x7c>
 8005ede:	e0c2      	b.n	8006066 <hci_send_req+0x202>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005ee0:	4b77      	ldr	r3, [pc, #476]	; (80060c0 <hci_send_req+0x25c>)
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f000 f982 	bl	80061ec <list_is_empty>
 8005ee8:	1e03      	subs	r3, r0, #0
 8005eea:	d000      	beq.n	8005eee <hci_send_req+0x8a>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005eec:	e7ee      	b.n	8005ecc <hci_send_req+0x68>
      {
        break;
 8005eee:	46c0      	nop			; (mov r8, r8)
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	18fa      	adds	r2, r7, r3
 8005ef4:	4b72      	ldr	r3, [pc, #456]	; (80060c0 <hci_send_req+0x25c>)
 8005ef6:	0011      	movs	r1, r2
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f000 fa04 	bl	8006306 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	3308      	adds	r3, #8
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d000      	beq.n	8005f0e <hci_send_req+0xaa>
 8005f0c:	e085      	b.n	800601a <hci_send_req+0x1b6>
    {
      event_pckt = (void *)(hci_hdr->data);
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	3301      	adds	r3, #1
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	3308      	adds	r3, #8
 8005f18:	3303      	adds	r3, #3
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2288      	movs	r2, #136	; 0x88
 8005f20:	5c9b      	ldrb	r3, [r3, r2]
 8005f22:	3b03      	subs	r3, #3
 8005f24:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005f2c:	d057      	beq.n	8005fde <hci_send_req+0x17a>
 8005f2e:	dd00      	ble.n	8005f32 <hci_send_req+0xce>
 8005f30:	e075      	b.n	800601e <hci_send_req+0x1ba>
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d100      	bne.n	8005f38 <hci_send_req+0xd4>
 8005f36:	e098      	b.n	800606a <hci_send_req+0x206>
 8005f38:	dd00      	ble.n	8005f3c <hci_send_req+0xd8>
 8005f3a:	e070      	b.n	800601e <hci_send_req+0x1ba>
 8005f3c:	2b0e      	cmp	r3, #14
 8005f3e:	d02a      	beq.n	8005f96 <hci_send_req+0x132>
 8005f40:	2b0f      	cmp	r3, #15
 8005f42:	d000      	beq.n	8005f46 <hci_send_req+0xe2>
 8005f44:	e06b      	b.n	800601e <hci_send_req+0x1ba>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	789a      	ldrb	r2, [r3, #2]
 8005f4e:	78db      	ldrb	r3, [r3, #3]
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	4313      	orrs	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2236      	movs	r2, #54	; 0x36
 8005f58:	18ba      	adds	r2, r7, r2
 8005f5a:	8812      	ldrh	r2, [r2, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d000      	beq.n	8005f62 <hci_send_req+0xfe>
 8005f60:	e085      	b.n	800606e <hci_send_req+0x20a>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b0f      	cmp	r3, #15
 8005f68:	d004      	beq.n	8005f74 <hci_send_req+0x110>
          if (cs->status) {
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d057      	beq.n	8006022 <hci_send_req+0x1be>
            goto failed;
 8005f72:	e07f      	b.n	8006074 <hci_send_req+0x210>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d900      	bls.n	8005f80 <hci_send_req+0x11c>
 8005f7e:	0013      	movs	r3, r2
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6918      	ldr	r0, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695a      	ldr	r2, [r3, #20]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	0019      	movs	r1, r3
 8005f90:	f000 fc3f 	bl	8006812 <memcpy>
        goto done;
 8005f94:	e081      	b.n	800609a <hci_send_req+0x236>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	785a      	ldrb	r2, [r3, #1]
 8005f9e:	789b      	ldrb	r3, [r3, #2]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2236      	movs	r2, #54	; 0x36
 8005fa8:	18ba      	adds	r2, r7, r2
 8005faa:	8812      	ldrh	r2, [r2, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d160      	bne.n	8006072 <hci_send_req+0x20e>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	3303      	adds	r3, #3
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	3b03      	subs	r3, #3
 8005fba:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d900      	bls.n	8005fc8 <hci_send_req+0x164>
 8005fc6:	0013      	movs	r3, r2
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6918      	ldr	r0, [r3, #16]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	695a      	ldr	r2, [r3, #20]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	0019      	movs	r1, r3
 8005fd8:	f000 fc1b 	bl	8006812 <memcpy>
        goto done;
 8005fdc:	e05d      	b.n	800609a <hci_send_req+0x236>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	001a      	movs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d11a      	bne.n	8006026 <hci_send_req+0x1c2>
          break;
      
        len -= 1;
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d900      	bls.n	8006002 <hci_send_req+0x19e>
 8006000:	0013      	movs	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6918      	ldr	r0, [r3, #16]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	1c59      	adds	r1, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	001a      	movs	r2, r3
 8006014:	f000 fbfd 	bl	8006812 <memcpy>
        goto done;
 8006018:	e03f      	b.n	800609a <hci_send_req+0x236>
        goto failed;
      
      default:      
        break;
      }
    }
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	e004      	b.n	8006028 <hci_send_req+0x1c4>
        break;
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	e002      	b.n	8006028 <hci_send_req+0x1c4>
          break;
 8006022:	46c0      	nop			; (mov r8, r8)
 8006024:	e000      	b.n	8006028 <hci_send_req+0x1c4>
          break;
 8006026:	46c0      	nop			; (mov r8, r8)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8006028:	4b26      	ldr	r3, [pc, #152]	; (80060c4 <hci_send_req+0x260>)
 800602a:	0018      	movs	r0, r3
 800602c:	f000 f8de 	bl	80061ec <list_is_empty>
 8006030:	1e03      	subs	r3, r0, #0
 8006032:	d00e      	beq.n	8006052 <hci_send_req+0x1ee>
 8006034:	4b22      	ldr	r3, [pc, #136]	; (80060c0 <hci_send_req+0x25c>)
 8006036:	0018      	movs	r0, r3
 8006038:	f000 f8d8 	bl	80061ec <list_is_empty>
 800603c:	1e03      	subs	r3, r0, #0
 800603e:	d008      	beq.n	8006052 <hci_send_req+0x1ee>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <hci_send_req+0x260>)
 8006044:	0011      	movs	r1, r2
 8006046:	0018      	movs	r0, r3
 8006048:	f000 f91a 	bl	8006280 <list_insert_tail>
      hciReadPacket=NULL;
 800604c:	2300      	movs	r3, #0
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	e008      	b.n	8006064 <hci_send_req+0x200>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	2308      	movs	r3, #8
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	0011      	movs	r1, r2
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f910 	bl	8006280 <list_insert_tail>
      hciReadPacket=NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	613b      	str	r3, [r7, #16]
  {
 8006064:	e72e      	b.n	8005ec4 <hci_send_req+0x60>
        goto failed;
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	e004      	b.n	8006074 <hci_send_req+0x210>
        goto failed;
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	e002      	b.n	8006074 <hci_send_req+0x210>
          goto failed;
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	e000      	b.n	8006074 <hci_send_req+0x210>
          goto failed;
 8006072:	46c0      	nop			; (mov r8, r8)
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <hci_send_req+0x222>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <hci_send_req+0x260>)
 800607e:	0011      	movs	r1, r2
 8006080:	0018      	movs	r0, r3
 8006082:	f000 f8d9 	bl	8006238 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8006086:	2308      	movs	r3, #8
 8006088:	18fa      	adds	r2, r7, r3
 800608a:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <hci_send_req+0x25c>)
 800608c:	0011      	movs	r1, r2
 800608e:	0018      	movs	r0, r3
 8006090:	f7ff fe40 	bl	8005d14 <move_list>

  return -1;
 8006094:	2301      	movs	r3, #1
 8006096:	425b      	negs	r3, r3
 8006098:	e00d      	b.n	80060b6 <hci_send_req+0x252>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <hci_send_req+0x260>)
 800609e:	0011      	movs	r1, r2
 80060a0:	0018      	movs	r0, r3
 80060a2:	f000 f8c9 	bl	8006238 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80060a6:	2308      	movs	r3, #8
 80060a8:	18fa      	adds	r2, r7, r3
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <hci_send_req+0x25c>)
 80060ac:	0011      	movs	r1, r2
 80060ae:	0018      	movs	r0, r3
 80060b0:	f7ff fe30 	bl	8005d14 <move_list>

  return 0;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b00e      	add	sp, #56	; 0x38
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	200008a4 	.word	0x200008a4
 80060c4:	2000089c 	.word	0x2000089c

080060c8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80060d2:	e015      	b.n	8006100 <hci_user_evt_proc+0x38>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80060d4:	1d3a      	adds	r2, r7, #4
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <hci_user_evt_proc+0x50>)
 80060d8:	0011      	movs	r1, r2
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 f913 	bl	8006306 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80060e0:	4b0e      	ldr	r3, [pc, #56]	; (800611c <hci_user_evt_proc+0x54>)
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <hci_user_evt_proc+0x2c>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <hci_user_evt_proc+0x54>)
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	3208      	adds	r2, #8
 80060f0:	0010      	movs	r0, r2
 80060f2:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <hci_user_evt_proc+0x58>)
 80060f8:	0011      	movs	r1, r2
 80060fa:	0018      	movs	r0, r3
 80060fc:	f000 f8c0 	bl	8006280 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <hci_user_evt_proc+0x50>)
 8006102:	0018      	movs	r0, r3
 8006104:	f000 f872 	bl	80061ec <list_is_empty>
 8006108:	1e03      	subs	r3, r0, #0
 800610a:	d0e3      	beq.n	80060d4 <hci_user_evt_proc+0xc>
  }
}
 800610c:	46c0      	nop			; (mov r8, r8)
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	46bd      	mov	sp, r7
 8006112:	b002      	add	sp, #8
 8006114:	bd80      	pop	{r7, pc}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	200008a4 	.word	0x200008a4
 800611c:	20000b68 	.word	0x20000b68
 8006120:	2000089c 	.word	0x2000089c

08006124 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8006134:	4b23      	ldr	r3, [pc, #140]	; (80061c4 <hci_notify_asynch_evt+0xa0>)
 8006136:	0018      	movs	r0, r3
 8006138:	f000 f858 	bl	80061ec <list_is_empty>
 800613c:	1e03      	subs	r3, r0, #0
 800613e:	d13a      	bne.n	80061b6 <hci_notify_asynch_evt+0x92>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8006140:	230c      	movs	r3, #12
 8006142:	18fa      	adds	r2, r7, r3
 8006144:	4b1f      	ldr	r3, [pc, #124]	; (80061c4 <hci_notify_asynch_evt+0xa0>)
 8006146:	0011      	movs	r1, r2
 8006148:	0018      	movs	r0, r3
 800614a:	f000 f8dc 	bl	8006306 <list_remove_head>
    
    if (hciContext.io.Receive)
 800614e:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <hci_notify_asynch_evt+0xa4>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d031      	beq.n	80061ba <hci_notify_asynch_evt+0x96>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8006156:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <hci_notify_asynch_evt+0xa4>)
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	3208      	adds	r2, #8
 800615e:	2180      	movs	r1, #128	; 0x80
 8006160:	0010      	movs	r0, r2
 8006162:	4798      	blx	r3
 8006164:	0002      	movs	r2, r0
 8006166:	2113      	movs	r1, #19
 8006168:	187b      	adds	r3, r7, r1
 800616a:	701a      	strb	r2, [r3, #0]
      if (data_len > 0)
 800616c:	000a      	movs	r2, r1
 800616e:	18bb      	adds	r3, r7, r2
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d018      	beq.n	80061a8 <hci_notify_asynch_evt+0x84>
      {                    
        hciReadPacket->data_len = data_len;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	18ba      	adds	r2, r7, r2
 800617a:	2188      	movs	r1, #136	; 0x88
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	545a      	strb	r2, [r3, r1]
        if (verify_packet(hciReadPacket) == 0)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	0018      	movs	r0, r3
 8006184:	f7ff fd55 	bl	8005c32 <verify_packet>
 8006188:	1e03      	subs	r3, r0, #0
 800618a:	d106      	bne.n	800619a <hci_notify_asynch_evt+0x76>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <hci_notify_asynch_evt+0xa8>)
 8006190:	0011      	movs	r1, r2
 8006192:	0018      	movs	r0, r3
 8006194:	f000 f874 	bl	8006280 <list_insert_tail>
 8006198:	e00f      	b.n	80061ba <hci_notify_asynch_evt+0x96>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <hci_notify_asynch_evt+0xa0>)
 800619e:	0011      	movs	r1, r2
 80061a0:	0018      	movs	r0, r3
 80061a2:	f000 f849 	bl	8006238 <list_insert_head>
 80061a6:	e008      	b.n	80061ba <hci_notify_asynch_evt+0x96>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <hci_notify_asynch_evt+0xa0>)
 80061ac:	0011      	movs	r1, r2
 80061ae:	0018      	movs	r0, r3
 80061b0:	f000 f842 	bl	8006238 <list_insert_head>
 80061b4:	e001      	b.n	80061ba <hci_notify_asynch_evt+0x96>
      }
    }
  }
  else 
  {
    ret = 1;
 80061b6:	2301      	movs	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80061ba:	697b      	ldr	r3, [r7, #20]

}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b006      	add	sp, #24
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	2000089c 	.word	0x2000089c
 80061c8:	20000b68 	.word	0x20000b68
 80061cc:	200008a4 	.word	0x200008a4

080061d0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	605a      	str	r2, [r3, #4]
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b002      	add	sp, #8
 80061ea:	bd80      	pop	{r7, pc}

080061ec <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f4:	f3ef 8310 	mrs	r3, PRIMASK
 80061f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80061fa:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80061fe:	b672      	cpsid	i
}
 8006200:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	429a      	cmp	r2, r3
 800620a:	d104      	bne.n	8006216 <list_is_empty+0x2a>
  {
    return_value = 1;
 800620c:	2317      	movs	r3, #23
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	2201      	movs	r2, #1
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	e003      	b.n	800621e <list_is_empty+0x32>
  }
  else
  {
    return_value = 0;
 8006216:	2317      	movs	r3, #23
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f383 8810 	msr	PRIMASK, r3
}
 8006228:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800622a:	2317      	movs	r3, #23
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	781b      	ldrb	r3, [r3, #0]
}
 8006230:	0018      	movs	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	b006      	add	sp, #24
 8006236:	bd80      	pop	{r7, pc}

08006238 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006242:	f3ef 8310 	mrs	r3, PRIMASK
 8006246:	60fb      	str	r3, [r7, #12]
  return(result);
 8006248:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800624a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800624c:	b672      	cpsid	i
}
 800624e:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f383 8810 	msr	PRIMASK, r3
}
 8006276:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	46bd      	mov	sp, r7
 800627c:	b006      	add	sp, #24
 800627e:	bd80      	pop	{r7, pc}

08006280 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628a:	f3ef 8310 	mrs	r3, PRIMASK
 800628e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006290:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006294:	b672      	cpsid	i
}
 8006296:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f383 8810 	msr	PRIMASK, r3
}
 80062be:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b006      	add	sp, #24
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d0:	f3ef 8310 	mrs	r3, PRIMASK
 80062d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80062d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80062d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80062da:	b672      	cpsid	i
}
 80062dc:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6852      	ldr	r2, [r2, #4]
 80062f0:	605a      	str	r2, [r3, #4]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f383 8810 	msr	PRIMASK, r3
}
 80062fc:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	46bd      	mov	sp, r7
 8006302:	b006      	add	sp, #24
 8006304:	bd80      	pop	{r7, pc}

08006306 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006310:	f3ef 8310 	mrs	r3, PRIMASK
 8006314:	60fb      	str	r3, [r7, #12]
  return(result);
 8006316:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006318:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800631a:	b672      	cpsid	i
}
 800631c:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	0018      	movs	r0, r3
 800632c:	f7ff ffcc 	bl	80062c8 <list_remove_node>
  (*node)->next = NULL;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2200      	movs	r2, #0
 800633e:	605a      	str	r2, [r3, #4]
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f383 8810 	msr	PRIMASK, r3
}
 800634a:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800634c:	46c0      	nop			; (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	b006      	add	sp, #24
 8006352:	bd80      	pop	{r7, pc}

08006354 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800635e:	f3ef 8310 	mrs	r3, PRIMASK
 8006362:	60fb      	str	r3, [r7, #12]
  return(result);
 8006364:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006366:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006368:	b672      	cpsid	i
}
 800636a:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	0018      	movs	r0, r3
 800637a:	f7ff ffa5 	bl	80062c8 <list_remove_node>
  (*node)->next = NULL;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f383 8810 	msr	PRIMASK, r3
}
 8006398:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	46bd      	mov	sp, r7
 800639e:	b006      	add	sp, #24
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b088      	sub	sp, #32
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  int size = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ae:	f3ef 8310 	mrs	r3, PRIMASK
 80063b2:	613b      	str	r3, [r7, #16]
  return(result);
 80063b4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80063b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80063b8:	b672      	cpsid	i
}
 80063ba:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80063c2:	e005      	b.n	80063d0 <list_get_size+0x2e>
  {
    size++;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	3301      	adds	r3, #1
 80063c8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d1f5      	bne.n	80063c4 <list_get_size+0x22>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f383 8810 	msr	PRIMASK, r3
}
 80063e2:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80063e4:	69fb      	ldr	r3, [r7, #28]
}
 80063e6:	0018      	movs	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b008      	add	sp, #32
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <__errno>:
 80063f0:	4b01      	ldr	r3, [pc, #4]	; (80063f8 <__errno+0x8>)
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	4770      	bx	lr
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	20000050 	.word	0x20000050

080063fc <__sflush_r>:
 80063fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063fe:	898b      	ldrh	r3, [r1, #12]
 8006400:	0005      	movs	r5, r0
 8006402:	000c      	movs	r4, r1
 8006404:	071a      	lsls	r2, r3, #28
 8006406:	d45f      	bmi.n	80064c8 <__sflush_r+0xcc>
 8006408:	684a      	ldr	r2, [r1, #4]
 800640a:	2a00      	cmp	r2, #0
 800640c:	dc04      	bgt.n	8006418 <__sflush_r+0x1c>
 800640e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006410:	2a00      	cmp	r2, #0
 8006412:	dc01      	bgt.n	8006418 <__sflush_r+0x1c>
 8006414:	2000      	movs	r0, #0
 8006416:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006418:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800641a:	2f00      	cmp	r7, #0
 800641c:	d0fa      	beq.n	8006414 <__sflush_r+0x18>
 800641e:	2200      	movs	r2, #0
 8006420:	2180      	movs	r1, #128	; 0x80
 8006422:	682e      	ldr	r6, [r5, #0]
 8006424:	602a      	str	r2, [r5, #0]
 8006426:	001a      	movs	r2, r3
 8006428:	0149      	lsls	r1, r1, #5
 800642a:	400a      	ands	r2, r1
 800642c:	420b      	tst	r3, r1
 800642e:	d034      	beq.n	800649a <__sflush_r+0x9e>
 8006430:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	075b      	lsls	r3, r3, #29
 8006436:	d506      	bpl.n	8006446 <__sflush_r+0x4a>
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	1ac0      	subs	r0, r0, r3
 800643c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <__sflush_r+0x4a>
 8006442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006444:	1ac0      	subs	r0, r0, r3
 8006446:	0002      	movs	r2, r0
 8006448:	6a21      	ldr	r1, [r4, #32]
 800644a:	2300      	movs	r3, #0
 800644c:	0028      	movs	r0, r5
 800644e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006450:	47b8      	blx	r7
 8006452:	89a1      	ldrh	r1, [r4, #12]
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d106      	bne.n	8006466 <__sflush_r+0x6a>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	2b1d      	cmp	r3, #29
 800645c:	d831      	bhi.n	80064c2 <__sflush_r+0xc6>
 800645e:	4a2c      	ldr	r2, [pc, #176]	; (8006510 <__sflush_r+0x114>)
 8006460:	40da      	lsrs	r2, r3
 8006462:	07d3      	lsls	r3, r2, #31
 8006464:	d52d      	bpl.n	80064c2 <__sflush_r+0xc6>
 8006466:	2300      	movs	r3, #0
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	04cb      	lsls	r3, r1, #19
 8006470:	d505      	bpl.n	800647e <__sflush_r+0x82>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d102      	bne.n	800647c <__sflush_r+0x80>
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d100      	bne.n	800647e <__sflush_r+0x82>
 800647c:	6560      	str	r0, [r4, #84]	; 0x54
 800647e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006480:	602e      	str	r6, [r5, #0]
 8006482:	2900      	cmp	r1, #0
 8006484:	d0c6      	beq.n	8006414 <__sflush_r+0x18>
 8006486:	0023      	movs	r3, r4
 8006488:	3344      	adds	r3, #68	; 0x44
 800648a:	4299      	cmp	r1, r3
 800648c:	d002      	beq.n	8006494 <__sflush_r+0x98>
 800648e:	0028      	movs	r0, r5
 8006490:	f000 f9d0 	bl	8006834 <_free_r>
 8006494:	2000      	movs	r0, #0
 8006496:	6360      	str	r0, [r4, #52]	; 0x34
 8006498:	e7bd      	b.n	8006416 <__sflush_r+0x1a>
 800649a:	2301      	movs	r3, #1
 800649c:	0028      	movs	r0, r5
 800649e:	6a21      	ldr	r1, [r4, #32]
 80064a0:	47b8      	blx	r7
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d1c5      	bne.n	8006432 <__sflush_r+0x36>
 80064a6:	682b      	ldr	r3, [r5, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0c2      	beq.n	8006432 <__sflush_r+0x36>
 80064ac:	2b1d      	cmp	r3, #29
 80064ae:	d001      	beq.n	80064b4 <__sflush_r+0xb8>
 80064b0:	2b16      	cmp	r3, #22
 80064b2:	d101      	bne.n	80064b8 <__sflush_r+0xbc>
 80064b4:	602e      	str	r6, [r5, #0]
 80064b6:	e7ad      	b.n	8006414 <__sflush_r+0x18>
 80064b8:	2340      	movs	r3, #64	; 0x40
 80064ba:	89a2      	ldrh	r2, [r4, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	81a3      	strh	r3, [r4, #12]
 80064c0:	e7a9      	b.n	8006416 <__sflush_r+0x1a>
 80064c2:	2340      	movs	r3, #64	; 0x40
 80064c4:	430b      	orrs	r3, r1
 80064c6:	e7fa      	b.n	80064be <__sflush_r+0xc2>
 80064c8:	690f      	ldr	r7, [r1, #16]
 80064ca:	2f00      	cmp	r7, #0
 80064cc:	d0a2      	beq.n	8006414 <__sflush_r+0x18>
 80064ce:	680a      	ldr	r2, [r1, #0]
 80064d0:	600f      	str	r7, [r1, #0]
 80064d2:	1bd2      	subs	r2, r2, r7
 80064d4:	9201      	str	r2, [sp, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	079b      	lsls	r3, r3, #30
 80064da:	d100      	bne.n	80064de <__sflush_r+0xe2>
 80064dc:	694a      	ldr	r2, [r1, #20]
 80064de:	60a2      	str	r2, [r4, #8]
 80064e0:	9b01      	ldr	r3, [sp, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dc00      	bgt.n	80064e8 <__sflush_r+0xec>
 80064e6:	e795      	b.n	8006414 <__sflush_r+0x18>
 80064e8:	003a      	movs	r2, r7
 80064ea:	0028      	movs	r0, r5
 80064ec:	9b01      	ldr	r3, [sp, #4]
 80064ee:	6a21      	ldr	r1, [r4, #32]
 80064f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064f2:	47b0      	blx	r6
 80064f4:	2800      	cmp	r0, #0
 80064f6:	dc06      	bgt.n	8006506 <__sflush_r+0x10a>
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	2001      	movs	r0, #1
 80064fc:	89a2      	ldrh	r2, [r4, #12]
 80064fe:	4240      	negs	r0, r0
 8006500:	4313      	orrs	r3, r2
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	e787      	b.n	8006416 <__sflush_r+0x1a>
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	183f      	adds	r7, r7, r0
 800650a:	1a1b      	subs	r3, r3, r0
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	e7e7      	b.n	80064e0 <__sflush_r+0xe4>
 8006510:	20400001 	.word	0x20400001

08006514 <_fflush_r>:
 8006514:	690b      	ldr	r3, [r1, #16]
 8006516:	b570      	push	{r4, r5, r6, lr}
 8006518:	0005      	movs	r5, r0
 800651a:	000c      	movs	r4, r1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <_fflush_r+0x12>
 8006520:	2500      	movs	r5, #0
 8006522:	0028      	movs	r0, r5
 8006524:	bd70      	pop	{r4, r5, r6, pc}
 8006526:	2800      	cmp	r0, #0
 8006528:	d004      	beq.n	8006534 <_fflush_r+0x20>
 800652a:	6983      	ldr	r3, [r0, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <_fflush_r+0x20>
 8006530:	f000 f8a8 	bl	8006684 <__sinit>
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <_fflush_r+0x74>)
 8006536:	429c      	cmp	r4, r3
 8006538:	d11b      	bne.n	8006572 <_fflush_r+0x5e>
 800653a:	686c      	ldr	r4, [r5, #4]
 800653c:	220c      	movs	r2, #12
 800653e:	5ea3      	ldrsh	r3, [r4, r2]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0ed      	beq.n	8006520 <_fflush_r+0xc>
 8006544:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006546:	07d2      	lsls	r2, r2, #31
 8006548:	d404      	bmi.n	8006554 <_fflush_r+0x40>
 800654a:	059b      	lsls	r3, r3, #22
 800654c:	d402      	bmi.n	8006554 <_fflush_r+0x40>
 800654e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006550:	f000 f95d 	bl	800680e <__retarget_lock_acquire_recursive>
 8006554:	0028      	movs	r0, r5
 8006556:	0021      	movs	r1, r4
 8006558:	f7ff ff50 	bl	80063fc <__sflush_r>
 800655c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800655e:	0005      	movs	r5, r0
 8006560:	07db      	lsls	r3, r3, #31
 8006562:	d4de      	bmi.n	8006522 <_fflush_r+0xe>
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	059b      	lsls	r3, r3, #22
 8006568:	d4db      	bmi.n	8006522 <_fflush_r+0xe>
 800656a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656c:	f000 f950 	bl	8006810 <__retarget_lock_release_recursive>
 8006570:	e7d7      	b.n	8006522 <_fflush_r+0xe>
 8006572:	4b06      	ldr	r3, [pc, #24]	; (800658c <_fflush_r+0x78>)
 8006574:	429c      	cmp	r4, r3
 8006576:	d101      	bne.n	800657c <_fflush_r+0x68>
 8006578:	68ac      	ldr	r4, [r5, #8]
 800657a:	e7df      	b.n	800653c <_fflush_r+0x28>
 800657c:	4b04      	ldr	r3, [pc, #16]	; (8006590 <_fflush_r+0x7c>)
 800657e:	429c      	cmp	r4, r3
 8006580:	d1dc      	bne.n	800653c <_fflush_r+0x28>
 8006582:	68ec      	ldr	r4, [r5, #12]
 8006584:	e7da      	b.n	800653c <_fflush_r+0x28>
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	08007970 	.word	0x08007970
 800658c:	08007990 	.word	0x08007990
 8006590:	08007950 	.word	0x08007950

08006594 <fflush>:
 8006594:	0001      	movs	r1, r0
 8006596:	b510      	push	{r4, lr}
 8006598:	2800      	cmp	r0, #0
 800659a:	d105      	bne.n	80065a8 <fflush+0x14>
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <fflush+0x20>)
 800659e:	4906      	ldr	r1, [pc, #24]	; (80065b8 <fflush+0x24>)
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f000 f8ef 	bl	8006784 <_fwalk_reent>
 80065a6:	bd10      	pop	{r4, pc}
 80065a8:	4b04      	ldr	r3, [pc, #16]	; (80065bc <fflush+0x28>)
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	f7ff ffb2 	bl	8006514 <_fflush_r>
 80065b0:	e7f9      	b.n	80065a6 <fflush+0x12>
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	080079b0 	.word	0x080079b0
 80065b8:	08006515 	.word	0x08006515
 80065bc:	20000050 	.word	0x20000050

080065c0 <std>:
 80065c0:	2300      	movs	r3, #0
 80065c2:	b510      	push	{r4, lr}
 80065c4:	0004      	movs	r4, r0
 80065c6:	6003      	str	r3, [r0, #0]
 80065c8:	6043      	str	r3, [r0, #4]
 80065ca:	6083      	str	r3, [r0, #8]
 80065cc:	8181      	strh	r1, [r0, #12]
 80065ce:	6643      	str	r3, [r0, #100]	; 0x64
 80065d0:	0019      	movs	r1, r3
 80065d2:	81c2      	strh	r2, [r0, #14]
 80065d4:	6103      	str	r3, [r0, #16]
 80065d6:	6143      	str	r3, [r0, #20]
 80065d8:	6183      	str	r3, [r0, #24]
 80065da:	2208      	movs	r2, #8
 80065dc:	305c      	adds	r0, #92	; 0x5c
 80065de:	f000 f921 	bl	8006824 <memset>
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <std+0x38>)
 80065e4:	6224      	str	r4, [r4, #32]
 80065e6:	6263      	str	r3, [r4, #36]	; 0x24
 80065e8:	4b04      	ldr	r3, [pc, #16]	; (80065fc <std+0x3c>)
 80065ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <std+0x40>)
 80065ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <std+0x44>)
 80065f2:	6323      	str	r3, [r4, #48]	; 0x30
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	08006a51 	.word	0x08006a51
 80065fc:	08006a79 	.word	0x08006a79
 8006600:	08006ab1 	.word	0x08006ab1
 8006604:	08006add 	.word	0x08006add

08006608 <_cleanup_r>:
 8006608:	b510      	push	{r4, lr}
 800660a:	4902      	ldr	r1, [pc, #8]	; (8006614 <_cleanup_r+0xc>)
 800660c:	f000 f8ba 	bl	8006784 <_fwalk_reent>
 8006610:	bd10      	pop	{r4, pc}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	08006515 	.word	0x08006515

08006618 <__sfmoreglue>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	2568      	movs	r5, #104	; 0x68
 800661c:	1e4a      	subs	r2, r1, #1
 800661e:	4355      	muls	r5, r2
 8006620:	000e      	movs	r6, r1
 8006622:	0029      	movs	r1, r5
 8006624:	3174      	adds	r1, #116	; 0x74
 8006626:	f000 f971 	bl	800690c <_malloc_r>
 800662a:	1e04      	subs	r4, r0, #0
 800662c:	d008      	beq.n	8006640 <__sfmoreglue+0x28>
 800662e:	2100      	movs	r1, #0
 8006630:	002a      	movs	r2, r5
 8006632:	6001      	str	r1, [r0, #0]
 8006634:	6046      	str	r6, [r0, #4]
 8006636:	300c      	adds	r0, #12
 8006638:	60a0      	str	r0, [r4, #8]
 800663a:	3268      	adds	r2, #104	; 0x68
 800663c:	f000 f8f2 	bl	8006824 <memset>
 8006640:	0020      	movs	r0, r4
 8006642:	bd70      	pop	{r4, r5, r6, pc}

08006644 <__sfp_lock_acquire>:
 8006644:	b510      	push	{r4, lr}
 8006646:	4802      	ldr	r0, [pc, #8]	; (8006650 <__sfp_lock_acquire+0xc>)
 8006648:	f000 f8e1 	bl	800680e <__retarget_lock_acquire_recursive>
 800664c:	bd10      	pop	{r4, pc}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	20000b89 	.word	0x20000b89

08006654 <__sfp_lock_release>:
 8006654:	b510      	push	{r4, lr}
 8006656:	4802      	ldr	r0, [pc, #8]	; (8006660 <__sfp_lock_release+0xc>)
 8006658:	f000 f8da 	bl	8006810 <__retarget_lock_release_recursive>
 800665c:	bd10      	pop	{r4, pc}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	20000b89 	.word	0x20000b89

08006664 <__sinit_lock_acquire>:
 8006664:	b510      	push	{r4, lr}
 8006666:	4802      	ldr	r0, [pc, #8]	; (8006670 <__sinit_lock_acquire+0xc>)
 8006668:	f000 f8d1 	bl	800680e <__retarget_lock_acquire_recursive>
 800666c:	bd10      	pop	{r4, pc}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	20000b8a 	.word	0x20000b8a

08006674 <__sinit_lock_release>:
 8006674:	b510      	push	{r4, lr}
 8006676:	4802      	ldr	r0, [pc, #8]	; (8006680 <__sinit_lock_release+0xc>)
 8006678:	f000 f8ca 	bl	8006810 <__retarget_lock_release_recursive>
 800667c:	bd10      	pop	{r4, pc}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	20000b8a 	.word	0x20000b8a

08006684 <__sinit>:
 8006684:	b513      	push	{r0, r1, r4, lr}
 8006686:	0004      	movs	r4, r0
 8006688:	f7ff ffec 	bl	8006664 <__sinit_lock_acquire>
 800668c:	69a3      	ldr	r3, [r4, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <__sinit+0x14>
 8006692:	f7ff ffef 	bl	8006674 <__sinit_lock_release>
 8006696:	bd13      	pop	{r0, r1, r4, pc}
 8006698:	64a3      	str	r3, [r4, #72]	; 0x48
 800669a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800669c:	6523      	str	r3, [r4, #80]	; 0x50
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <__sinit+0x68>)
 80066a0:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <__sinit+0x6c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	42a3      	cmp	r3, r4
 80066aa:	d101      	bne.n	80066b0 <__sinit+0x2c>
 80066ac:	2301      	movs	r3, #1
 80066ae:	61a3      	str	r3, [r4, #24]
 80066b0:	0020      	movs	r0, r4
 80066b2:	f000 f81f 	bl	80066f4 <__sfp>
 80066b6:	6060      	str	r0, [r4, #4]
 80066b8:	0020      	movs	r0, r4
 80066ba:	f000 f81b 	bl	80066f4 <__sfp>
 80066be:	60a0      	str	r0, [r4, #8]
 80066c0:	0020      	movs	r0, r4
 80066c2:	f000 f817 	bl	80066f4 <__sfp>
 80066c6:	2200      	movs	r2, #0
 80066c8:	2104      	movs	r1, #4
 80066ca:	60e0      	str	r0, [r4, #12]
 80066cc:	6860      	ldr	r0, [r4, #4]
 80066ce:	f7ff ff77 	bl	80065c0 <std>
 80066d2:	2201      	movs	r2, #1
 80066d4:	2109      	movs	r1, #9
 80066d6:	68a0      	ldr	r0, [r4, #8]
 80066d8:	f7ff ff72 	bl	80065c0 <std>
 80066dc:	2202      	movs	r2, #2
 80066de:	2112      	movs	r1, #18
 80066e0:	68e0      	ldr	r0, [r4, #12]
 80066e2:	f7ff ff6d 	bl	80065c0 <std>
 80066e6:	2301      	movs	r3, #1
 80066e8:	61a3      	str	r3, [r4, #24]
 80066ea:	e7d2      	b.n	8006692 <__sinit+0xe>
 80066ec:	080079b0 	.word	0x080079b0
 80066f0:	08006609 	.word	0x08006609

080066f4 <__sfp>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	0007      	movs	r7, r0
 80066f8:	f7ff ffa4 	bl	8006644 <__sfp_lock_acquire>
 80066fc:	4b1f      	ldr	r3, [pc, #124]	; (800677c <__sfp+0x88>)
 80066fe:	681e      	ldr	r6, [r3, #0]
 8006700:	69b3      	ldr	r3, [r6, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <__sfp+0x18>
 8006706:	0030      	movs	r0, r6
 8006708:	f7ff ffbc 	bl	8006684 <__sinit>
 800670c:	3648      	adds	r6, #72	; 0x48
 800670e:	68b4      	ldr	r4, [r6, #8]
 8006710:	6873      	ldr	r3, [r6, #4]
 8006712:	3b01      	subs	r3, #1
 8006714:	d504      	bpl.n	8006720 <__sfp+0x2c>
 8006716:	6833      	ldr	r3, [r6, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d022      	beq.n	8006762 <__sfp+0x6e>
 800671c:	6836      	ldr	r6, [r6, #0]
 800671e:	e7f6      	b.n	800670e <__sfp+0x1a>
 8006720:	220c      	movs	r2, #12
 8006722:	5ea5      	ldrsh	r5, [r4, r2]
 8006724:	2d00      	cmp	r5, #0
 8006726:	d11a      	bne.n	800675e <__sfp+0x6a>
 8006728:	0020      	movs	r0, r4
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <__sfp+0x8c>)
 800672c:	3058      	adds	r0, #88	; 0x58
 800672e:	60e3      	str	r3, [r4, #12]
 8006730:	6665      	str	r5, [r4, #100]	; 0x64
 8006732:	f000 f86b 	bl	800680c <__retarget_lock_init_recursive>
 8006736:	f7ff ff8d 	bl	8006654 <__sfp_lock_release>
 800673a:	0020      	movs	r0, r4
 800673c:	2208      	movs	r2, #8
 800673e:	0029      	movs	r1, r5
 8006740:	6025      	str	r5, [r4, #0]
 8006742:	60a5      	str	r5, [r4, #8]
 8006744:	6065      	str	r5, [r4, #4]
 8006746:	6125      	str	r5, [r4, #16]
 8006748:	6165      	str	r5, [r4, #20]
 800674a:	61a5      	str	r5, [r4, #24]
 800674c:	305c      	adds	r0, #92	; 0x5c
 800674e:	f000 f869 	bl	8006824 <memset>
 8006752:	6365      	str	r5, [r4, #52]	; 0x34
 8006754:	63a5      	str	r5, [r4, #56]	; 0x38
 8006756:	64a5      	str	r5, [r4, #72]	; 0x48
 8006758:	64e5      	str	r5, [r4, #76]	; 0x4c
 800675a:	0020      	movs	r0, r4
 800675c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800675e:	3468      	adds	r4, #104	; 0x68
 8006760:	e7d7      	b.n	8006712 <__sfp+0x1e>
 8006762:	2104      	movs	r1, #4
 8006764:	0038      	movs	r0, r7
 8006766:	f7ff ff57 	bl	8006618 <__sfmoreglue>
 800676a:	1e04      	subs	r4, r0, #0
 800676c:	6030      	str	r0, [r6, #0]
 800676e:	d1d5      	bne.n	800671c <__sfp+0x28>
 8006770:	f7ff ff70 	bl	8006654 <__sfp_lock_release>
 8006774:	230c      	movs	r3, #12
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	e7ef      	b.n	800675a <__sfp+0x66>
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	080079b0 	.word	0x080079b0
 8006780:	ffff0001 	.word	0xffff0001

08006784 <_fwalk_reent>:
 8006784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006786:	0004      	movs	r4, r0
 8006788:	0006      	movs	r6, r0
 800678a:	2700      	movs	r7, #0
 800678c:	9101      	str	r1, [sp, #4]
 800678e:	3448      	adds	r4, #72	; 0x48
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	68a5      	ldr	r5, [r4, #8]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	9b00      	ldr	r3, [sp, #0]
 8006798:	3b01      	subs	r3, #1
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	d504      	bpl.n	80067a8 <_fwalk_reent+0x24>
 800679e:	6824      	ldr	r4, [r4, #0]
 80067a0:	2c00      	cmp	r4, #0
 80067a2:	d1f5      	bne.n	8006790 <_fwalk_reent+0xc>
 80067a4:	0038      	movs	r0, r7
 80067a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067a8:	89ab      	ldrh	r3, [r5, #12]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d908      	bls.n	80067c0 <_fwalk_reent+0x3c>
 80067ae:	220e      	movs	r2, #14
 80067b0:	5eab      	ldrsh	r3, [r5, r2]
 80067b2:	3301      	adds	r3, #1
 80067b4:	d004      	beq.n	80067c0 <_fwalk_reent+0x3c>
 80067b6:	0029      	movs	r1, r5
 80067b8:	0030      	movs	r0, r6
 80067ba:	9b01      	ldr	r3, [sp, #4]
 80067bc:	4798      	blx	r3
 80067be:	4307      	orrs	r7, r0
 80067c0:	3568      	adds	r5, #104	; 0x68
 80067c2:	e7e8      	b.n	8006796 <_fwalk_reent+0x12>

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	2600      	movs	r6, #0
 80067c8:	4d0c      	ldr	r5, [pc, #48]	; (80067fc <__libc_init_array+0x38>)
 80067ca:	4c0d      	ldr	r4, [pc, #52]	; (8006800 <__libc_init_array+0x3c>)
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	2600      	movs	r6, #0
 80067d6:	f000 fe33 	bl	8007440 <_init>
 80067da:	4d0a      	ldr	r5, [pc, #40]	; (8006804 <__libc_init_array+0x40>)
 80067dc:	4c0a      	ldr	r4, [pc, #40]	; (8006808 <__libc_init_array+0x44>)
 80067de:	1b64      	subs	r4, r4, r5
 80067e0:	10a4      	asrs	r4, r4, #2
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	00b3      	lsls	r3, r6, #2
 80067ea:	58eb      	ldr	r3, [r5, r3]
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	00b3      	lsls	r3, r6, #2
 80067f4:	58eb      	ldr	r3, [r5, r3]
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	080079f0 	.word	0x080079f0
 8006800:	080079f0 	.word	0x080079f0
 8006804:	080079f0 	.word	0x080079f0
 8006808:	080079f4 	.word	0x080079f4

0800680c <__retarget_lock_init_recursive>:
 800680c:	4770      	bx	lr

0800680e <__retarget_lock_acquire_recursive>:
 800680e:	4770      	bx	lr

08006810 <__retarget_lock_release_recursive>:
 8006810:	4770      	bx	lr

08006812 <memcpy>:
 8006812:	2300      	movs	r3, #0
 8006814:	b510      	push	{r4, lr}
 8006816:	429a      	cmp	r2, r3
 8006818:	d100      	bne.n	800681c <memcpy+0xa>
 800681a:	bd10      	pop	{r4, pc}
 800681c:	5ccc      	ldrb	r4, [r1, r3]
 800681e:	54c4      	strb	r4, [r0, r3]
 8006820:	3301      	adds	r3, #1
 8006822:	e7f8      	b.n	8006816 <memcpy+0x4>

08006824 <memset>:
 8006824:	0003      	movs	r3, r0
 8006826:	1882      	adds	r2, r0, r2
 8006828:	4293      	cmp	r3, r2
 800682a:	d100      	bne.n	800682e <memset+0xa>
 800682c:	4770      	bx	lr
 800682e:	7019      	strb	r1, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	e7f9      	b.n	8006828 <memset+0x4>

08006834 <_free_r>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	0005      	movs	r5, r0
 8006838:	2900      	cmp	r1, #0
 800683a:	d010      	beq.n	800685e <_free_r+0x2a>
 800683c:	1f0c      	subs	r4, r1, #4
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	da00      	bge.n	8006846 <_free_r+0x12>
 8006844:	18e4      	adds	r4, r4, r3
 8006846:	0028      	movs	r0, r5
 8006848:	f000 f988 	bl	8006b5c <__malloc_lock>
 800684c:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <_free_r+0x90>)
 800684e:	6813      	ldr	r3, [r2, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d105      	bne.n	8006860 <_free_r+0x2c>
 8006854:	6063      	str	r3, [r4, #4]
 8006856:	6014      	str	r4, [r2, #0]
 8006858:	0028      	movs	r0, r5
 800685a:	f000 f987 	bl	8006b6c <__malloc_unlock>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	42a3      	cmp	r3, r4
 8006862:	d908      	bls.n	8006876 <_free_r+0x42>
 8006864:	6821      	ldr	r1, [r4, #0]
 8006866:	1860      	adds	r0, r4, r1
 8006868:	4283      	cmp	r3, r0
 800686a:	d1f3      	bne.n	8006854 <_free_r+0x20>
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	1841      	adds	r1, r0, r1
 8006872:	6021      	str	r1, [r4, #0]
 8006874:	e7ee      	b.n	8006854 <_free_r+0x20>
 8006876:	001a      	movs	r2, r3
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <_free_r+0x4e>
 800687e:	42a3      	cmp	r3, r4
 8006880:	d9f9      	bls.n	8006876 <_free_r+0x42>
 8006882:	6811      	ldr	r1, [r2, #0]
 8006884:	1850      	adds	r0, r2, r1
 8006886:	42a0      	cmp	r0, r4
 8006888:	d10b      	bne.n	80068a2 <_free_r+0x6e>
 800688a:	6820      	ldr	r0, [r4, #0]
 800688c:	1809      	adds	r1, r1, r0
 800688e:	1850      	adds	r0, r2, r1
 8006890:	6011      	str	r1, [r2, #0]
 8006892:	4283      	cmp	r3, r0
 8006894:	d1e0      	bne.n	8006858 <_free_r+0x24>
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	1841      	adds	r1, r0, r1
 800689c:	6011      	str	r1, [r2, #0]
 800689e:	6053      	str	r3, [r2, #4]
 80068a0:	e7da      	b.n	8006858 <_free_r+0x24>
 80068a2:	42a0      	cmp	r0, r4
 80068a4:	d902      	bls.n	80068ac <_free_r+0x78>
 80068a6:	230c      	movs	r3, #12
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	e7d5      	b.n	8006858 <_free_r+0x24>
 80068ac:	6821      	ldr	r1, [r4, #0]
 80068ae:	1860      	adds	r0, r4, r1
 80068b0:	4283      	cmp	r3, r0
 80068b2:	d103      	bne.n	80068bc <_free_r+0x88>
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	1841      	adds	r1, r0, r1
 80068ba:	6021      	str	r1, [r4, #0]
 80068bc:	6063      	str	r3, [r4, #4]
 80068be:	6054      	str	r4, [r2, #4]
 80068c0:	e7ca      	b.n	8006858 <_free_r+0x24>
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	20000b8c 	.word	0x20000b8c

080068c8 <sbrk_aligned>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	4e0f      	ldr	r6, [pc, #60]	; (8006908 <sbrk_aligned+0x40>)
 80068cc:	000d      	movs	r5, r1
 80068ce:	6831      	ldr	r1, [r6, #0]
 80068d0:	0004      	movs	r4, r0
 80068d2:	2900      	cmp	r1, #0
 80068d4:	d102      	bne.n	80068dc <sbrk_aligned+0x14>
 80068d6:	f000 f8a9 	bl	8006a2c <_sbrk_r>
 80068da:	6030      	str	r0, [r6, #0]
 80068dc:	0029      	movs	r1, r5
 80068de:	0020      	movs	r0, r4
 80068e0:	f000 f8a4 	bl	8006a2c <_sbrk_r>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d00a      	beq.n	80068fe <sbrk_aligned+0x36>
 80068e8:	2303      	movs	r3, #3
 80068ea:	1cc5      	adds	r5, r0, #3
 80068ec:	439d      	bics	r5, r3
 80068ee:	42a8      	cmp	r0, r5
 80068f0:	d007      	beq.n	8006902 <sbrk_aligned+0x3a>
 80068f2:	1a29      	subs	r1, r5, r0
 80068f4:	0020      	movs	r0, r4
 80068f6:	f000 f899 	bl	8006a2c <_sbrk_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	d101      	bne.n	8006902 <sbrk_aligned+0x3a>
 80068fe:	2501      	movs	r5, #1
 8006900:	426d      	negs	r5, r5
 8006902:	0028      	movs	r0, r5
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	20000b90 	.word	0x20000b90

0800690c <_malloc_r>:
 800690c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800690e:	2203      	movs	r2, #3
 8006910:	1ccb      	adds	r3, r1, #3
 8006912:	4393      	bics	r3, r2
 8006914:	3308      	adds	r3, #8
 8006916:	0006      	movs	r6, r0
 8006918:	001f      	movs	r7, r3
 800691a:	2b0c      	cmp	r3, #12
 800691c:	d232      	bcs.n	8006984 <_malloc_r+0x78>
 800691e:	270c      	movs	r7, #12
 8006920:	42b9      	cmp	r1, r7
 8006922:	d831      	bhi.n	8006988 <_malloc_r+0x7c>
 8006924:	0030      	movs	r0, r6
 8006926:	f000 f919 	bl	8006b5c <__malloc_lock>
 800692a:	4d32      	ldr	r5, [pc, #200]	; (80069f4 <_malloc_r+0xe8>)
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	001c      	movs	r4, r3
 8006930:	2c00      	cmp	r4, #0
 8006932:	d12e      	bne.n	8006992 <_malloc_r+0x86>
 8006934:	0039      	movs	r1, r7
 8006936:	0030      	movs	r0, r6
 8006938:	f7ff ffc6 	bl	80068c8 <sbrk_aligned>
 800693c:	0004      	movs	r4, r0
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d11e      	bne.n	8006980 <_malloc_r+0x74>
 8006942:	682c      	ldr	r4, [r5, #0]
 8006944:	0025      	movs	r5, r4
 8006946:	2d00      	cmp	r5, #0
 8006948:	d14a      	bne.n	80069e0 <_malloc_r+0xd4>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	0029      	movs	r1, r5
 800694e:	18e3      	adds	r3, r4, r3
 8006950:	0030      	movs	r0, r6
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	f000 f86a 	bl	8006a2c <_sbrk_r>
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	4283      	cmp	r3, r0
 800695c:	d143      	bne.n	80069e6 <_malloc_r+0xda>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	3703      	adds	r7, #3
 8006962:	1aff      	subs	r7, r7, r3
 8006964:	2303      	movs	r3, #3
 8006966:	439f      	bics	r7, r3
 8006968:	3708      	adds	r7, #8
 800696a:	2f0c      	cmp	r7, #12
 800696c:	d200      	bcs.n	8006970 <_malloc_r+0x64>
 800696e:	270c      	movs	r7, #12
 8006970:	0039      	movs	r1, r7
 8006972:	0030      	movs	r0, r6
 8006974:	f7ff ffa8 	bl	80068c8 <sbrk_aligned>
 8006978:	1c43      	adds	r3, r0, #1
 800697a:	d034      	beq.n	80069e6 <_malloc_r+0xda>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	19df      	adds	r7, r3, r7
 8006980:	6027      	str	r7, [r4, #0]
 8006982:	e013      	b.n	80069ac <_malloc_r+0xa0>
 8006984:	2b00      	cmp	r3, #0
 8006986:	dacb      	bge.n	8006920 <_malloc_r+0x14>
 8006988:	230c      	movs	r3, #12
 800698a:	2500      	movs	r5, #0
 800698c:	6033      	str	r3, [r6, #0]
 800698e:	0028      	movs	r0, r5
 8006990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006992:	6822      	ldr	r2, [r4, #0]
 8006994:	1bd1      	subs	r1, r2, r7
 8006996:	d420      	bmi.n	80069da <_malloc_r+0xce>
 8006998:	290b      	cmp	r1, #11
 800699a:	d917      	bls.n	80069cc <_malloc_r+0xc0>
 800699c:	19e2      	adds	r2, r4, r7
 800699e:	6027      	str	r7, [r4, #0]
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d111      	bne.n	80069c8 <_malloc_r+0xbc>
 80069a4:	602a      	str	r2, [r5, #0]
 80069a6:	6863      	ldr	r3, [r4, #4]
 80069a8:	6011      	str	r1, [r2, #0]
 80069aa:	6053      	str	r3, [r2, #4]
 80069ac:	0030      	movs	r0, r6
 80069ae:	0025      	movs	r5, r4
 80069b0:	f000 f8dc 	bl	8006b6c <__malloc_unlock>
 80069b4:	2207      	movs	r2, #7
 80069b6:	350b      	adds	r5, #11
 80069b8:	1d23      	adds	r3, r4, #4
 80069ba:	4395      	bics	r5, r2
 80069bc:	1aea      	subs	r2, r5, r3
 80069be:	429d      	cmp	r5, r3
 80069c0:	d0e5      	beq.n	800698e <_malloc_r+0x82>
 80069c2:	1b5b      	subs	r3, r3, r5
 80069c4:	50a3      	str	r3, [r4, r2]
 80069c6:	e7e2      	b.n	800698e <_malloc_r+0x82>
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	e7ec      	b.n	80069a6 <_malloc_r+0x9a>
 80069cc:	6862      	ldr	r2, [r4, #4]
 80069ce:	42a3      	cmp	r3, r4
 80069d0:	d101      	bne.n	80069d6 <_malloc_r+0xca>
 80069d2:	602a      	str	r2, [r5, #0]
 80069d4:	e7ea      	b.n	80069ac <_malloc_r+0xa0>
 80069d6:	605a      	str	r2, [r3, #4]
 80069d8:	e7e8      	b.n	80069ac <_malloc_r+0xa0>
 80069da:	0023      	movs	r3, r4
 80069dc:	6864      	ldr	r4, [r4, #4]
 80069de:	e7a7      	b.n	8006930 <_malloc_r+0x24>
 80069e0:	002c      	movs	r4, r5
 80069e2:	686d      	ldr	r5, [r5, #4]
 80069e4:	e7af      	b.n	8006946 <_malloc_r+0x3a>
 80069e6:	230c      	movs	r3, #12
 80069e8:	0030      	movs	r0, r6
 80069ea:	6033      	str	r3, [r6, #0]
 80069ec:	f000 f8be 	bl	8006b6c <__malloc_unlock>
 80069f0:	e7cd      	b.n	800698e <_malloc_r+0x82>
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	20000b8c 	.word	0x20000b8c

080069f8 <iprintf>:
 80069f8:	b40f      	push	{r0, r1, r2, r3}
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <iprintf+0x30>)
 80069fc:	b513      	push	{r0, r1, r4, lr}
 80069fe:	681c      	ldr	r4, [r3, #0]
 8006a00:	2c00      	cmp	r4, #0
 8006a02:	d005      	beq.n	8006a10 <iprintf+0x18>
 8006a04:	69a3      	ldr	r3, [r4, #24]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d102      	bne.n	8006a10 <iprintf+0x18>
 8006a0a:	0020      	movs	r0, r4
 8006a0c:	f7ff fe3a 	bl	8006684 <__sinit>
 8006a10:	ab05      	add	r3, sp, #20
 8006a12:	0020      	movs	r0, r4
 8006a14:	9a04      	ldr	r2, [sp, #16]
 8006a16:	68a1      	ldr	r1, [r4, #8]
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	f000 f8d7 	bl	8006bcc <_vfiprintf_r>
 8006a1e:	bc16      	pop	{r1, r2, r4}
 8006a20:	bc08      	pop	{r3}
 8006a22:	b004      	add	sp, #16
 8006a24:	4718      	bx	r3
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	20000050 	.word	0x20000050

08006a2c <_sbrk_r>:
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	b570      	push	{r4, r5, r6, lr}
 8006a30:	4d06      	ldr	r5, [pc, #24]	; (8006a4c <_sbrk_r+0x20>)
 8006a32:	0004      	movs	r4, r0
 8006a34:	0008      	movs	r0, r1
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	f7fb f93a 	bl	8001cb0 <_sbrk>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d103      	bne.n	8006a48 <_sbrk_r+0x1c>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d000      	beq.n	8006a48 <_sbrk_r+0x1c>
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	bd70      	pop	{r4, r5, r6, pc}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	20000b94 	.word	0x20000b94

08006a50 <__sread>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	000c      	movs	r4, r1
 8006a54:	250e      	movs	r5, #14
 8006a56:	5f49      	ldrsh	r1, [r1, r5]
 8006a58:	f000 fb74 	bl	8007144 <_read_r>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	db03      	blt.n	8006a68 <__sread+0x18>
 8006a60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006a62:	181b      	adds	r3, r3, r0
 8006a64:	6563      	str	r3, [r4, #84]	; 0x54
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	4a02      	ldr	r2, [pc, #8]	; (8006a74 <__sread+0x24>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	81a3      	strh	r3, [r4, #12]
 8006a70:	e7f9      	b.n	8006a66 <__sread+0x16>
 8006a72:	46c0      	nop			; (mov r8, r8)
 8006a74:	ffffefff 	.word	0xffffefff

08006a78 <__swrite>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	001f      	movs	r7, r3
 8006a7c:	898b      	ldrh	r3, [r1, #12]
 8006a7e:	0005      	movs	r5, r0
 8006a80:	000c      	movs	r4, r1
 8006a82:	0016      	movs	r6, r2
 8006a84:	05db      	lsls	r3, r3, #23
 8006a86:	d505      	bpl.n	8006a94 <__swrite+0x1c>
 8006a88:	230e      	movs	r3, #14
 8006a8a:	5ec9      	ldrsh	r1, [r1, r3]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2302      	movs	r3, #2
 8006a90:	f000 f850 	bl	8006b34 <_lseek_r>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	4a05      	ldr	r2, [pc, #20]	; (8006aac <__swrite+0x34>)
 8006a98:	0028      	movs	r0, r5
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	0032      	movs	r2, r6
 8006aa0:	230e      	movs	r3, #14
 8006aa2:	5ee1      	ldrsh	r1, [r4, r3]
 8006aa4:	003b      	movs	r3, r7
 8006aa6:	f000 f81f 	bl	8006ae8 <_write_r>
 8006aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aac:	ffffefff 	.word	0xffffefff

08006ab0 <__sseek>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	000c      	movs	r4, r1
 8006ab4:	250e      	movs	r5, #14
 8006ab6:	5f49      	ldrsh	r1, [r1, r5]
 8006ab8:	f000 f83c 	bl	8006b34 <_lseek_r>
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	1c42      	adds	r2, r0, #1
 8006ac0:	d103      	bne.n	8006aca <__sseek+0x1a>
 8006ac2:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <__sseek+0x28>)
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	81a3      	strh	r3, [r4, #12]
 8006ac8:	bd70      	pop	{r4, r5, r6, pc}
 8006aca:	2280      	movs	r2, #128	; 0x80
 8006acc:	0152      	lsls	r2, r2, #5
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	81a3      	strh	r3, [r4, #12]
 8006ad2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ad4:	e7f8      	b.n	8006ac8 <__sseek+0x18>
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	ffffefff 	.word	0xffffefff

08006adc <__sclose>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	230e      	movs	r3, #14
 8006ae0:	5ec9      	ldrsh	r1, [r1, r3]
 8006ae2:	f000 f815 	bl	8006b10 <_close_r>
 8006ae6:	bd10      	pop	{r4, pc}

08006ae8 <_write_r>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	0004      	movs	r4, r0
 8006aec:	0008      	movs	r0, r1
 8006aee:	0011      	movs	r1, r2
 8006af0:	001a      	movs	r2, r3
 8006af2:	2300      	movs	r3, #0
 8006af4:	4d05      	ldr	r5, [pc, #20]	; (8006b0c <_write_r+0x24>)
 8006af6:	602b      	str	r3, [r5, #0]
 8006af8:	f7fb f891 	bl	8001c1e <_write>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d103      	bne.n	8006b08 <_write_r+0x20>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d000      	beq.n	8006b08 <_write_r+0x20>
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	bd70      	pop	{r4, r5, r6, pc}
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	20000b94 	.word	0x20000b94

08006b10 <_close_r>:
 8006b10:	2300      	movs	r3, #0
 8006b12:	b570      	push	{r4, r5, r6, lr}
 8006b14:	4d06      	ldr	r5, [pc, #24]	; (8006b30 <_close_r+0x20>)
 8006b16:	0004      	movs	r4, r0
 8006b18:	0008      	movs	r0, r1
 8006b1a:	602b      	str	r3, [r5, #0]
 8006b1c:	f7fb f89b 	bl	8001c56 <_close>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d103      	bne.n	8006b2c <_close_r+0x1c>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d000      	beq.n	8006b2c <_close_r+0x1c>
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	20000b94 	.word	0x20000b94

08006b34 <_lseek_r>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	0004      	movs	r4, r0
 8006b38:	0008      	movs	r0, r1
 8006b3a:	0011      	movs	r1, r2
 8006b3c:	001a      	movs	r2, r3
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4d05      	ldr	r5, [pc, #20]	; (8006b58 <_lseek_r+0x24>)
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	f7fb f8a8 	bl	8001c98 <_lseek>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d103      	bne.n	8006b54 <_lseek_r+0x20>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d000      	beq.n	8006b54 <_lseek_r+0x20>
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	bd70      	pop	{r4, r5, r6, pc}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	20000b94 	.word	0x20000b94

08006b5c <__malloc_lock>:
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	4802      	ldr	r0, [pc, #8]	; (8006b68 <__malloc_lock+0xc>)
 8006b60:	f7ff fe55 	bl	800680e <__retarget_lock_acquire_recursive>
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	20000b88 	.word	0x20000b88

08006b6c <__malloc_unlock>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4802      	ldr	r0, [pc, #8]	; (8006b78 <__malloc_unlock+0xc>)
 8006b70:	f7ff fe4e 	bl	8006810 <__retarget_lock_release_recursive>
 8006b74:	bd10      	pop	{r4, pc}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	20000b88 	.word	0x20000b88

08006b7c <__sfputc_r>:
 8006b7c:	6893      	ldr	r3, [r2, #8]
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	3b01      	subs	r3, #1
 8006b82:	6093      	str	r3, [r2, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da04      	bge.n	8006b92 <__sfputc_r+0x16>
 8006b88:	6994      	ldr	r4, [r2, #24]
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	db07      	blt.n	8006b9e <__sfputc_r+0x22>
 8006b8e:	290a      	cmp	r1, #10
 8006b90:	d005      	beq.n	8006b9e <__sfputc_r+0x22>
 8006b92:	6813      	ldr	r3, [r2, #0]
 8006b94:	1c58      	adds	r0, r3, #1
 8006b96:	6010      	str	r0, [r2, #0]
 8006b98:	7019      	strb	r1, [r3, #0]
 8006b9a:	0008      	movs	r0, r1
 8006b9c:	bd10      	pop	{r4, pc}
 8006b9e:	f000 fae5 	bl	800716c <__swbuf_r>
 8006ba2:	0001      	movs	r1, r0
 8006ba4:	e7f9      	b.n	8006b9a <__sfputc_r+0x1e>

08006ba6 <__sfputs_r>:
 8006ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba8:	0006      	movs	r6, r0
 8006baa:	000f      	movs	r7, r1
 8006bac:	0014      	movs	r4, r2
 8006bae:	18d5      	adds	r5, r2, r3
 8006bb0:	42ac      	cmp	r4, r5
 8006bb2:	d101      	bne.n	8006bb8 <__sfputs_r+0x12>
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	e007      	b.n	8006bc8 <__sfputs_r+0x22>
 8006bb8:	7821      	ldrb	r1, [r4, #0]
 8006bba:	003a      	movs	r2, r7
 8006bbc:	0030      	movs	r0, r6
 8006bbe:	f7ff ffdd 	bl	8006b7c <__sfputc_r>
 8006bc2:	3401      	adds	r4, #1
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d1f3      	bne.n	8006bb0 <__sfputs_r+0xa>
 8006bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bcc <_vfiprintf_r>:
 8006bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bce:	b0a1      	sub	sp, #132	; 0x84
 8006bd0:	0006      	movs	r6, r0
 8006bd2:	000c      	movs	r4, r1
 8006bd4:	001f      	movs	r7, r3
 8006bd6:	9203      	str	r2, [sp, #12]
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d004      	beq.n	8006be6 <_vfiprintf_r+0x1a>
 8006bdc:	6983      	ldr	r3, [r0, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <_vfiprintf_r+0x1a>
 8006be2:	f7ff fd4f 	bl	8006684 <__sinit>
 8006be6:	4b8e      	ldr	r3, [pc, #568]	; (8006e20 <_vfiprintf_r+0x254>)
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d11c      	bne.n	8006c26 <_vfiprintf_r+0x5a>
 8006bec:	6874      	ldr	r4, [r6, #4]
 8006bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf0:	07db      	lsls	r3, r3, #31
 8006bf2:	d405      	bmi.n	8006c00 <_vfiprintf_r+0x34>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	059b      	lsls	r3, r3, #22
 8006bf8:	d402      	bmi.n	8006c00 <_vfiprintf_r+0x34>
 8006bfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bfc:	f7ff fe07 	bl	800680e <__retarget_lock_acquire_recursive>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	071b      	lsls	r3, r3, #28
 8006c04:	d502      	bpl.n	8006c0c <_vfiprintf_r+0x40>
 8006c06:	6923      	ldr	r3, [r4, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11d      	bne.n	8006c48 <_vfiprintf_r+0x7c>
 8006c0c:	0021      	movs	r1, r4
 8006c0e:	0030      	movs	r0, r6
 8006c10:	f000 fb02 	bl	8007218 <__swsetup_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d017      	beq.n	8006c48 <_vfiprintf_r+0x7c>
 8006c18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c1a:	07db      	lsls	r3, r3, #31
 8006c1c:	d50d      	bpl.n	8006c3a <_vfiprintf_r+0x6e>
 8006c1e:	2001      	movs	r0, #1
 8006c20:	4240      	negs	r0, r0
 8006c22:	b021      	add	sp, #132	; 0x84
 8006c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c26:	4b7f      	ldr	r3, [pc, #508]	; (8006e24 <_vfiprintf_r+0x258>)
 8006c28:	429c      	cmp	r4, r3
 8006c2a:	d101      	bne.n	8006c30 <_vfiprintf_r+0x64>
 8006c2c:	68b4      	ldr	r4, [r6, #8]
 8006c2e:	e7de      	b.n	8006bee <_vfiprintf_r+0x22>
 8006c30:	4b7d      	ldr	r3, [pc, #500]	; (8006e28 <_vfiprintf_r+0x25c>)
 8006c32:	429c      	cmp	r4, r3
 8006c34:	d1db      	bne.n	8006bee <_vfiprintf_r+0x22>
 8006c36:	68f4      	ldr	r4, [r6, #12]
 8006c38:	e7d9      	b.n	8006bee <_vfiprintf_r+0x22>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	059b      	lsls	r3, r3, #22
 8006c3e:	d4ee      	bmi.n	8006c1e <_vfiprintf_r+0x52>
 8006c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c42:	f7ff fde5 	bl	8006810 <__retarget_lock_release_recursive>
 8006c46:	e7ea      	b.n	8006c1e <_vfiprintf_r+0x52>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	ad08      	add	r5, sp, #32
 8006c4c:	616b      	str	r3, [r5, #20]
 8006c4e:	3320      	adds	r3, #32
 8006c50:	766b      	strb	r3, [r5, #25]
 8006c52:	3310      	adds	r3, #16
 8006c54:	76ab      	strb	r3, [r5, #26]
 8006c56:	9707      	str	r7, [sp, #28]
 8006c58:	9f03      	ldr	r7, [sp, #12]
 8006c5a:	783b      	ldrb	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <_vfiprintf_r+0x98>
 8006c60:	2b25      	cmp	r3, #37	; 0x25
 8006c62:	d14e      	bne.n	8006d02 <_vfiprintf_r+0x136>
 8006c64:	9b03      	ldr	r3, [sp, #12]
 8006c66:	1afb      	subs	r3, r7, r3
 8006c68:	9305      	str	r3, [sp, #20]
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	429f      	cmp	r7, r3
 8006c6e:	d00d      	beq.n	8006c8c <_vfiprintf_r+0xc0>
 8006c70:	9b05      	ldr	r3, [sp, #20]
 8006c72:	0021      	movs	r1, r4
 8006c74:	0030      	movs	r0, r6
 8006c76:	9a03      	ldr	r2, [sp, #12]
 8006c78:	f7ff ff95 	bl	8006ba6 <__sfputs_r>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d100      	bne.n	8006c82 <_vfiprintf_r+0xb6>
 8006c80:	e0b5      	b.n	8006dee <_vfiprintf_r+0x222>
 8006c82:	696a      	ldr	r2, [r5, #20]
 8006c84:	9b05      	ldr	r3, [sp, #20]
 8006c86:	4694      	mov	ip, r2
 8006c88:	4463      	add	r3, ip
 8006c8a:	616b      	str	r3, [r5, #20]
 8006c8c:	783b      	ldrb	r3, [r7, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d100      	bne.n	8006c94 <_vfiprintf_r+0xc8>
 8006c92:	e0ac      	b.n	8006dee <_vfiprintf_r+0x222>
 8006c94:	2201      	movs	r2, #1
 8006c96:	1c7b      	adds	r3, r7, #1
 8006c98:	9303      	str	r3, [sp, #12]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4252      	negs	r2, r2
 8006c9e:	606a      	str	r2, [r5, #4]
 8006ca0:	a904      	add	r1, sp, #16
 8006ca2:	3254      	adds	r2, #84	; 0x54
 8006ca4:	1852      	adds	r2, r2, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	60eb      	str	r3, [r5, #12]
 8006caa:	60ab      	str	r3, [r5, #8]
 8006cac:	7013      	strb	r3, [r2, #0]
 8006cae:	65ab      	str	r3, [r5, #88]	; 0x58
 8006cb0:	9b03      	ldr	r3, [sp, #12]
 8006cb2:	2205      	movs	r2, #5
 8006cb4:	7819      	ldrb	r1, [r3, #0]
 8006cb6:	485d      	ldr	r0, [pc, #372]	; (8006e2c <_vfiprintf_r+0x260>)
 8006cb8:	f000 fb92 	bl	80073e0 <memchr>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	1c5f      	adds	r7, r3, #1
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d120      	bne.n	8006d06 <_vfiprintf_r+0x13a>
 8006cc4:	682a      	ldr	r2, [r5, #0]
 8006cc6:	06d3      	lsls	r3, r2, #27
 8006cc8:	d504      	bpl.n	8006cd4 <_vfiprintf_r+0x108>
 8006cca:	2353      	movs	r3, #83	; 0x53
 8006ccc:	a904      	add	r1, sp, #16
 8006cce:	185b      	adds	r3, r3, r1
 8006cd0:	2120      	movs	r1, #32
 8006cd2:	7019      	strb	r1, [r3, #0]
 8006cd4:	0713      	lsls	r3, r2, #28
 8006cd6:	d504      	bpl.n	8006ce2 <_vfiprintf_r+0x116>
 8006cd8:	2353      	movs	r3, #83	; 0x53
 8006cda:	a904      	add	r1, sp, #16
 8006cdc:	185b      	adds	r3, r3, r1
 8006cde:	212b      	movs	r1, #43	; 0x2b
 8006ce0:	7019      	strb	r1, [r3, #0]
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce8:	d016      	beq.n	8006d18 <_vfiprintf_r+0x14c>
 8006cea:	2100      	movs	r1, #0
 8006cec:	68eb      	ldr	r3, [r5, #12]
 8006cee:	9f03      	ldr	r7, [sp, #12]
 8006cf0:	783a      	ldrb	r2, [r7, #0]
 8006cf2:	1c78      	adds	r0, r7, #1
 8006cf4:	3a30      	subs	r2, #48	; 0x30
 8006cf6:	4684      	mov	ip, r0
 8006cf8:	2a09      	cmp	r2, #9
 8006cfa:	d94f      	bls.n	8006d9c <_vfiprintf_r+0x1d0>
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d111      	bne.n	8006d24 <_vfiprintf_r+0x158>
 8006d00:	e017      	b.n	8006d32 <_vfiprintf_r+0x166>
 8006d02:	3701      	adds	r7, #1
 8006d04:	e7a9      	b.n	8006c5a <_vfiprintf_r+0x8e>
 8006d06:	4b49      	ldr	r3, [pc, #292]	; (8006e2c <_vfiprintf_r+0x260>)
 8006d08:	682a      	ldr	r2, [r5, #0]
 8006d0a:	1ac0      	subs	r0, r0, r3
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4083      	lsls	r3, r0
 8006d10:	4313      	orrs	r3, r2
 8006d12:	602b      	str	r3, [r5, #0]
 8006d14:	9703      	str	r7, [sp, #12]
 8006d16:	e7cb      	b.n	8006cb0 <_vfiprintf_r+0xe4>
 8006d18:	9b07      	ldr	r3, [sp, #28]
 8006d1a:	1d19      	adds	r1, r3, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	9107      	str	r1, [sp, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	db01      	blt.n	8006d28 <_vfiprintf_r+0x15c>
 8006d24:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d26:	e004      	b.n	8006d32 <_vfiprintf_r+0x166>
 8006d28:	425b      	negs	r3, r3
 8006d2a:	60eb      	str	r3, [r5, #12]
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	602b      	str	r3, [r5, #0]
 8006d32:	783b      	ldrb	r3, [r7, #0]
 8006d34:	2b2e      	cmp	r3, #46	; 0x2e
 8006d36:	d10a      	bne.n	8006d4e <_vfiprintf_r+0x182>
 8006d38:	787b      	ldrb	r3, [r7, #1]
 8006d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d3c:	d137      	bne.n	8006dae <_vfiprintf_r+0x1e2>
 8006d3e:	9b07      	ldr	r3, [sp, #28]
 8006d40:	3702      	adds	r7, #2
 8006d42:	1d1a      	adds	r2, r3, #4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	9207      	str	r2, [sp, #28]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	db2d      	blt.n	8006da8 <_vfiprintf_r+0x1dc>
 8006d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4e:	2203      	movs	r2, #3
 8006d50:	7839      	ldrb	r1, [r7, #0]
 8006d52:	4837      	ldr	r0, [pc, #220]	; (8006e30 <_vfiprintf_r+0x264>)
 8006d54:	f000 fb44 	bl	80073e0 <memchr>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d007      	beq.n	8006d6c <_vfiprintf_r+0x1a0>
 8006d5c:	4b34      	ldr	r3, [pc, #208]	; (8006e30 <_vfiprintf_r+0x264>)
 8006d5e:	682a      	ldr	r2, [r5, #0]
 8006d60:	1ac0      	subs	r0, r0, r3
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	4083      	lsls	r3, r0
 8006d66:	4313      	orrs	r3, r2
 8006d68:	3701      	adds	r7, #1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	7839      	ldrb	r1, [r7, #0]
 8006d6e:	1c7b      	adds	r3, r7, #1
 8006d70:	2206      	movs	r2, #6
 8006d72:	4830      	ldr	r0, [pc, #192]	; (8006e34 <_vfiprintf_r+0x268>)
 8006d74:	9303      	str	r3, [sp, #12]
 8006d76:	7629      	strb	r1, [r5, #24]
 8006d78:	f000 fb32 	bl	80073e0 <memchr>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d045      	beq.n	8006e0c <_vfiprintf_r+0x240>
 8006d80:	4b2d      	ldr	r3, [pc, #180]	; (8006e38 <_vfiprintf_r+0x26c>)
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d127      	bne.n	8006dd6 <_vfiprintf_r+0x20a>
 8006d86:	2207      	movs	r2, #7
 8006d88:	9b07      	ldr	r3, [sp, #28]
 8006d8a:	3307      	adds	r3, #7
 8006d8c:	4393      	bics	r3, r2
 8006d8e:	3308      	adds	r3, #8
 8006d90:	9307      	str	r3, [sp, #28]
 8006d92:	696b      	ldr	r3, [r5, #20]
 8006d94:	9a04      	ldr	r2, [sp, #16]
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	616b      	str	r3, [r5, #20]
 8006d9a:	e75d      	b.n	8006c58 <_vfiprintf_r+0x8c>
 8006d9c:	210a      	movs	r1, #10
 8006d9e:	434b      	muls	r3, r1
 8006da0:	4667      	mov	r7, ip
 8006da2:	189b      	adds	r3, r3, r2
 8006da4:	3909      	subs	r1, #9
 8006da6:	e7a3      	b.n	8006cf0 <_vfiprintf_r+0x124>
 8006da8:	2301      	movs	r3, #1
 8006daa:	425b      	negs	r3, r3
 8006dac:	e7ce      	b.n	8006d4c <_vfiprintf_r+0x180>
 8006dae:	2300      	movs	r3, #0
 8006db0:	001a      	movs	r2, r3
 8006db2:	3701      	adds	r7, #1
 8006db4:	606b      	str	r3, [r5, #4]
 8006db6:	7839      	ldrb	r1, [r7, #0]
 8006db8:	1c78      	adds	r0, r7, #1
 8006dba:	3930      	subs	r1, #48	; 0x30
 8006dbc:	4684      	mov	ip, r0
 8006dbe:	2909      	cmp	r1, #9
 8006dc0:	d903      	bls.n	8006dca <_vfiprintf_r+0x1fe>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0c3      	beq.n	8006d4e <_vfiprintf_r+0x182>
 8006dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8006dc8:	e7c1      	b.n	8006d4e <_vfiprintf_r+0x182>
 8006dca:	230a      	movs	r3, #10
 8006dcc:	435a      	muls	r2, r3
 8006dce:	4667      	mov	r7, ip
 8006dd0:	1852      	adds	r2, r2, r1
 8006dd2:	3b09      	subs	r3, #9
 8006dd4:	e7ef      	b.n	8006db6 <_vfiprintf_r+0x1ea>
 8006dd6:	ab07      	add	r3, sp, #28
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	0022      	movs	r2, r4
 8006ddc:	0029      	movs	r1, r5
 8006dde:	0030      	movs	r0, r6
 8006de0:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <_vfiprintf_r+0x270>)
 8006de2:	e000      	b.n	8006de6 <_vfiprintf_r+0x21a>
 8006de4:	bf00      	nop
 8006de6:	9004      	str	r0, [sp, #16]
 8006de8:	9b04      	ldr	r3, [sp, #16]
 8006dea:	3301      	adds	r3, #1
 8006dec:	d1d1      	bne.n	8006d92 <_vfiprintf_r+0x1c6>
 8006dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df0:	07db      	lsls	r3, r3, #31
 8006df2:	d405      	bmi.n	8006e00 <_vfiprintf_r+0x234>
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	059b      	lsls	r3, r3, #22
 8006df8:	d402      	bmi.n	8006e00 <_vfiprintf_r+0x234>
 8006dfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfc:	f7ff fd08 	bl	8006810 <__retarget_lock_release_recursive>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	065b      	lsls	r3, r3, #25
 8006e04:	d500      	bpl.n	8006e08 <_vfiprintf_r+0x23c>
 8006e06:	e70a      	b.n	8006c1e <_vfiprintf_r+0x52>
 8006e08:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006e0a:	e70a      	b.n	8006c22 <_vfiprintf_r+0x56>
 8006e0c:	ab07      	add	r3, sp, #28
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	0022      	movs	r2, r4
 8006e12:	0029      	movs	r1, r5
 8006e14:	0030      	movs	r0, r6
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <_vfiprintf_r+0x270>)
 8006e18:	f000 f882 	bl	8006f20 <_printf_i>
 8006e1c:	e7e3      	b.n	8006de6 <_vfiprintf_r+0x21a>
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	08007970 	.word	0x08007970
 8006e24:	08007990 	.word	0x08007990
 8006e28:	08007950 	.word	0x08007950
 8006e2c:	080079b4 	.word	0x080079b4
 8006e30:	080079ba 	.word	0x080079ba
 8006e34:	080079be 	.word	0x080079be
 8006e38:	00000000 	.word	0x00000000
 8006e3c:	08006ba7 	.word	0x08006ba7

08006e40 <_printf_common>:
 8006e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e42:	0015      	movs	r5, r2
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	688a      	ldr	r2, [r1, #8]
 8006e48:	690b      	ldr	r3, [r1, #16]
 8006e4a:	000c      	movs	r4, r1
 8006e4c:	9000      	str	r0, [sp, #0]
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	da00      	bge.n	8006e54 <_printf_common+0x14>
 8006e52:	0013      	movs	r3, r2
 8006e54:	0022      	movs	r2, r4
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	3243      	adds	r2, #67	; 0x43
 8006e5a:	7812      	ldrb	r2, [r2, #0]
 8006e5c:	2a00      	cmp	r2, #0
 8006e5e:	d001      	beq.n	8006e64 <_printf_common+0x24>
 8006e60:	3301      	adds	r3, #1
 8006e62:	602b      	str	r3, [r5, #0]
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	069b      	lsls	r3, r3, #26
 8006e68:	d502      	bpl.n	8006e70 <_printf_common+0x30>
 8006e6a:	682b      	ldr	r3, [r5, #0]
 8006e6c:	3302      	adds	r3, #2
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	6822      	ldr	r2, [r4, #0]
 8006e72:	2306      	movs	r3, #6
 8006e74:	0017      	movs	r7, r2
 8006e76:	401f      	ands	r7, r3
 8006e78:	421a      	tst	r2, r3
 8006e7a:	d027      	beq.n	8006ecc <_printf_common+0x8c>
 8006e7c:	0023      	movs	r3, r4
 8006e7e:	3343      	adds	r3, #67	; 0x43
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	1e5a      	subs	r2, r3, #1
 8006e84:	4193      	sbcs	r3, r2
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	0692      	lsls	r2, r2, #26
 8006e8a:	d430      	bmi.n	8006eee <_printf_common+0xae>
 8006e8c:	0022      	movs	r2, r4
 8006e8e:	9901      	ldr	r1, [sp, #4]
 8006e90:	9800      	ldr	r0, [sp, #0]
 8006e92:	9e08      	ldr	r6, [sp, #32]
 8006e94:	3243      	adds	r2, #67	; 0x43
 8006e96:	47b0      	blx	r6
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d025      	beq.n	8006ee8 <_printf_common+0xa8>
 8006e9c:	2306      	movs	r3, #6
 8006e9e:	6820      	ldr	r0, [r4, #0]
 8006ea0:	682a      	ldr	r2, [r5, #0]
 8006ea2:	68e1      	ldr	r1, [r4, #12]
 8006ea4:	2500      	movs	r5, #0
 8006ea6:	4003      	ands	r3, r0
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d103      	bne.n	8006eb4 <_printf_common+0x74>
 8006eac:	1a8d      	subs	r5, r1, r2
 8006eae:	43eb      	mvns	r3, r5
 8006eb0:	17db      	asrs	r3, r3, #31
 8006eb2:	401d      	ands	r5, r3
 8006eb4:	68a3      	ldr	r3, [r4, #8]
 8006eb6:	6922      	ldr	r2, [r4, #16]
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	dd01      	ble.n	8006ec0 <_printf_common+0x80>
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	18ed      	adds	r5, r5, r3
 8006ec0:	2700      	movs	r7, #0
 8006ec2:	42bd      	cmp	r5, r7
 8006ec4:	d120      	bne.n	8006f08 <_printf_common+0xc8>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e010      	b.n	8006eec <_printf_common+0xac>
 8006eca:	3701      	adds	r7, #1
 8006ecc:	68e3      	ldr	r3, [r4, #12]
 8006ece:	682a      	ldr	r2, [r5, #0]
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	42bb      	cmp	r3, r7
 8006ed4:	ddd2      	ble.n	8006e7c <_printf_common+0x3c>
 8006ed6:	0022      	movs	r2, r4
 8006ed8:	2301      	movs	r3, #1
 8006eda:	9901      	ldr	r1, [sp, #4]
 8006edc:	9800      	ldr	r0, [sp, #0]
 8006ede:	9e08      	ldr	r6, [sp, #32]
 8006ee0:	3219      	adds	r2, #25
 8006ee2:	47b0      	blx	r6
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d1f0      	bne.n	8006eca <_printf_common+0x8a>
 8006ee8:	2001      	movs	r0, #1
 8006eea:	4240      	negs	r0, r0
 8006eec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eee:	2030      	movs	r0, #48	; 0x30
 8006ef0:	18e1      	adds	r1, r4, r3
 8006ef2:	3143      	adds	r1, #67	; 0x43
 8006ef4:	7008      	strb	r0, [r1, #0]
 8006ef6:	0021      	movs	r1, r4
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	3145      	adds	r1, #69	; 0x45
 8006efc:	7809      	ldrb	r1, [r1, #0]
 8006efe:	18a2      	adds	r2, r4, r2
 8006f00:	3243      	adds	r2, #67	; 0x43
 8006f02:	3302      	adds	r3, #2
 8006f04:	7011      	strb	r1, [r2, #0]
 8006f06:	e7c1      	b.n	8006e8c <_printf_common+0x4c>
 8006f08:	0022      	movs	r2, r4
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	9901      	ldr	r1, [sp, #4]
 8006f0e:	9800      	ldr	r0, [sp, #0]
 8006f10:	9e08      	ldr	r6, [sp, #32]
 8006f12:	321a      	adds	r2, #26
 8006f14:	47b0      	blx	r6
 8006f16:	1c43      	adds	r3, r0, #1
 8006f18:	d0e6      	beq.n	8006ee8 <_printf_common+0xa8>
 8006f1a:	3701      	adds	r7, #1
 8006f1c:	e7d1      	b.n	8006ec2 <_printf_common+0x82>
	...

08006f20 <_printf_i>:
 8006f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f22:	b08b      	sub	sp, #44	; 0x2c
 8006f24:	9206      	str	r2, [sp, #24]
 8006f26:	000a      	movs	r2, r1
 8006f28:	3243      	adds	r2, #67	; 0x43
 8006f2a:	9307      	str	r3, [sp, #28]
 8006f2c:	9005      	str	r0, [sp, #20]
 8006f2e:	9204      	str	r2, [sp, #16]
 8006f30:	7e0a      	ldrb	r2, [r1, #24]
 8006f32:	000c      	movs	r4, r1
 8006f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f36:	2a78      	cmp	r2, #120	; 0x78
 8006f38:	d807      	bhi.n	8006f4a <_printf_i+0x2a>
 8006f3a:	2a62      	cmp	r2, #98	; 0x62
 8006f3c:	d809      	bhi.n	8006f52 <_printf_i+0x32>
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	d100      	bne.n	8006f44 <_printf_i+0x24>
 8006f42:	e0c1      	b.n	80070c8 <_printf_i+0x1a8>
 8006f44:	2a58      	cmp	r2, #88	; 0x58
 8006f46:	d100      	bne.n	8006f4a <_printf_i+0x2a>
 8006f48:	e08c      	b.n	8007064 <_printf_i+0x144>
 8006f4a:	0026      	movs	r6, r4
 8006f4c:	3642      	adds	r6, #66	; 0x42
 8006f4e:	7032      	strb	r2, [r6, #0]
 8006f50:	e022      	b.n	8006f98 <_printf_i+0x78>
 8006f52:	0010      	movs	r0, r2
 8006f54:	3863      	subs	r0, #99	; 0x63
 8006f56:	2815      	cmp	r0, #21
 8006f58:	d8f7      	bhi.n	8006f4a <_printf_i+0x2a>
 8006f5a:	f7f9 f8dd 	bl	8000118 <__gnu_thumb1_case_shi>
 8006f5e:	0016      	.short	0x0016
 8006f60:	fff6001f 	.word	0xfff6001f
 8006f64:	fff6fff6 	.word	0xfff6fff6
 8006f68:	001ffff6 	.word	0x001ffff6
 8006f6c:	fff6fff6 	.word	0xfff6fff6
 8006f70:	fff6fff6 	.word	0xfff6fff6
 8006f74:	003600a8 	.word	0x003600a8
 8006f78:	fff6009a 	.word	0xfff6009a
 8006f7c:	00b9fff6 	.word	0x00b9fff6
 8006f80:	0036fff6 	.word	0x0036fff6
 8006f84:	fff6fff6 	.word	0xfff6fff6
 8006f88:	009e      	.short	0x009e
 8006f8a:	0026      	movs	r6, r4
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	3642      	adds	r6, #66	; 0x42
 8006f90:	1d11      	adds	r1, r2, #4
 8006f92:	6019      	str	r1, [r3, #0]
 8006f94:	6813      	ldr	r3, [r2, #0]
 8006f96:	7033      	strb	r3, [r6, #0]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0a7      	b.n	80070ec <_printf_i+0x1cc>
 8006f9c:	6808      	ldr	r0, [r1, #0]
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	1d0a      	adds	r2, r1, #4
 8006fa2:	0605      	lsls	r5, r0, #24
 8006fa4:	d50b      	bpl.n	8006fbe <_printf_i+0x9e>
 8006fa6:	680d      	ldr	r5, [r1, #0]
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	da03      	bge.n	8006fb6 <_printf_i+0x96>
 8006fae:	232d      	movs	r3, #45	; 0x2d
 8006fb0:	9a04      	ldr	r2, [sp, #16]
 8006fb2:	426d      	negs	r5, r5
 8006fb4:	7013      	strb	r3, [r2, #0]
 8006fb6:	4b61      	ldr	r3, [pc, #388]	; (800713c <_printf_i+0x21c>)
 8006fb8:	270a      	movs	r7, #10
 8006fba:	9303      	str	r3, [sp, #12]
 8006fbc:	e01b      	b.n	8006ff6 <_printf_i+0xd6>
 8006fbe:	680d      	ldr	r5, [r1, #0]
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	0641      	lsls	r1, r0, #25
 8006fc4:	d5f1      	bpl.n	8006faa <_printf_i+0x8a>
 8006fc6:	b22d      	sxth	r5, r5
 8006fc8:	e7ef      	b.n	8006faa <_printf_i+0x8a>
 8006fca:	680d      	ldr	r5, [r1, #0]
 8006fcc:	6819      	ldr	r1, [r3, #0]
 8006fce:	1d08      	adds	r0, r1, #4
 8006fd0:	6018      	str	r0, [r3, #0]
 8006fd2:	062e      	lsls	r6, r5, #24
 8006fd4:	d501      	bpl.n	8006fda <_printf_i+0xba>
 8006fd6:	680d      	ldr	r5, [r1, #0]
 8006fd8:	e003      	b.n	8006fe2 <_printf_i+0xc2>
 8006fda:	066d      	lsls	r5, r5, #25
 8006fdc:	d5fb      	bpl.n	8006fd6 <_printf_i+0xb6>
 8006fde:	680d      	ldr	r5, [r1, #0]
 8006fe0:	b2ad      	uxth	r5, r5
 8006fe2:	4b56      	ldr	r3, [pc, #344]	; (800713c <_printf_i+0x21c>)
 8006fe4:	2708      	movs	r7, #8
 8006fe6:	9303      	str	r3, [sp, #12]
 8006fe8:	2a6f      	cmp	r2, #111	; 0x6f
 8006fea:	d000      	beq.n	8006fee <_printf_i+0xce>
 8006fec:	3702      	adds	r7, #2
 8006fee:	0023      	movs	r3, r4
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	3343      	adds	r3, #67	; 0x43
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	6863      	ldr	r3, [r4, #4]
 8006ff8:	60a3      	str	r3, [r4, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	db03      	blt.n	8007006 <_printf_i+0xe6>
 8006ffe:	2204      	movs	r2, #4
 8007000:	6821      	ldr	r1, [r4, #0]
 8007002:	4391      	bics	r1, r2
 8007004:	6021      	str	r1, [r4, #0]
 8007006:	2d00      	cmp	r5, #0
 8007008:	d102      	bne.n	8007010 <_printf_i+0xf0>
 800700a:	9e04      	ldr	r6, [sp, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00c      	beq.n	800702a <_printf_i+0x10a>
 8007010:	9e04      	ldr	r6, [sp, #16]
 8007012:	0028      	movs	r0, r5
 8007014:	0039      	movs	r1, r7
 8007016:	f7f9 f90f 	bl	8000238 <__aeabi_uidivmod>
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	3e01      	subs	r6, #1
 800701e:	5c5b      	ldrb	r3, [r3, r1]
 8007020:	7033      	strb	r3, [r6, #0]
 8007022:	002b      	movs	r3, r5
 8007024:	0005      	movs	r5, r0
 8007026:	429f      	cmp	r7, r3
 8007028:	d9f3      	bls.n	8007012 <_printf_i+0xf2>
 800702a:	2f08      	cmp	r7, #8
 800702c:	d109      	bne.n	8007042 <_printf_i+0x122>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	07db      	lsls	r3, r3, #31
 8007032:	d506      	bpl.n	8007042 <_printf_i+0x122>
 8007034:	6863      	ldr	r3, [r4, #4]
 8007036:	6922      	ldr	r2, [r4, #16]
 8007038:	4293      	cmp	r3, r2
 800703a:	dc02      	bgt.n	8007042 <_printf_i+0x122>
 800703c:	2330      	movs	r3, #48	; 0x30
 800703e:	3e01      	subs	r6, #1
 8007040:	7033      	strb	r3, [r6, #0]
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	1b9b      	subs	r3, r3, r6
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	9b07      	ldr	r3, [sp, #28]
 800704a:	0021      	movs	r1, r4
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	9805      	ldr	r0, [sp, #20]
 8007050:	9b06      	ldr	r3, [sp, #24]
 8007052:	aa09      	add	r2, sp, #36	; 0x24
 8007054:	f7ff fef4 	bl	8006e40 <_printf_common>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d14c      	bne.n	80070f6 <_printf_i+0x1d6>
 800705c:	2001      	movs	r0, #1
 800705e:	4240      	negs	r0, r0
 8007060:	b00b      	add	sp, #44	; 0x2c
 8007062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007064:	3145      	adds	r1, #69	; 0x45
 8007066:	700a      	strb	r2, [r1, #0]
 8007068:	4a34      	ldr	r2, [pc, #208]	; (800713c <_printf_i+0x21c>)
 800706a:	9203      	str	r2, [sp, #12]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	6821      	ldr	r1, [r4, #0]
 8007070:	ca20      	ldmia	r2!, {r5}
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	0608      	lsls	r0, r1, #24
 8007076:	d516      	bpl.n	80070a6 <_printf_i+0x186>
 8007078:	07cb      	lsls	r3, r1, #31
 800707a:	d502      	bpl.n	8007082 <_printf_i+0x162>
 800707c:	2320      	movs	r3, #32
 800707e:	4319      	orrs	r1, r3
 8007080:	6021      	str	r1, [r4, #0]
 8007082:	2710      	movs	r7, #16
 8007084:	2d00      	cmp	r5, #0
 8007086:	d1b2      	bne.n	8006fee <_printf_i+0xce>
 8007088:	2320      	movs	r3, #32
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	439a      	bics	r2, r3
 800708e:	6022      	str	r2, [r4, #0]
 8007090:	e7ad      	b.n	8006fee <_printf_i+0xce>
 8007092:	2220      	movs	r2, #32
 8007094:	6809      	ldr	r1, [r1, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	6022      	str	r2, [r4, #0]
 800709a:	0022      	movs	r2, r4
 800709c:	2178      	movs	r1, #120	; 0x78
 800709e:	3245      	adds	r2, #69	; 0x45
 80070a0:	7011      	strb	r1, [r2, #0]
 80070a2:	4a27      	ldr	r2, [pc, #156]	; (8007140 <_printf_i+0x220>)
 80070a4:	e7e1      	b.n	800706a <_printf_i+0x14a>
 80070a6:	0648      	lsls	r0, r1, #25
 80070a8:	d5e6      	bpl.n	8007078 <_printf_i+0x158>
 80070aa:	b2ad      	uxth	r5, r5
 80070ac:	e7e4      	b.n	8007078 <_printf_i+0x158>
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	680d      	ldr	r5, [r1, #0]
 80070b2:	1d10      	adds	r0, r2, #4
 80070b4:	6949      	ldr	r1, [r1, #20]
 80070b6:	6018      	str	r0, [r3, #0]
 80070b8:	6813      	ldr	r3, [r2, #0]
 80070ba:	062e      	lsls	r6, r5, #24
 80070bc:	d501      	bpl.n	80070c2 <_printf_i+0x1a2>
 80070be:	6019      	str	r1, [r3, #0]
 80070c0:	e002      	b.n	80070c8 <_printf_i+0x1a8>
 80070c2:	066d      	lsls	r5, r5, #25
 80070c4:	d5fb      	bpl.n	80070be <_printf_i+0x19e>
 80070c6:	8019      	strh	r1, [r3, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	9e04      	ldr	r6, [sp, #16]
 80070cc:	6123      	str	r3, [r4, #16]
 80070ce:	e7bb      	b.n	8007048 <_printf_i+0x128>
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	1d11      	adds	r1, r2, #4
 80070d4:	6019      	str	r1, [r3, #0]
 80070d6:	6816      	ldr	r6, [r2, #0]
 80070d8:	2100      	movs	r1, #0
 80070da:	0030      	movs	r0, r6
 80070dc:	6862      	ldr	r2, [r4, #4]
 80070de:	f000 f97f 	bl	80073e0 <memchr>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d001      	beq.n	80070ea <_printf_i+0x1ca>
 80070e6:	1b80      	subs	r0, r0, r6
 80070e8:	6060      	str	r0, [r4, #4]
 80070ea:	6863      	ldr	r3, [r4, #4]
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9a04      	ldr	r2, [sp, #16]
 80070f2:	7013      	strb	r3, [r2, #0]
 80070f4:	e7a8      	b.n	8007048 <_printf_i+0x128>
 80070f6:	6923      	ldr	r3, [r4, #16]
 80070f8:	0032      	movs	r2, r6
 80070fa:	9906      	ldr	r1, [sp, #24]
 80070fc:	9805      	ldr	r0, [sp, #20]
 80070fe:	9d07      	ldr	r5, [sp, #28]
 8007100:	47a8      	blx	r5
 8007102:	1c43      	adds	r3, r0, #1
 8007104:	d0aa      	beq.n	800705c <_printf_i+0x13c>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	079b      	lsls	r3, r3, #30
 800710a:	d415      	bmi.n	8007138 <_printf_i+0x218>
 800710c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710e:	68e0      	ldr	r0, [r4, #12]
 8007110:	4298      	cmp	r0, r3
 8007112:	daa5      	bge.n	8007060 <_printf_i+0x140>
 8007114:	0018      	movs	r0, r3
 8007116:	e7a3      	b.n	8007060 <_printf_i+0x140>
 8007118:	0022      	movs	r2, r4
 800711a:	2301      	movs	r3, #1
 800711c:	9906      	ldr	r1, [sp, #24]
 800711e:	9805      	ldr	r0, [sp, #20]
 8007120:	9e07      	ldr	r6, [sp, #28]
 8007122:	3219      	adds	r2, #25
 8007124:	47b0      	blx	r6
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	d098      	beq.n	800705c <_printf_i+0x13c>
 800712a:	3501      	adds	r5, #1
 800712c:	68e3      	ldr	r3, [r4, #12]
 800712e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007130:	1a9b      	subs	r3, r3, r2
 8007132:	42ab      	cmp	r3, r5
 8007134:	dcf0      	bgt.n	8007118 <_printf_i+0x1f8>
 8007136:	e7e9      	b.n	800710c <_printf_i+0x1ec>
 8007138:	2500      	movs	r5, #0
 800713a:	e7f7      	b.n	800712c <_printf_i+0x20c>
 800713c:	080079c5 	.word	0x080079c5
 8007140:	080079d6 	.word	0x080079d6

08007144 <_read_r>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	0004      	movs	r4, r0
 8007148:	0008      	movs	r0, r1
 800714a:	0011      	movs	r1, r2
 800714c:	001a      	movs	r2, r3
 800714e:	2300      	movs	r3, #0
 8007150:	4d05      	ldr	r5, [pc, #20]	; (8007168 <_read_r+0x24>)
 8007152:	602b      	str	r3, [r5, #0]
 8007154:	f7fa fd46 	bl	8001be4 <_read>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d103      	bne.n	8007164 <_read_r+0x20>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d000      	beq.n	8007164 <_read_r+0x20>
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	20000b94 	.word	0x20000b94

0800716c <__swbuf_r>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	0005      	movs	r5, r0
 8007170:	000e      	movs	r6, r1
 8007172:	0014      	movs	r4, r2
 8007174:	2800      	cmp	r0, #0
 8007176:	d004      	beq.n	8007182 <__swbuf_r+0x16>
 8007178:	6983      	ldr	r3, [r0, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <__swbuf_r+0x16>
 800717e:	f7ff fa81 	bl	8006684 <__sinit>
 8007182:	4b22      	ldr	r3, [pc, #136]	; (800720c <__swbuf_r+0xa0>)
 8007184:	429c      	cmp	r4, r3
 8007186:	d12e      	bne.n	80071e6 <__swbuf_r+0x7a>
 8007188:	686c      	ldr	r4, [r5, #4]
 800718a:	69a3      	ldr	r3, [r4, #24]
 800718c:	60a3      	str	r3, [r4, #8]
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	071b      	lsls	r3, r3, #28
 8007192:	d532      	bpl.n	80071fa <__swbuf_r+0x8e>
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d02f      	beq.n	80071fa <__swbuf_r+0x8e>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	6922      	ldr	r2, [r4, #16]
 800719e:	b2f7      	uxtb	r7, r6
 80071a0:	1a98      	subs	r0, r3, r2
 80071a2:	6963      	ldr	r3, [r4, #20]
 80071a4:	b2f6      	uxtb	r6, r6
 80071a6:	4283      	cmp	r3, r0
 80071a8:	dc05      	bgt.n	80071b6 <__swbuf_r+0x4a>
 80071aa:	0021      	movs	r1, r4
 80071ac:	0028      	movs	r0, r5
 80071ae:	f7ff f9b1 	bl	8006514 <_fflush_r>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d127      	bne.n	8007206 <__swbuf_r+0x9a>
 80071b6:	68a3      	ldr	r3, [r4, #8]
 80071b8:	3001      	adds	r0, #1
 80071ba:	3b01      	subs	r3, #1
 80071bc:	60a3      	str	r3, [r4, #8]
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	701f      	strb	r7, [r3, #0]
 80071c6:	6963      	ldr	r3, [r4, #20]
 80071c8:	4283      	cmp	r3, r0
 80071ca:	d004      	beq.n	80071d6 <__swbuf_r+0x6a>
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	07db      	lsls	r3, r3, #31
 80071d0:	d507      	bpl.n	80071e2 <__swbuf_r+0x76>
 80071d2:	2e0a      	cmp	r6, #10
 80071d4:	d105      	bne.n	80071e2 <__swbuf_r+0x76>
 80071d6:	0021      	movs	r1, r4
 80071d8:	0028      	movs	r0, r5
 80071da:	f7ff f99b 	bl	8006514 <_fflush_r>
 80071de:	2800      	cmp	r0, #0
 80071e0:	d111      	bne.n	8007206 <__swbuf_r+0x9a>
 80071e2:	0030      	movs	r0, r6
 80071e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e6:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <__swbuf_r+0xa4>)
 80071e8:	429c      	cmp	r4, r3
 80071ea:	d101      	bne.n	80071f0 <__swbuf_r+0x84>
 80071ec:	68ac      	ldr	r4, [r5, #8]
 80071ee:	e7cc      	b.n	800718a <__swbuf_r+0x1e>
 80071f0:	4b08      	ldr	r3, [pc, #32]	; (8007214 <__swbuf_r+0xa8>)
 80071f2:	429c      	cmp	r4, r3
 80071f4:	d1c9      	bne.n	800718a <__swbuf_r+0x1e>
 80071f6:	68ec      	ldr	r4, [r5, #12]
 80071f8:	e7c7      	b.n	800718a <__swbuf_r+0x1e>
 80071fa:	0021      	movs	r1, r4
 80071fc:	0028      	movs	r0, r5
 80071fe:	f000 f80b 	bl	8007218 <__swsetup_r>
 8007202:	2800      	cmp	r0, #0
 8007204:	d0c9      	beq.n	800719a <__swbuf_r+0x2e>
 8007206:	2601      	movs	r6, #1
 8007208:	4276      	negs	r6, r6
 800720a:	e7ea      	b.n	80071e2 <__swbuf_r+0x76>
 800720c:	08007970 	.word	0x08007970
 8007210:	08007990 	.word	0x08007990
 8007214:	08007950 	.word	0x08007950

08007218 <__swsetup_r>:
 8007218:	4b37      	ldr	r3, [pc, #220]	; (80072f8 <__swsetup_r+0xe0>)
 800721a:	b570      	push	{r4, r5, r6, lr}
 800721c:	681d      	ldr	r5, [r3, #0]
 800721e:	0006      	movs	r6, r0
 8007220:	000c      	movs	r4, r1
 8007222:	2d00      	cmp	r5, #0
 8007224:	d005      	beq.n	8007232 <__swsetup_r+0x1a>
 8007226:	69ab      	ldr	r3, [r5, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <__swsetup_r+0x1a>
 800722c:	0028      	movs	r0, r5
 800722e:	f7ff fa29 	bl	8006684 <__sinit>
 8007232:	4b32      	ldr	r3, [pc, #200]	; (80072fc <__swsetup_r+0xe4>)
 8007234:	429c      	cmp	r4, r3
 8007236:	d10f      	bne.n	8007258 <__swsetup_r+0x40>
 8007238:	686c      	ldr	r4, [r5, #4]
 800723a:	230c      	movs	r3, #12
 800723c:	5ee2      	ldrsh	r2, [r4, r3]
 800723e:	b293      	uxth	r3, r2
 8007240:	0711      	lsls	r1, r2, #28
 8007242:	d42d      	bmi.n	80072a0 <__swsetup_r+0x88>
 8007244:	06d9      	lsls	r1, r3, #27
 8007246:	d411      	bmi.n	800726c <__swsetup_r+0x54>
 8007248:	2309      	movs	r3, #9
 800724a:	2001      	movs	r0, #1
 800724c:	6033      	str	r3, [r6, #0]
 800724e:	3337      	adds	r3, #55	; 0x37
 8007250:	4313      	orrs	r3, r2
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	4240      	negs	r0, r0
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	4b29      	ldr	r3, [pc, #164]	; (8007300 <__swsetup_r+0xe8>)
 800725a:	429c      	cmp	r4, r3
 800725c:	d101      	bne.n	8007262 <__swsetup_r+0x4a>
 800725e:	68ac      	ldr	r4, [r5, #8]
 8007260:	e7eb      	b.n	800723a <__swsetup_r+0x22>
 8007262:	4b28      	ldr	r3, [pc, #160]	; (8007304 <__swsetup_r+0xec>)
 8007264:	429c      	cmp	r4, r3
 8007266:	d1e8      	bne.n	800723a <__swsetup_r+0x22>
 8007268:	68ec      	ldr	r4, [r5, #12]
 800726a:	e7e6      	b.n	800723a <__swsetup_r+0x22>
 800726c:	075b      	lsls	r3, r3, #29
 800726e:	d513      	bpl.n	8007298 <__swsetup_r+0x80>
 8007270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007272:	2900      	cmp	r1, #0
 8007274:	d008      	beq.n	8007288 <__swsetup_r+0x70>
 8007276:	0023      	movs	r3, r4
 8007278:	3344      	adds	r3, #68	; 0x44
 800727a:	4299      	cmp	r1, r3
 800727c:	d002      	beq.n	8007284 <__swsetup_r+0x6c>
 800727e:	0030      	movs	r0, r6
 8007280:	f7ff fad8 	bl	8006834 <_free_r>
 8007284:	2300      	movs	r3, #0
 8007286:	6363      	str	r3, [r4, #52]	; 0x34
 8007288:	2224      	movs	r2, #36	; 0x24
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	4393      	bics	r3, r2
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	2300      	movs	r3, #0
 8007292:	6063      	str	r3, [r4, #4]
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	2308      	movs	r3, #8
 800729a:	89a2      	ldrh	r2, [r4, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <__swsetup_r+0xa6>
 80072a6:	21a0      	movs	r1, #160	; 0xa0
 80072a8:	2280      	movs	r2, #128	; 0x80
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	0089      	lsls	r1, r1, #2
 80072ae:	0092      	lsls	r2, r2, #2
 80072b0:	400b      	ands	r3, r1
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d003      	beq.n	80072be <__swsetup_r+0xa6>
 80072b6:	0021      	movs	r1, r4
 80072b8:	0030      	movs	r0, r6
 80072ba:	f000 f84d 	bl	8007358 <__smakebuf_r>
 80072be:	220c      	movs	r2, #12
 80072c0:	5ea3      	ldrsh	r3, [r4, r2]
 80072c2:	2001      	movs	r0, #1
 80072c4:	001a      	movs	r2, r3
 80072c6:	b299      	uxth	r1, r3
 80072c8:	4002      	ands	r2, r0
 80072ca:	4203      	tst	r3, r0
 80072cc:	d00f      	beq.n	80072ee <__swsetup_r+0xd6>
 80072ce:	2200      	movs	r2, #0
 80072d0:	60a2      	str	r2, [r4, #8]
 80072d2:	6962      	ldr	r2, [r4, #20]
 80072d4:	4252      	negs	r2, r2
 80072d6:	61a2      	str	r2, [r4, #24]
 80072d8:	2000      	movs	r0, #0
 80072da:	6922      	ldr	r2, [r4, #16]
 80072dc:	4282      	cmp	r2, r0
 80072de:	d1ba      	bne.n	8007256 <__swsetup_r+0x3e>
 80072e0:	060a      	lsls	r2, r1, #24
 80072e2:	d5b8      	bpl.n	8007256 <__swsetup_r+0x3e>
 80072e4:	2240      	movs	r2, #64	; 0x40
 80072e6:	4313      	orrs	r3, r2
 80072e8:	81a3      	strh	r3, [r4, #12]
 80072ea:	3801      	subs	r0, #1
 80072ec:	e7b3      	b.n	8007256 <__swsetup_r+0x3e>
 80072ee:	0788      	lsls	r0, r1, #30
 80072f0:	d400      	bmi.n	80072f4 <__swsetup_r+0xdc>
 80072f2:	6962      	ldr	r2, [r4, #20]
 80072f4:	60a2      	str	r2, [r4, #8]
 80072f6:	e7ef      	b.n	80072d8 <__swsetup_r+0xc0>
 80072f8:	20000050 	.word	0x20000050
 80072fc:	08007970 	.word	0x08007970
 8007300:	08007990 	.word	0x08007990
 8007304:	08007950 	.word	0x08007950

08007308 <__swhatbuf_r>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	000e      	movs	r6, r1
 800730c:	001d      	movs	r5, r3
 800730e:	230e      	movs	r3, #14
 8007310:	5ec9      	ldrsh	r1, [r1, r3]
 8007312:	0014      	movs	r4, r2
 8007314:	b096      	sub	sp, #88	; 0x58
 8007316:	2900      	cmp	r1, #0
 8007318:	da08      	bge.n	800732c <__swhatbuf_r+0x24>
 800731a:	220c      	movs	r2, #12
 800731c:	5eb3      	ldrsh	r3, [r6, r2]
 800731e:	2200      	movs	r2, #0
 8007320:	602a      	str	r2, [r5, #0]
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	d411      	bmi.n	800734a <__swhatbuf_r+0x42>
 8007326:	2380      	movs	r3, #128	; 0x80
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	e00f      	b.n	800734c <__swhatbuf_r+0x44>
 800732c:	466a      	mov	r2, sp
 800732e:	f000 f863 	bl	80073f8 <_fstat_r>
 8007332:	2800      	cmp	r0, #0
 8007334:	dbf1      	blt.n	800731a <__swhatbuf_r+0x12>
 8007336:	23f0      	movs	r3, #240	; 0xf0
 8007338:	9901      	ldr	r1, [sp, #4]
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	4019      	ands	r1, r3
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <__swhatbuf_r+0x4c>)
 8007340:	18c9      	adds	r1, r1, r3
 8007342:	424b      	negs	r3, r1
 8007344:	4159      	adcs	r1, r3
 8007346:	6029      	str	r1, [r5, #0]
 8007348:	e7ed      	b.n	8007326 <__swhatbuf_r+0x1e>
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	2000      	movs	r0, #0
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	b016      	add	sp, #88	; 0x58
 8007352:	bd70      	pop	{r4, r5, r6, pc}
 8007354:	ffffe000 	.word	0xffffe000

08007358 <__smakebuf_r>:
 8007358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800735a:	2602      	movs	r6, #2
 800735c:	898b      	ldrh	r3, [r1, #12]
 800735e:	0005      	movs	r5, r0
 8007360:	000c      	movs	r4, r1
 8007362:	4233      	tst	r3, r6
 8007364:	d006      	beq.n	8007374 <__smakebuf_r+0x1c>
 8007366:	0023      	movs	r3, r4
 8007368:	3347      	adds	r3, #71	; 0x47
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	2301      	movs	r3, #1
 8007370:	6163      	str	r3, [r4, #20]
 8007372:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007374:	466a      	mov	r2, sp
 8007376:	ab01      	add	r3, sp, #4
 8007378:	f7ff ffc6 	bl	8007308 <__swhatbuf_r>
 800737c:	9900      	ldr	r1, [sp, #0]
 800737e:	0007      	movs	r7, r0
 8007380:	0028      	movs	r0, r5
 8007382:	f7ff fac3 	bl	800690c <_malloc_r>
 8007386:	2800      	cmp	r0, #0
 8007388:	d108      	bne.n	800739c <__smakebuf_r+0x44>
 800738a:	220c      	movs	r2, #12
 800738c:	5ea3      	ldrsh	r3, [r4, r2]
 800738e:	059a      	lsls	r2, r3, #22
 8007390:	d4ef      	bmi.n	8007372 <__smakebuf_r+0x1a>
 8007392:	2203      	movs	r2, #3
 8007394:	4393      	bics	r3, r2
 8007396:	431e      	orrs	r6, r3
 8007398:	81a6      	strh	r6, [r4, #12]
 800739a:	e7e4      	b.n	8007366 <__smakebuf_r+0xe>
 800739c:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <__smakebuf_r+0x84>)
 800739e:	62ab      	str	r3, [r5, #40]	; 0x28
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	89a2      	ldrh	r2, [r4, #12]
 80073a4:	6020      	str	r0, [r4, #0]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	9b00      	ldr	r3, [sp, #0]
 80073ac:	6120      	str	r0, [r4, #16]
 80073ae:	6163      	str	r3, [r4, #20]
 80073b0:	9b01      	ldr	r3, [sp, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <__smakebuf_r+0x7a>
 80073b6:	0028      	movs	r0, r5
 80073b8:	230e      	movs	r3, #14
 80073ba:	5ee1      	ldrsh	r1, [r4, r3]
 80073bc:	f000 f82e 	bl	800741c <_isatty_r>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d006      	beq.n	80073d2 <__smakebuf_r+0x7a>
 80073c4:	2203      	movs	r2, #3
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	4393      	bics	r3, r2
 80073ca:	001a      	movs	r2, r3
 80073cc:	2301      	movs	r3, #1
 80073ce:	4313      	orrs	r3, r2
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	89a0      	ldrh	r0, [r4, #12]
 80073d4:	4307      	orrs	r7, r0
 80073d6:	81a7      	strh	r7, [r4, #12]
 80073d8:	e7cb      	b.n	8007372 <__smakebuf_r+0x1a>
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	08006609 	.word	0x08006609

080073e0 <memchr>:
 80073e0:	b2c9      	uxtb	r1, r1
 80073e2:	1882      	adds	r2, r0, r2
 80073e4:	4290      	cmp	r0, r2
 80073e6:	d101      	bne.n	80073ec <memchr+0xc>
 80073e8:	2000      	movs	r0, #0
 80073ea:	4770      	bx	lr
 80073ec:	7803      	ldrb	r3, [r0, #0]
 80073ee:	428b      	cmp	r3, r1
 80073f0:	d0fb      	beq.n	80073ea <memchr+0xa>
 80073f2:	3001      	adds	r0, #1
 80073f4:	e7f6      	b.n	80073e4 <memchr+0x4>
	...

080073f8 <_fstat_r>:
 80073f8:	2300      	movs	r3, #0
 80073fa:	b570      	push	{r4, r5, r6, lr}
 80073fc:	4d06      	ldr	r5, [pc, #24]	; (8007418 <_fstat_r+0x20>)
 80073fe:	0004      	movs	r4, r0
 8007400:	0008      	movs	r0, r1
 8007402:	0011      	movs	r1, r2
 8007404:	602b      	str	r3, [r5, #0]
 8007406:	f7fa fc30 	bl	8001c6a <_fstat>
 800740a:	1c43      	adds	r3, r0, #1
 800740c:	d103      	bne.n	8007416 <_fstat_r+0x1e>
 800740e:	682b      	ldr	r3, [r5, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d000      	beq.n	8007416 <_fstat_r+0x1e>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd70      	pop	{r4, r5, r6, pc}
 8007418:	20000b94 	.word	0x20000b94

0800741c <_isatty_r>:
 800741c:	2300      	movs	r3, #0
 800741e:	b570      	push	{r4, r5, r6, lr}
 8007420:	4d06      	ldr	r5, [pc, #24]	; (800743c <_isatty_r+0x20>)
 8007422:	0004      	movs	r4, r0
 8007424:	0008      	movs	r0, r1
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	f7fa fc2d 	bl	8001c86 <_isatty>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d103      	bne.n	8007438 <_isatty_r+0x1c>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d000      	beq.n	8007438 <_isatty_r+0x1c>
 8007436:	6023      	str	r3, [r4, #0]
 8007438:	bd70      	pop	{r4, r5, r6, pc}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	20000b94 	.word	0x20000b94

08007440 <_init>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007446:	bc08      	pop	{r3}
 8007448:	469e      	mov	lr, r3
 800744a:	4770      	bx	lr

0800744c <_fini>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007452:	bc08      	pop	{r3}
 8007454:	469e      	mov	lr, r3
 8007456:	4770      	bx	lr

08007458 <__FLASH_Program_Fast_veneer>:
 8007458:	b401      	push	{r0}
 800745a:	4802      	ldr	r0, [pc, #8]	; (8007464 <__FLASH_Program_Fast_veneer+0xc>)
 800745c:	4684      	mov	ip, r0
 800745e:	bc01      	pop	{r0}
 8007460:	4760      	bx	ip
 8007462:	bf00      	nop
 8007464:	200000b5 	.word	0x200000b5

Disassembly of section .data:

20000000 <SERVER_BDADDRR>:
20000000:	04030201                                 ......

20000006 <consd>:
20000006:	                                         ..

20000008 <next_ack>:
20000008:	00000001                                ....

2000000c <StartPageAddress>:
2000000c:	08040000                                ....

20000010 <CHAT_SERVICE_UUID>:
20000010:	2b987b88 9d89fc6b b8ae48f4 984f3988     .{.+k....H...9O.

20000020 <RX_CHAR_UUID>:
20000020:	2b987b88 9d89fc6b b8ae49f4 984f3988     .{.+k....I...9O.

20000030 <TX_CHAR_UUID>:
20000030:	2b987b88 9d89fc6b b8ae4af4 984f3988     .{.+k....J...9O.

20000040 <set_connectable>:
20000040:	00000001                                ....

20000044 <SystemCoreClock>:
20000044:	00f42400                                .$..

20000048 <uwTickPrio>:
20000048:	00000004                                ....

2000004c <uwTickFreq>:
2000004c:	00000001                                ....

20000050 <_impure_ptr>:
20000050:	20000054                                T.. 

20000054 <impure_data>:
20000054:	00000000 08007970 08007990 08007950     ....py...y..Py..
	...

200000b4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000b4:	b580      	push	{r7, lr}
200000b6:	b088      	sub	sp, #32
200000b8:	af00      	add	r7, sp, #0
200000ba:	6078      	str	r0, [r7, #4]
200000bc:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000be:	231f      	movs	r3, #31
200000c0:	18fb      	adds	r3, r7, r3
200000c2:	2200      	movs	r2, #0
200000c4:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000ca:	683b      	ldr	r3, [r7, #0]
200000cc:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ce:	4b1a      	ldr	r3, [pc, #104]	; (20000138 <FLASH_Program_Fast+0x84>)
200000d0:	695a      	ldr	r2, [r3, #20]
200000d2:	4b19      	ldr	r3, [pc, #100]	; (20000138 <FLASH_Program_Fast+0x84>)
200000d4:	2180      	movs	r1, #128	; 0x80
200000d6:	02c9      	lsls	r1, r1, #11
200000d8:	430a      	orrs	r2, r1
200000da:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000dc:	f3ef 8310 	mrs	r3, PRIMASK
200000e0:	60fb      	str	r3, [r7, #12]
  return(result);
200000e2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000e6:	b672      	cpsid	i
}
200000e8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000ea:	e00f      	b.n	2000010c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000ec:	697a      	ldr	r2, [r7, #20]
200000ee:	69bb      	ldr	r3, [r7, #24]
200000f0:	6812      	ldr	r2, [r2, #0]
200000f2:	601a      	str	r2, [r3, #0]
    src += 4U;
200000f4:	697b      	ldr	r3, [r7, #20]
200000f6:	3304      	adds	r3, #4
200000f8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000fa:	69bb      	ldr	r3, [r7, #24]
200000fc:	3304      	adds	r3, #4
200000fe:	61bb      	str	r3, [r7, #24]
    index++;
20000100:	211f      	movs	r1, #31
20000102:	187b      	adds	r3, r7, r1
20000104:	781a      	ldrb	r2, [r3, #0]
20000106:	187b      	adds	r3, r7, r1
20000108:	3201      	adds	r2, #1
2000010a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000010c:	231f      	movs	r3, #31
2000010e:	18fb      	adds	r3, r7, r3
20000110:	781b      	ldrb	r3, [r3, #0]
20000112:	2b3f      	cmp	r3, #63	; 0x3f
20000114:	d9ea      	bls.n	200000ec <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	4b07      	ldr	r3, [pc, #28]	; (20000138 <FLASH_Program_Fast+0x84>)
2000011a:	691a      	ldr	r2, [r3, #16]
2000011c:	23c0      	movs	r3, #192	; 0xc0
2000011e:	029b      	lsls	r3, r3, #10
20000120:	4013      	ands	r3, r2
20000122:	d1f9      	bne.n	20000118 <FLASH_Program_Fast+0x64>
20000124:	693b      	ldr	r3, [r7, #16]
20000126:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000128:	68bb      	ldr	r3, [r7, #8]
2000012a:	f383 8810 	msr	PRIMASK, r3
}
2000012e:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000130:	46c0      	nop			; (mov r8, r8)
20000132:	46bd      	mov	sp, r7
20000134:	b008      	add	sp, #32
20000136:	bd80      	pop	{r7, pc}
20000138:	40022000 	.word	0x40022000
